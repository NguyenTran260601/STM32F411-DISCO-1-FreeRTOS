
04Led_Periodic_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005764  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08005904  08005904  00015904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a80  08005a80  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005a80  08005a80  00015a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a88  08005a88  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a88  08005a88  00015a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a8c  08005a8c  00015a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001440c  20000014  08005aa4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014420  08005aa4  00024420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c70  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d0  00000000  00000000  00031cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  00034488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  00035548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c78  00000000  00000000  000364b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011fa6  00000000  00000000  0004e128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098908  00000000  00000000  000600ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f89d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045b8  00000000  00000000  000f8a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080058ec 	.word	0x080058ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	080058ec 	.word	0x080058ec

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012e4c 	.word	0x20012e4c

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af02      	add	r7, sp, #8
	TaskHandle_t task2_handle;
	TaskHandle_t task3_handle;

	BaseType_t status;

	HAL_Init();
 800057e:	f000 fb7f 	bl	8000c80 <HAL_Init>

	SystemClock_Config();
 8000582:	f000 f8bf 	bl	8000704 <SystemClock_Config>

	MX_GPIO_Init();
 8000586:	f000 f927 	bl	80007d8 <MX_GPIO_Init>

	//enable CYCCNT register
	DWT_CTRL |= (1 << 0);
 800058a:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <main+0xc8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a2c      	ldr	r2, [pc, #176]	; (8000640 <main+0xc8>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6013      	str	r3, [r2, #0]


	SEGGER_SYSVIEW_Conf();
 8000596:	f003 f965 	bl	8003864 <SEGGER_SYSVIEW_Conf>

	SEGGER_SYSVIEW_Start();
 800059a:	f004 fb8d 	bl	8004cb8 <SEGGER_SYSVIEW_Start>

	status = xTaskCreate(led_green_handler, "Led1_Task", 200, NULL, 2, &task1_handle);
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	2302      	movs	r3, #2
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2300      	movs	r3, #0
 80005aa:	22c8      	movs	r2, #200	; 0xc8
 80005ac:	4925      	ldr	r1, [pc, #148]	; (8000644 <main+0xcc>)
 80005ae:	4826      	ldr	r0, [pc, #152]	; (8000648 <main+0xd0>)
 80005b0:	f001 fe08 	bl	80021c4 <xTaskCreate>
 80005b4:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d00a      	beq.n	80005d2 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c0:	f383 8811 	msr	BASEPRI, r3
 80005c4:	f3bf 8f6f 	isb	sy
 80005c8:	f3bf 8f4f 	dsb	sy
 80005cc:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ce:	bf00      	nop
 80005d0:	e7fe      	b.n	80005d0 <main+0x58>

	status = xTaskCreate(led_orange_handler, "Led2_Task", 200, NULL, 2, &task2_handle);
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	2302      	movs	r3, #2
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2300      	movs	r3, #0
 80005de:	22c8      	movs	r2, #200	; 0xc8
 80005e0:	491a      	ldr	r1, [pc, #104]	; (800064c <main+0xd4>)
 80005e2:	481b      	ldr	r0, [pc, #108]	; (8000650 <main+0xd8>)
 80005e4:	f001 fdee 	bl	80021c4 <xTaskCreate>
 80005e8:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d00a      	beq.n	8000606 <main+0x8e>
        __asm volatile
 80005f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f4:	f383 8811 	msr	BASEPRI, r3
 80005f8:	f3bf 8f6f 	isb	sy
 80005fc:	f3bf 8f4f 	dsb	sy
 8000600:	617b      	str	r3, [r7, #20]
    }
 8000602:	bf00      	nop
 8000604:	e7fe      	b.n	8000604 <main+0x8c>

	status = xTaskCreate(led_red_handler, "Led3_Task", 200, NULL, 2, &task3_handle);
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2302      	movs	r3, #2
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2300      	movs	r3, #0
 8000610:	22c8      	movs	r2, #200	; 0xc8
 8000612:	4910      	ldr	r1, [pc, #64]	; (8000654 <main+0xdc>)
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <main+0xe0>)
 8000616:	f001 fdd5 	bl	80021c4 <xTaskCreate>
 800061a:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d00a      	beq.n	8000638 <main+0xc0>
        __asm volatile
 8000622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000626:	f383 8811 	msr	BASEPRI, r3
 800062a:	f3bf 8f6f 	isb	sy
 800062e:	f3bf 8f4f 	dsb	sy
 8000632:	613b      	str	r3, [r7, #16]
    }
 8000634:	bf00      	nop
 8000636:	e7fe      	b.n	8000636 <main+0xbe>

	//start the freeRTOS scheduler
	vTaskStartScheduler();
 8000638:	f001 ffe0 	bl	80025fc <vTaskStartScheduler>

  while (1)
 800063c:	e7fe      	b.n	800063c <main+0xc4>
 800063e:	bf00      	nop
 8000640:	e0001000 	.word	0xe0001000
 8000644:	08005904 	.word	0x08005904
 8000648:	0800065d 	.word	0x0800065d
 800064c:	08005910 	.word	0x08005910
 8000650:	08000695 	.word	0x08000695
 8000654:	0800591c 	.word	0x0800591c
 8000658:	080006cd 	.word	0x080006cd

0800065c <led_green_handler>:

  }
}

static void led_green_handler(void* parameters)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	TickType_t xTask_Wakeup_time = xTaskGetTickCount();
 8000664:	f002 f934 	bl	80028d0 <xTaskGetTickCount>
 8000668:	4603      	mov	r3, r0
 800066a:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 800066c:	4807      	ldr	r0, [pc, #28]	; (800068c <led_green_handler+0x30>)
 800066e:	f005 f883 	bl	8005778 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000672:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <led_green_handler+0x34>)
 8000678:	f000 fdc3 	bl	8001202 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xTask_Wakeup_time, pdMS_TO_TICKS(800));
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000684:	4618      	mov	r0, r3
 8000686:	f001 ff37 	bl	80024f8 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 800068a:	e7ef      	b.n	800066c <led_green_handler+0x10>
 800068c:	08005928 	.word	0x08005928
 8000690:	40020c00 	.word	0x40020c00

08000694 <led_orange_handler>:

}


static void led_orange_handler(void* parameters)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	TickType_t xTask_Wakeup_time = xTaskGetTickCount();
 800069c:	f002 f918 	bl	80028d0 <xTaskGetTickCount>
 80006a0:	4603      	mov	r3, r0
 80006a2:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80006a4:	4807      	ldr	r0, [pc, #28]	; (80006c4 <led_orange_handler+0x30>)
 80006a6:	f005 f867 	bl	8005778 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 80006aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ae:	4806      	ldr	r0, [pc, #24]	; (80006c8 <led_orange_handler+0x34>)
 80006b0:	f000 fda7 	bl	8001202 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xTask_Wakeup_time, pdMS_TO_TICKS(800));
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 ff1b 	bl	80024f8 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80006c2:	e7ef      	b.n	80006a4 <led_orange_handler+0x10>
 80006c4:	0800593c 	.word	0x0800593c
 80006c8:	40020c00 	.word	0x40020c00

080006cc <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	TickType_t xTask_Wakeup_time = xTaskGetTickCount();
 80006d4:	f002 f8fc 	bl	80028d0 <xTaskGetTickCount>
 80006d8:	4603      	mov	r3, r0
 80006da:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80006dc:	4807      	ldr	r0, [pc, #28]	; (80006fc <led_red_handler+0x30>)
 80006de:	f005 f84b 	bl	8005778 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 80006e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e6:	4806      	ldr	r0, [pc, #24]	; (8000700 <led_red_handler+0x34>)
 80006e8:	f000 fd8b 	bl	8001202 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xTask_Wakeup_time, pdMS_TO_TICKS(400));
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 feff 	bl	80024f8 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80006fa:	e7ef      	b.n	80006dc <led_red_handler+0x10>
 80006fc:	08005950 	.word	0x08005950
 8000700:	40020c00 	.word	0x40020c00

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2230      	movs	r2, #48	; 0x30
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f005 f8e2 	bl	80058dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <SystemClock_Config+0xcc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a27      	ldr	r2, [pc, #156]	; (80007d0 <SystemClock_Config+0xcc>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <SystemClock_Config+0xcc>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <SystemClock_Config+0xd0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <SystemClock_Config+0xd0>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <SystemClock_Config+0xd0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000760:	2302      	movs	r3, #2
 8000762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2310      	movs	r3, #16
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076c:	2302      	movs	r3, #2
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000770:	2300      	movs	r3, #0
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000778:	23c0      	movs	r3, #192	; 0xc0
 800077a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800077c:	2304      	movs	r3, #4
 800077e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000780:	2308      	movs	r3, #8
 8000782:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0320 	add.w	r3, r7, #32
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fd55 	bl	8001238 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000794:	f000 f990 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079c:	2302      	movs	r3, #2
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2103      	movs	r1, #3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 ffb6 	bl	8001728 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007c2:	f000 f979 	bl	8000ab8 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	; 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08c      	sub	sp, #48	; 0x30
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
 80007f2:	4ba2      	ldr	r3, [pc, #648]	; (8000a7c <MX_GPIO_Init+0x2a4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4aa1      	ldr	r2, [pc, #644]	; (8000a7c <MX_GPIO_Init+0x2a4>)
 80007f8:	f043 0310 	orr.w	r3, r3, #16
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b9f      	ldr	r3, [pc, #636]	; (8000a7c <MX_GPIO_Init+0x2a4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0310 	and.w	r3, r3, #16
 8000806:	61bb      	str	r3, [r7, #24]
 8000808:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	4b9b      	ldr	r3, [pc, #620]	; (8000a7c <MX_GPIO_Init+0x2a4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a9a      	ldr	r2, [pc, #616]	; (8000a7c <MX_GPIO_Init+0x2a4>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b98      	ldr	r3, [pc, #608]	; (8000a7c <MX_GPIO_Init+0x2a4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b94      	ldr	r3, [pc, #592]	; (8000a7c <MX_GPIO_Init+0x2a4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a93      	ldr	r2, [pc, #588]	; (8000a7c <MX_GPIO_Init+0x2a4>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b91      	ldr	r3, [pc, #580]	; (8000a7c <MX_GPIO_Init+0x2a4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b8d      	ldr	r3, [pc, #564]	; (8000a7c <MX_GPIO_Init+0x2a4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a8c      	ldr	r2, [pc, #560]	; (8000a7c <MX_GPIO_Init+0x2a4>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b8a      	ldr	r3, [pc, #552]	; (8000a7c <MX_GPIO_Init+0x2a4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b86      	ldr	r3, [pc, #536]	; (8000a7c <MX_GPIO_Init+0x2a4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a85      	ldr	r2, [pc, #532]	; (8000a7c <MX_GPIO_Init+0x2a4>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b83      	ldr	r3, [pc, #524]	; (8000a7c <MX_GPIO_Init+0x2a4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b7f      	ldr	r3, [pc, #508]	; (8000a7c <MX_GPIO_Init+0x2a4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a7e      	ldr	r2, [pc, #504]	; (8000a7c <MX_GPIO_Init+0x2a4>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b7c      	ldr	r3, [pc, #496]	; (8000a7c <MX_GPIO_Init+0x2a4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0308 	and.w	r3, r3, #8
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2108      	movs	r1, #8
 800089a:	4879      	ldr	r0, [pc, #484]	; (8000a80 <MX_GPIO_Init+0x2a8>)
 800089c:	f000 fc98 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2101      	movs	r1, #1
 80008a4:	4877      	ldr	r0, [pc, #476]	; (8000a84 <MX_GPIO_Init+0x2ac>)
 80008a6:	f000 fc93 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008aa:	2200      	movs	r2, #0
 80008ac:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008b0:	4875      	ldr	r0, [pc, #468]	; (8000a88 <MX_GPIO_Init+0x2b0>)
 80008b2:	f000 fc8d 	bl	80011d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008b6:	2304      	movs	r3, #4
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	486d      	ldr	r0, [pc, #436]	; (8000a80 <MX_GPIO_Init+0x2a8>)
 80008ca:	f000 fafd 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ce:	2308      	movs	r3, #8
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4866      	ldr	r0, [pc, #408]	; (8000a80 <MX_GPIO_Init+0x2a8>)
 80008e6:	f000 faef 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80008ea:	2332      	movs	r3, #50	; 0x32
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4860      	ldr	r0, [pc, #384]	; (8000a80 <MX_GPIO_Init+0x2a8>)
 8000900:	f000 fae2 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000904:	2301      	movs	r3, #1
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	485a      	ldr	r0, [pc, #360]	; (8000a84 <MX_GPIO_Init+0x2ac>)
 800091c:	f000 fad4 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000920:	2308      	movs	r3, #8
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000930:	2305      	movs	r3, #5
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4852      	ldr	r0, [pc, #328]	; (8000a84 <MX_GPIO_Init+0x2ac>)
 800093c:	f000 fac4 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000940:	2301      	movs	r3, #1
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000944:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	484d      	ldr	r0, [pc, #308]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 8000956:	f000 fab7 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800095a:	2310      	movs	r3, #16
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800096a:	2306      	movs	r3, #6
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4845      	ldr	r0, [pc, #276]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 8000976:	f000 faa7 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800097a:	23e0      	movs	r3, #224	; 0xe0
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800098a:	2305      	movs	r3, #5
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	483d      	ldr	r0, [pc, #244]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 8000996:	f000 fa97 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800099a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ac:	2305      	movs	r3, #5
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4836      	ldr	r0, [pc, #216]	; (8000a90 <MX_GPIO_Init+0x2b8>)
 80009b8:	f000 fa86 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009bc:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009c0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	482c      	ldr	r0, [pc, #176]	; (8000a88 <MX_GPIO_Init+0x2b0>)
 80009d6:	f000 fa77 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009da:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ec:	2306      	movs	r3, #6
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4823      	ldr	r0, [pc, #140]	; (8000a84 <MX_GPIO_Init+0x2ac>)
 80009f8:	f000 fa66 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	481e      	ldr	r0, [pc, #120]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 8000a12:	f000 fa59 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a16:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a28:	230a      	movs	r3, #10
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4816      	ldr	r0, [pc, #88]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 8000a34:	f000 fa48 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a38:	2320      	movs	r3, #32
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480f      	ldr	r0, [pc, #60]	; (8000a88 <MX_GPIO_Init+0x2b0>)
 8000a4c:	f000 fa3c 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a50:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a56:	2312      	movs	r3, #18
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a62:	2304      	movs	r3, #4
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4808      	ldr	r0, [pc, #32]	; (8000a90 <MX_GPIO_Init+0x2b8>)
 8000a6e:	f000 fa2b 	bl	8000ec8 <HAL_GPIO_Init>

}
 8000a72:	bf00      	nop
 8000a74:	3730      	adds	r7, #48	; 0x30
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40020800 	.word	0x40020800
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	40020400 	.word	0x40020400

08000a94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d101      	bne.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aa6:	f000 f90d 	bl	8000cc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40014400 	.word	0x40014400

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b02:	f002 faf9 	bl	80030f8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	2019      	movs	r0, #25
 8000b2a:	f000 f9a3 	bl	8000e74 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b2e:	2019      	movs	r0, #25
 8000b30:	f000 f9bc 	bl	8000eac <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3c:	4a1e      	ldr	r2, [pc, #120]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b42:	6453      	str	r3, [r2, #68]	; 0x44
 8000b44:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b50:	f107 0210 	add.w	r2, r7, #16
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4611      	mov	r1, r2
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 fff0 	bl	8001b40 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b60:	f000 ffda 	bl	8001b18 <HAL_RCC_GetPCLK2Freq>
 8000b64:	4603      	mov	r3, r0
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6c:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <HAL_InitTick+0xa8>)
 8000b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b72:	0c9b      	lsrs	r3, r3, #18
 8000b74:	3b01      	subs	r3, #1
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <HAL_InitTick+0xb0>)
 8000b7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b84:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b8a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000b98:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b9a:	f001 f803 	bl	8001ba4 <HAL_TIM_Base_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d104      	bne.n	8000bae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000ba4:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <HAL_InitTick+0xac>)
 8000ba6:	f001 f857 	bl	8001c58 <HAL_TIM_Base_Start_IT>
 8000baa:	4603      	mov	r3, r0
 8000bac:	e000      	b.n	8000bb0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3730      	adds	r7, #48	; 0x30
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	431bde83 	.word	0x431bde83
 8000bc0:	20000030 	.word	0x20000030
 8000bc4:	40014400 	.word	0x40014400

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bfa:	f001 f88f 	bl	8001d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000030 	.word	0x20000030

08000c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <SystemInit+0x20>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <SystemInit+0x20>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c32:	490e      	ldr	r1, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c34:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c48:	4c0b      	ldr	r4, [pc, #44]	; (8000c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c56:	f7ff ffd7 	bl	8000c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f004 fdfd 	bl	8005858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5e:	f7ff fc8b 	bl	8000578 <main>
  bx  lr    
 8000c62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c70:	08005a90 	.word	0x08005a90
  ldr r2, =_sbss
 8000c74:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c78:	20014420 	.word	0x20014420

08000c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <HAL_Init+0x40>)
 8000c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_Init+0x40>)
 8000c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_Init+0x40>)
 8000ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 f8d8 	bl	8000e5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cae:	200f      	movs	r0, #15
 8000cb0:	f7ff ff30 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb4:	f7ff ff06 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023c00 	.word	0x40023c00

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000078 	.word	0x20000078

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000078 	.word	0x20000078

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db0b      	blt.n	8000d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 021f 	and.w	r2, r3, #31
 8000d80:	4907      	ldr	r1, [pc, #28]	; (8000da0 <__NVIC_EnableIRQ+0x38>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	; (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	; 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ff4c 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e86:	f7ff ff61 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000e8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	68b9      	ldr	r1, [r7, #8]
 8000e90:	6978      	ldr	r0, [r7, #20]
 8000e92:	f7ff ffb1 	bl	8000df8 <NVIC_EncodePriority>
 8000e96:	4602      	mov	r2, r0
 8000e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff80 	bl	8000da4 <__NVIC_SetPriority>
}
 8000ea4:	bf00      	nop
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff54 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	e159      	b.n	8001198 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	f040 8148 	bne.w	8001192 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d005      	beq.n	8000f1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d130      	bne.n	8000f7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	2203      	movs	r2, #3
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f50:	2201      	movs	r2, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	091b      	lsrs	r3, r3, #4
 8000f66:	f003 0201 	and.w	r2, r3, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d017      	beq.n	8000fb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d123      	bne.n	800100c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	08da      	lsrs	r2, r3, #3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3208      	adds	r2, #8
 8000fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	691a      	ldr	r2, [r3, #16]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	08da      	lsrs	r2, r3, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3208      	adds	r2, #8
 8001006:	69b9      	ldr	r1, [r7, #24]
 8001008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0203 	and.w	r2, r3, #3
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 80a2 	beq.w	8001192 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b57      	ldr	r3, [pc, #348]	; (80011b0 <HAL_GPIO_Init+0x2e8>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a56      	ldr	r2, [pc, #344]	; (80011b0 <HAL_GPIO_Init+0x2e8>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b54      	ldr	r3, [pc, #336]	; (80011b0 <HAL_GPIO_Init+0x2e8>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106a:	4a52      	ldr	r2, [pc, #328]	; (80011b4 <HAL_GPIO_Init+0x2ec>)
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a49      	ldr	r2, [pc, #292]	; (80011b8 <HAL_GPIO_Init+0x2f0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d019      	beq.n	80010ca <HAL_GPIO_Init+0x202>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a48      	ldr	r2, [pc, #288]	; (80011bc <HAL_GPIO_Init+0x2f4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d013      	beq.n	80010c6 <HAL_GPIO_Init+0x1fe>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a47      	ldr	r2, [pc, #284]	; (80011c0 <HAL_GPIO_Init+0x2f8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d00d      	beq.n	80010c2 <HAL_GPIO_Init+0x1fa>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a46      	ldr	r2, [pc, #280]	; (80011c4 <HAL_GPIO_Init+0x2fc>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d007      	beq.n	80010be <HAL_GPIO_Init+0x1f6>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a45      	ldr	r2, [pc, #276]	; (80011c8 <HAL_GPIO_Init+0x300>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d101      	bne.n	80010ba <HAL_GPIO_Init+0x1f2>
 80010b6:	2304      	movs	r3, #4
 80010b8:	e008      	b.n	80010cc <HAL_GPIO_Init+0x204>
 80010ba:	2307      	movs	r3, #7
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_Init+0x204>
 80010be:	2303      	movs	r3, #3
 80010c0:	e004      	b.n	80010cc <HAL_GPIO_Init+0x204>
 80010c2:	2302      	movs	r3, #2
 80010c4:	e002      	b.n	80010cc <HAL_GPIO_Init+0x204>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <HAL_GPIO_Init+0x204>
 80010ca:	2300      	movs	r3, #0
 80010cc:	69fa      	ldr	r2, [r7, #28]
 80010ce:	f002 0203 	and.w	r2, r2, #3
 80010d2:	0092      	lsls	r2, r2, #2
 80010d4:	4093      	lsls	r3, r2
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010dc:	4935      	ldr	r1, [pc, #212]	; (80011b4 <HAL_GPIO_Init+0x2ec>)
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	3302      	adds	r3, #2
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ea:	4b38      	ldr	r3, [pc, #224]	; (80011cc <HAL_GPIO_Init+0x304>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800110e:	4a2f      	ldr	r2, [pc, #188]	; (80011cc <HAL_GPIO_Init+0x304>)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001114:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <HAL_GPIO_Init+0x304>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001138:	4a24      	ldr	r2, [pc, #144]	; (80011cc <HAL_GPIO_Init+0x304>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800113e:	4b23      	ldr	r3, [pc, #140]	; (80011cc <HAL_GPIO_Init+0x304>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001162:	4a1a      	ldr	r2, [pc, #104]	; (80011cc <HAL_GPIO_Init+0x304>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_GPIO_Init+0x304>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800118c:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <HAL_GPIO_Init+0x304>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3301      	adds	r3, #1
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	2b0f      	cmp	r3, #15
 800119c:	f67f aea2 	bls.w	8000ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40013800 	.word	0x40013800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40020400 	.word	0x40020400
 80011c0:	40020800 	.word	0x40020800
 80011c4:	40020c00 	.word	0x40020c00
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40013c00 	.word	0x40013c00

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011ec:	e003      	b.n	80011f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	041a      	lsls	r2, r3, #16
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	619a      	str	r2, [r3, #24]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001202:	b480      	push	{r7}
 8001204:	b085      	sub	sp, #20
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	460b      	mov	r3, r1
 800120c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001214:	887a      	ldrh	r2, [r7, #2]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4013      	ands	r3, r2
 800121a:	041a      	lsls	r2, r3, #16
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43d9      	mvns	r1, r3
 8001220:	887b      	ldrh	r3, [r7, #2]
 8001222:	400b      	ands	r3, r1
 8001224:	431a      	orrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	619a      	str	r2, [r3, #24]
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e267      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d075      	beq.n	8001342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001256:	4b88      	ldr	r3, [pc, #544]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b04      	cmp	r3, #4
 8001260:	d00c      	beq.n	800127c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001262:	4b85      	ldr	r3, [pc, #532]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126a:	2b08      	cmp	r3, #8
 800126c:	d112      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4b82      	ldr	r3, [pc, #520]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800127a:	d10b      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	4b7e      	ldr	r3, [pc, #504]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d05b      	beq.n	8001340 <HAL_RCC_OscConfig+0x108>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d157      	bne.n	8001340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e242      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800129c:	d106      	bne.n	80012ac <HAL_RCC_OscConfig+0x74>
 800129e:	4b76      	ldr	r3, [pc, #472]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a75      	ldr	r2, [pc, #468]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e01d      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x98>
 80012b6:	4b70      	ldr	r3, [pc, #448]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a6f      	ldr	r2, [pc, #444]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	4b6d      	ldr	r3, [pc, #436]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6c      	ldr	r2, [pc, #432]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012d0:	4b69      	ldr	r3, [pc, #420]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a68      	ldr	r2, [pc, #416]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b66      	ldr	r3, [pc, #408]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a65      	ldr	r2, [pc, #404]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fcfc 	bl	8000cec <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fcf8 	bl	8000cec <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e207      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b5b      	ldr	r3, [pc, #364]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0xc0>
 8001316:	e014      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fce8 	bl	8000cec <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fce4 	bl	8000cec <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e1f3      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	4b51      	ldr	r3, [pc, #324]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0xe8>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d063      	beq.n	8001416 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800134e:	4b4a      	ldr	r3, [pc, #296]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135a:	4b47      	ldr	r3, [pc, #284]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001362:	2b08      	cmp	r3, #8
 8001364:	d11c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b44      	ldr	r3, [pc, #272]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d116      	bne.n	80013a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	4b41      	ldr	r3, [pc, #260]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <HAL_RCC_OscConfig+0x152>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d001      	beq.n	800138a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e1c7      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4937      	ldr	r1, [pc, #220]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	e03a      	b.n	8001416 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d020      	beq.n	80013ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a8:	4b34      	ldr	r3, [pc, #208]	; (800147c <HAL_RCC_OscConfig+0x244>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff fc9d 	bl	8000cec <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fc99 	bl	8000cec <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e1a8      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4925      	ldr	r1, [pc, #148]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
 80013e8:	e015      	b.n	8001416 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	4b24      	ldr	r3, [pc, #144]	; (800147c <HAL_RCC_OscConfig+0x244>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff fc7c 	bl	8000cec <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f8:	f7ff fc78 	bl	8000cec <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e187      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d036      	beq.n	8001490 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d016      	beq.n	8001458 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_RCC_OscConfig+0x248>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001430:	f7ff fc5c 	bl	8000cec <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff fc58 	bl	8000cec <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e167      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800144c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x200>
 8001456:	e01b      	b.n	8001490 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_RCC_OscConfig+0x248>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145e:	f7ff fc45 	bl	8000cec <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001464:	e00e      	b.n	8001484 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001466:	f7ff fc41 	bl	8000cec <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d907      	bls.n	8001484 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e150      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
 8001478:	40023800 	.word	0x40023800
 800147c:	42470000 	.word	0x42470000
 8001480:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1ea      	bne.n	8001466 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 8097 	beq.w	80015cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a2:	4b81      	ldr	r3, [pc, #516]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10f      	bne.n	80014ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b7d      	ldr	r3, [pc, #500]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a7c      	ldr	r2, [pc, #496]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b7a      	ldr	r3, [pc, #488]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ca:	2301      	movs	r3, #1
 80014cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ce:	4b77      	ldr	r3, [pc, #476]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d118      	bne.n	800150c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014da:	4b74      	ldr	r3, [pc, #464]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a73      	ldr	r2, [pc, #460]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fc01 	bl	8000cec <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ee:	f7ff fbfd 	bl	8000cec <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e10c      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	4b6a      	ldr	r3, [pc, #424]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x2ea>
 8001514:	4b64      	ldr	r3, [pc, #400]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	4a63      	ldr	r2, [pc, #396]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6713      	str	r3, [r2, #112]	; 0x70
 8001520:	e01c      	b.n	800155c <HAL_RCC_OscConfig+0x324>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b05      	cmp	r3, #5
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x30c>
 800152a:	4b5f      	ldr	r3, [pc, #380]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	4a5e      	ldr	r2, [pc, #376]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6713      	str	r3, [r2, #112]	; 0x70
 8001536:	4b5c      	ldr	r3, [pc, #368]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153a:	4a5b      	ldr	r2, [pc, #364]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6713      	str	r3, [r2, #112]	; 0x70
 8001542:	e00b      	b.n	800155c <HAL_RCC_OscConfig+0x324>
 8001544:	4b58      	ldr	r3, [pc, #352]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001548:	4a57      	ldr	r2, [pc, #348]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	6713      	str	r3, [r2, #112]	; 0x70
 8001550:	4b55      	ldr	r3, [pc, #340]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	4a54      	ldr	r2, [pc, #336]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001556:	f023 0304 	bic.w	r3, r3, #4
 800155a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d015      	beq.n	8001590 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001564:	f7ff fbc2 	bl	8000cec <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156a:	e00a      	b.n	8001582 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156c:	f7ff fbbe 	bl	8000cec <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e0cb      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001582:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0ee      	beq.n	800156c <HAL_RCC_OscConfig+0x334>
 800158e:	e014      	b.n	80015ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001590:	f7ff fbac 	bl	8000cec <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001596:	e00a      	b.n	80015ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001598:	f7ff fba8 	bl	8000cec <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e0b5      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ae:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1ee      	bne.n	8001598 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d105      	bne.n	80015cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c0:	4b39      	ldr	r3, [pc, #228]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a38      	ldr	r2, [pc, #224]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80a1 	beq.w	8001718 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d6:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d05c      	beq.n	800169c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d141      	bne.n	800166e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <HAL_RCC_OscConfig+0x478>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fb7c 	bl	8000cec <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fb78 	bl	8000cec <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e087      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69da      	ldr	r2, [r3, #28]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	019b      	lsls	r3, r3, #6
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	085b      	lsrs	r3, r3, #1
 800162e:	3b01      	subs	r3, #1
 8001630:	041b      	lsls	r3, r3, #16
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001638:	061b      	lsls	r3, r3, #24
 800163a:	491b      	ldr	r1, [pc, #108]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_RCC_OscConfig+0x478>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fb51 	bl	8000cec <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff fb4d 	bl	8000cec <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e05c      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x416>
 800166c:	e054      	b.n	8001718 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <HAL_RCC_OscConfig+0x478>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fb3a 	bl	8000cec <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fb36 	bl	8000cec <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e045      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x444>
 800169a:	e03d      	b.n	8001718 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e038      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40007000 	.word	0x40007000
 80016b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <HAL_RCC_OscConfig+0x4ec>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d028      	beq.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d121      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d11a      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e4:	4013      	ands	r3, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d111      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fa:	085b      	lsrs	r3, r3, #1
 80016fc:	3b01      	subs	r3, #1
 80016fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d107      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800

08001728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0cc      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800173c:	4b68      	ldr	r3, [pc, #416]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d90c      	bls.n	8001764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b65      	ldr	r3, [pc, #404]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001752:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0b8      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800177c:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001794:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a52      	ldr	r2, [pc, #328]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800179e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b50      	ldr	r3, [pc, #320]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	494d      	ldr	r1, [pc, #308]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d044      	beq.n	8001848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d119      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e07f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e06f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	4b3b      	ldr	r3, [pc, #236]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e067      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001806:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f023 0203 	bic.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4934      	ldr	r1, [pc, #208]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	4313      	orrs	r3, r2
 8001816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001818:	f7ff fa68 	bl	8000cec <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	e00a      	b.n	8001836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7ff fa64 	bl	8000cec <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e04f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 020c 	and.w	r2, r3, #12
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	429a      	cmp	r2, r3
 8001846:	d1eb      	bne.n	8001820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d20c      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e032      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4916      	ldr	r1, [pc, #88]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	490e      	ldr	r1, [pc, #56]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ae:	f000 f821 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 80018b2:	4602      	mov	r2, r0
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	490a      	ldr	r1, [pc, #40]	; (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	5ccb      	ldrb	r3, [r1, r3]
 80018c2:	fa22 f303 	lsr.w	r3, r2, r3
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f920 	bl	8000b14 <HAL_InitTick>

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023c00 	.word	0x40023c00
 80018e4:	40023800 	.word	0x40023800
 80018e8:	08005a30 	.word	0x08005a30
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000004 	.word	0x20000004

080018f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f8:	b094      	sub	sp, #80	; 0x50
 80018fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	647b      	str	r3, [r7, #68]	; 0x44
 8001900:	2300      	movs	r3, #0
 8001902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001904:	2300      	movs	r3, #0
 8001906:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800190c:	4b79      	ldr	r3, [pc, #484]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d00d      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x40>
 8001918:	2b08      	cmp	r3, #8
 800191a:	f200 80e1 	bhi.w	8001ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x34>
 8001922:	2b04      	cmp	r3, #4
 8001924:	d003      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x3a>
 8001926:	e0db      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001928:	4b73      	ldr	r3, [pc, #460]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x204>)
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800192c:	e0db      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192e:	4b73      	ldr	r3, [pc, #460]	; (8001afc <HAL_RCC_GetSysClockFreq+0x208>)
 8001930:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001932:	e0d8      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001934:	4b6f      	ldr	r3, [pc, #444]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800193c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193e:	4b6d      	ldr	r3, [pc, #436]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d063      	beq.n	8001a12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194a:	4b6a      	ldr	r3, [pc, #424]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	099b      	lsrs	r3, r3, #6
 8001950:	2200      	movs	r2, #0
 8001952:	63bb      	str	r3, [r7, #56]	; 0x38
 8001954:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
 800195e:	2300      	movs	r3, #0
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
 8001962:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001966:	4622      	mov	r2, r4
 8001968:	462b      	mov	r3, r5
 800196a:	f04f 0000 	mov.w	r0, #0
 800196e:	f04f 0100 	mov.w	r1, #0
 8001972:	0159      	lsls	r1, r3, #5
 8001974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001978:	0150      	lsls	r0, r2, #5
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4621      	mov	r1, r4
 8001980:	1a51      	subs	r1, r2, r1
 8001982:	6139      	str	r1, [r7, #16]
 8001984:	4629      	mov	r1, r5
 8001986:	eb63 0301 	sbc.w	r3, r3, r1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001998:	4659      	mov	r1, fp
 800199a:	018b      	lsls	r3, r1, #6
 800199c:	4651      	mov	r1, sl
 800199e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019a2:	4651      	mov	r1, sl
 80019a4:	018a      	lsls	r2, r1, #6
 80019a6:	4651      	mov	r1, sl
 80019a8:	ebb2 0801 	subs.w	r8, r2, r1
 80019ac:	4659      	mov	r1, fp
 80019ae:	eb63 0901 	sbc.w	r9, r3, r1
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019c6:	4690      	mov	r8, r2
 80019c8:	4699      	mov	r9, r3
 80019ca:	4623      	mov	r3, r4
 80019cc:	eb18 0303 	adds.w	r3, r8, r3
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	462b      	mov	r3, r5
 80019d4:	eb49 0303 	adc.w	r3, r9, r3
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019e6:	4629      	mov	r1, r5
 80019e8:	024b      	lsls	r3, r1, #9
 80019ea:	4621      	mov	r1, r4
 80019ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019f0:	4621      	mov	r1, r4
 80019f2:	024a      	lsls	r2, r1, #9
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019fa:	2200      	movs	r2, #0
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80019fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a04:	f7fe fc36 	bl	8000274 <__aeabi_uldivmod>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a10:	e058      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a12:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	099b      	lsrs	r3, r3, #6
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a22:	623b      	str	r3, [r7, #32]
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
 8001a28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a2c:	4642      	mov	r2, r8
 8001a2e:	464b      	mov	r3, r9
 8001a30:	f04f 0000 	mov.w	r0, #0
 8001a34:	f04f 0100 	mov.w	r1, #0
 8001a38:	0159      	lsls	r1, r3, #5
 8001a3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a3e:	0150      	lsls	r0, r2, #5
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4641      	mov	r1, r8
 8001a46:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a4a:	4649      	mov	r1, r9
 8001a4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a64:	ebb2 040a 	subs.w	r4, r2, sl
 8001a68:	eb63 050b 	sbc.w	r5, r3, fp
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	00eb      	lsls	r3, r5, #3
 8001a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a7a:	00e2      	lsls	r2, r4, #3
 8001a7c:	4614      	mov	r4, r2
 8001a7e:	461d      	mov	r5, r3
 8001a80:	4643      	mov	r3, r8
 8001a82:	18e3      	adds	r3, r4, r3
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	464b      	mov	r3, r9
 8001a88:	eb45 0303 	adc.w	r3, r5, r3
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	028b      	lsls	r3, r1, #10
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	028a      	lsls	r2, r1, #10
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	61fa      	str	r2, [r7, #28]
 8001ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ab8:	f7fe fbdc 	bl	8000274 <__aeabi_uldivmod>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	0c1b      	lsrs	r3, r3, #16
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ad4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ade:	e002      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ae2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3750      	adds	r7, #80	; 0x50
 8001aec:	46bd      	mov	sp, r7
 8001aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	00f42400 	.word	0x00f42400
 8001afc:	007a1200 	.word	0x007a1200

08001b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000000 	.word	0x20000000

08001b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b1c:	f7ff fff0 	bl	8001b00 <HAL_RCC_GetHCLKFreq>
 8001b20:	4602      	mov	r2, r0
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	0b5b      	lsrs	r3, r3, #13
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	4903      	ldr	r1, [pc, #12]	; (8001b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b2e:	5ccb      	ldrb	r3, [r1, r3]
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	08005a40 	.word	0x08005a40

08001b40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0203 	and.w	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <HAL_RCC_GetClockConfig+0x60>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0207 	and.w	r2, r3, #7
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	601a      	str	r2, [r3, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40023c00 	.word	0x40023c00

08001ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e041      	b.n	8001c3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f839 	bl	8001c42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3304      	adds	r3, #4
 8001be0:	4619      	mov	r1, r3
 8001be2:	4610      	mov	r0, r2
 8001be4:	f000 f9ca 	bl	8001f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d001      	beq.n	8001c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e044      	b.n	8001cfa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1e      	ldr	r2, [pc, #120]	; (8001d08 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d018      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c9a:	d013      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1a      	ldr	r2, [pc, #104]	; (8001d0c <HAL_TIM_Base_Start_IT+0xb4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d00e      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a19      	ldr	r2, [pc, #100]	; (8001d10 <HAL_TIM_Base_Start_IT+0xb8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d009      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a17      	ldr	r2, [pc, #92]	; (8001d14 <HAL_TIM_Base_Start_IT+0xbc>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d004      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a16      	ldr	r2, [pc, #88]	; (8001d18 <HAL_TIM_Base_Start_IT+0xc0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d111      	bne.n	8001ce8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d010      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0201 	orr.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce6:	e007      	b.n	8001cf8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40010000 	.word	0x40010000
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40000800 	.word	0x40000800
 8001d14:	40000c00 	.word	0x40000c00
 8001d18:	40014000 	.word	0x40014000

08001d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d122      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d11b      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0202 	mvn.w	r2, #2
 8001d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f8ee 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001d64:	e005      	b.n	8001d72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f8e0 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f8f1 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d122      	bne.n	8001dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d11b      	bne.n	8001dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0204 	mvn.w	r2, #4
 8001d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2202      	movs	r2, #2
 8001da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f8c4 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001db8:	e005      	b.n	8001dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8b6 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f8c7 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d122      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d11b      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0208 	mvn.w	r2, #8
 8001df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2204      	movs	r2, #4
 8001df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f89a 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f88c 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f89d 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	2b10      	cmp	r3, #16
 8001e2c:	d122      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b10      	cmp	r3, #16
 8001e3a:	d11b      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0210 	mvn.w	r2, #16
 8001e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2208      	movs	r2, #8
 8001e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f870 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001e60:	e005      	b.n	8001e6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f862 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f873 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d10e      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d107      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0201 	mvn.w	r2, #1
 8001e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7fe fdfa 	bl	8000a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eaa:	2b80      	cmp	r3, #128	; 0x80
 8001eac:	d10e      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb8:	2b80      	cmp	r3, #128	; 0x80
 8001eba:	d107      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f8e2 	bl	8002090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed6:	2b40      	cmp	r3, #64	; 0x40
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee4:	2b40      	cmp	r3, #64	; 0x40
 8001ee6:	d107      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f838 	bl	8001f68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	2b20      	cmp	r3, #32
 8001f04:	d10e      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0320 	and.w	r3, r3, #32
 8001f10:	2b20      	cmp	r3, #32
 8001f12:	d107      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0220 	mvn.w	r2, #32
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8ac 	bl	800207c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a34      	ldr	r2, [pc, #208]	; (8002060 <TIM_Base_SetConfig+0xe4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00f      	beq.n	8001fb4 <TIM_Base_SetConfig+0x38>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9a:	d00b      	beq.n	8001fb4 <TIM_Base_SetConfig+0x38>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a31      	ldr	r2, [pc, #196]	; (8002064 <TIM_Base_SetConfig+0xe8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d007      	beq.n	8001fb4 <TIM_Base_SetConfig+0x38>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a30      	ldr	r2, [pc, #192]	; (8002068 <TIM_Base_SetConfig+0xec>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d003      	beq.n	8001fb4 <TIM_Base_SetConfig+0x38>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a2f      	ldr	r2, [pc, #188]	; (800206c <TIM_Base_SetConfig+0xf0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d108      	bne.n	8001fc6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a25      	ldr	r2, [pc, #148]	; (8002060 <TIM_Base_SetConfig+0xe4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01b      	beq.n	8002006 <TIM_Base_SetConfig+0x8a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd4:	d017      	beq.n	8002006 <TIM_Base_SetConfig+0x8a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a22      	ldr	r2, [pc, #136]	; (8002064 <TIM_Base_SetConfig+0xe8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <TIM_Base_SetConfig+0x8a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a21      	ldr	r2, [pc, #132]	; (8002068 <TIM_Base_SetConfig+0xec>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00f      	beq.n	8002006 <TIM_Base_SetConfig+0x8a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a20      	ldr	r2, [pc, #128]	; (800206c <TIM_Base_SetConfig+0xf0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00b      	beq.n	8002006 <TIM_Base_SetConfig+0x8a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a1f      	ldr	r2, [pc, #124]	; (8002070 <TIM_Base_SetConfig+0xf4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d007      	beq.n	8002006 <TIM_Base_SetConfig+0x8a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a1e      	ldr	r2, [pc, #120]	; (8002074 <TIM_Base_SetConfig+0xf8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d003      	beq.n	8002006 <TIM_Base_SetConfig+0x8a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a1d      	ldr	r2, [pc, #116]	; (8002078 <TIM_Base_SetConfig+0xfc>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d108      	bne.n	8002018 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800200c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	4313      	orrs	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a08      	ldr	r2, [pc, #32]	; (8002060 <TIM_Base_SetConfig+0xe4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d103      	bne.n	800204c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	615a      	str	r2, [r3, #20]
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40010000 	.word	0x40010000
 8002064:	40000400 	.word	0x40000400
 8002068:	40000800 	.word	0x40000800
 800206c:	40000c00 	.word	0x40000c00
 8002070:	40014000 	.word	0x40014000
 8002074:	40014400 	.word	0x40014400
 8002078:	40014800 	.word	0x40014800

0800207c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f103 0208 	add.w	r2, r3, #8
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f04f 32ff 	mov.w	r2, #4294967295
 80020bc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f103 0208 	add.w	r2, r3, #8
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f103 0208 	add.w	r2, r3, #8
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020fe:	b480      	push	{r7}
 8002100:	b085      	sub	sp, #20
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d103      	bne.n	800211e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e00c      	b.n	8002138 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3308      	adds	r3, #8
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	e002      	b.n	800212c <vListInsert+0x2e>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	429a      	cmp	r2, r3
 8002136:	d2f6      	bcs.n	8002126 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	601a      	str	r2, [r3, #0]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6892      	ldr	r2, [r2, #8]
 8002186:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6852      	ldr	r2, [r2, #4]
 8002190:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	d103      	bne.n	80021a4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	1e5a      	subs	r2, r3, #1
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08c      	sub	sp, #48	; 0x30
 80021c8:	af04      	add	r7, sp, #16
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4618      	mov	r0, r3
 80021da:	f001 f937 	bl	800344c <pvPortMalloc>
 80021de:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00e      	beq.n	8002204 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021e6:	2058      	movs	r0, #88	; 0x58
 80021e8:	f001 f930 	bl	800344c <pvPortMalloc>
 80021ec:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	631a      	str	r2, [r3, #48]	; 0x30
 80021fa:	e005      	b.n	8002208 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80021fc:	6978      	ldr	r0, [r7, #20]
 80021fe:	f001 fa05 	bl	800360c <vPortFree>
 8002202:	e001      	b.n	8002208 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d013      	beq.n	8002236 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800220e:	88fa      	ldrh	r2, [r7, #6]
 8002210:	2300      	movs	r3, #0
 8002212:	9303      	str	r3, [sp, #12]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	9302      	str	r3, [sp, #8]
 8002218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68b9      	ldr	r1, [r7, #8]
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 f80e 	bl	8002246 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800222a:	69f8      	ldr	r0, [r7, #28]
 800222c:	f000 f8b0 	bl	8002390 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002230:	2301      	movs	r3, #1
 8002232:	61bb      	str	r3, [r7, #24]
 8002234:	e002      	b.n	800223c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
 800223a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800223c:	69bb      	ldr	r3, [r7, #24]
    }
 800223e:	4618      	mov	r0, r3
 8002240:	3720      	adds	r7, #32
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b088      	sub	sp, #32
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002256:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	461a      	mov	r2, r3
 800225e:	21a5      	movs	r1, #165	; 0xa5
 8002260:	f003 fb3c 	bl	80058dc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800226e:	3b01      	subs	r3, #1
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	f023 0307 	bic.w	r3, r3, #7
 800227c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228c:	f383 8811 	msr	BASEPRI, r3
 8002290:	f3bf 8f6f 	isb	sy
 8002294:	f3bf 8f4f 	dsb	sy
 8002298:	617b      	str	r3, [r7, #20]
    }
 800229a:	bf00      	nop
 800229c:	e7fe      	b.n	800229c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01f      	beq.n	80022e4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022a4:	2300      	movs	r3, #0
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	e012      	b.n	80022d0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	4413      	add	r3, r2
 80022b0:	7819      	ldrb	r1, [r3, #0]
 80022b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	4413      	add	r3, r2
 80022b8:	3334      	adds	r3, #52	; 0x34
 80022ba:	460a      	mov	r2, r1
 80022bc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	4413      	add	r3, r2
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d006      	beq.n	80022d8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3301      	adds	r3, #1
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	2b09      	cmp	r3, #9
 80022d4:	d9e9      	bls.n	80022aa <prvInitialiseNewTask+0x64>
 80022d6:	e000      	b.n	80022da <prvInitialiseNewTask+0x94>
            {
                break;
 80022d8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80022e2:	e003      	b.n	80022ec <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80022e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80022ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d90a      	bls.n	8002308 <prvInitialiseNewTask+0xc2>
        __asm volatile
 80022f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f6:	f383 8811 	msr	BASEPRI, r3
 80022fa:	f3bf 8f6f 	isb	sy
 80022fe:	f3bf 8f4f 	dsb	sy
 8002302:	613b      	str	r3, [r7, #16]
    }
 8002304:	bf00      	nop
 8002306:	e7fe      	b.n	8002306 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230a:	2b04      	cmp	r3, #4
 800230c:	d901      	bls.n	8002312 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800230e:	2304      	movs	r3, #4
 8002310:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800231c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	2200      	movs	r2, #0
 8002322:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002326:	3304      	adds	r3, #4
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fedb 	bl	80020e4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	3318      	adds	r3, #24
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fed6 	bl	80020e4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800233c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002340:	f1c3 0205 	rsb	r2, r3, #5
 8002344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002346:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800234c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002350:	3350      	adds	r3, #80	; 0x50
 8002352:	2204      	movs	r2, #4
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f003 fac0 	bl	80058dc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800235c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235e:	3354      	adds	r3, #84	; 0x54
 8002360:	2201      	movs	r2, #1
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f003 fab9 	bl	80058dc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	68f9      	ldr	r1, [r7, #12]
 800236e:	69b8      	ldr	r0, [r7, #24]
 8002370:	f000 fd92 	bl	8002e98 <pxPortInitialiseStack>
 8002374:	4602      	mov	r2, r0
 8002376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002378:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800237a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002384:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002386:	bf00      	nop
 8002388:	3720      	adds	r7, #32
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002390:	b5b0      	push	{r4, r5, r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af02      	add	r7, sp, #8
 8002396:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002398:	f000 ff2c 	bl	80031f4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800239c:	4b4f      	ldr	r3, [pc, #316]	; (80024dc <prvAddNewTaskToReadyList+0x14c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	3301      	adds	r3, #1
 80023a2:	4a4e      	ldr	r2, [pc, #312]	; (80024dc <prvAddNewTaskToReadyList+0x14c>)
 80023a4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80023a6:	4b4e      	ldr	r3, [pc, #312]	; (80024e0 <prvAddNewTaskToReadyList+0x150>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80023ae:	4a4c      	ldr	r2, [pc, #304]	; (80024e0 <prvAddNewTaskToReadyList+0x150>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023b4:	4b49      	ldr	r3, [pc, #292]	; (80024dc <prvAddNewTaskToReadyList+0x14c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d110      	bne.n	80023de <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80023bc:	f000 fc46 	bl	8002c4c <prvInitialiseTaskLists>
 80023c0:	e00d      	b.n	80023de <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80023c2:	4b48      	ldr	r3, [pc, #288]	; (80024e4 <prvAddNewTaskToReadyList+0x154>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023ca:	4b45      	ldr	r3, [pc, #276]	; (80024e0 <prvAddNewTaskToReadyList+0x150>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d802      	bhi.n	80023de <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023d8:	4a41      	ldr	r2, [pc, #260]	; (80024e0 <prvAddNewTaskToReadyList+0x150>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023de:	4b42      	ldr	r3, [pc, #264]	; (80024e8 <prvAddNewTaskToReadyList+0x158>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	3301      	adds	r3, #1
 80023e4:	4a40      	ldr	r2, [pc, #256]	; (80024e8 <prvAddNewTaskToReadyList+0x158>)
 80023e6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023e8:	4b3f      	ldr	r3, [pc, #252]	; (80024e8 <prvAddNewTaskToReadyList+0x158>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d016      	beq.n	8002424 <prvAddNewTaskToReadyList+0x94>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f002 ffbb 	bl	8005374 <SEGGER_SYSVIEW_OnTaskCreate>
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	461d      	mov	r5, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	461c      	mov	r4, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	1ae3      	subs	r3, r4, r3
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	462b      	mov	r3, r5
 8002420:	f001 fac2 	bl	80039a8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4618      	mov	r0, r3
 8002428:	f003 f828 	bl	800547c <SEGGER_SYSVIEW_OnTaskStartReady>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	2201      	movs	r2, #1
 8002432:	409a      	lsls	r2, r3
 8002434:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <prvAddNewTaskToReadyList+0x15c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4313      	orrs	r3, r2
 800243a:	4a2c      	ldr	r2, [pc, #176]	; (80024ec <prvAddNewTaskToReadyList+0x15c>)
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002442:	492b      	ldr	r1, [pc, #172]	; (80024f0 <prvAddNewTaskToReadyList+0x160>)
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	3304      	adds	r3, #4
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	3204      	adds	r2, #4
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	1d1a      	adds	r2, r3, #4
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <prvAddNewTaskToReadyList+0x160>)
 8002482:	441a      	add	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	615a      	str	r2, [r3, #20]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248c:	4918      	ldr	r1, [pc, #96]	; (80024f0 <prvAddNewTaskToReadyList+0x160>)
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	1c59      	adds	r1, r3, #1
 800249c:	4814      	ldr	r0, [pc, #80]	; (80024f0 <prvAddNewTaskToReadyList+0x160>)
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4403      	add	r3, r0
 80024a8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80024aa:	f000 fed3 	bl	8003254 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80024ae:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <prvAddNewTaskToReadyList+0x154>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00e      	beq.n	80024d4 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <prvAddNewTaskToReadyList+0x150>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d207      	bcs.n	80024d4 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <prvAddNewTaskToReadyList+0x164>)
 80024c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024d4:	bf00      	nop
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bdb0      	pop	{r4, r5, r7, pc}
 80024dc:	20000154 	.word	0x20000154
 80024e0:	2000007c 	.word	0x2000007c
 80024e4:	20000160 	.word	0x20000160
 80024e8:	20000170 	.word	0x20000170
 80024ec:	2000015c 	.word	0x2000015c
 80024f0:	20000080 	.word	0x20000080
 80024f4:	e000ed04 	.word	0xe000ed04

080024f8 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10a      	bne.n	8002522 <xTaskDelayUntil+0x2a>
        __asm volatile
 800250c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002510:	f383 8811 	msr	BASEPRI, r3
 8002514:	f3bf 8f6f 	isb	sy
 8002518:	f3bf 8f4f 	dsb	sy
 800251c:	617b      	str	r3, [r7, #20]
    }
 800251e:	bf00      	nop
 8002520:	e7fe      	b.n	8002520 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <xTaskDelayUntil+0x46>
        __asm volatile
 8002528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	613b      	str	r3, [r7, #16]
    }
 800253a:	bf00      	nop
 800253c:	e7fe      	b.n	800253c <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800253e:	4b2c      	ldr	r3, [pc, #176]	; (80025f0 <xTaskDelayUntil+0xf8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <xTaskDelayUntil+0x64>
        __asm volatile
 8002546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254a:	f383 8811 	msr	BASEPRI, r3
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	f3bf 8f4f 	dsb	sy
 8002556:	60fb      	str	r3, [r7, #12]
    }
 8002558:	bf00      	nop
 800255a:	e7fe      	b.n	800255a <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 800255c:	f000 f8aa 	bl	80026b4 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002560:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <xTaskDelayUntil+0xfc>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	4413      	add	r3, r2
 800256e:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6a3a      	ldr	r2, [r7, #32]
 8002576:	429a      	cmp	r2, r3
 8002578:	d20b      	bcs.n	8002592 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	429a      	cmp	r2, r3
 8002582:	d211      	bcs.n	80025a8 <xTaskDelayUntil+0xb0>
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	429a      	cmp	r2, r3
 800258a:	d90d      	bls.n	80025a8 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 800258c:	2301      	movs	r3, #1
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
 8002590:	e00a      	b.n	80025a8 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	429a      	cmp	r2, r3
 800259a:	d303      	bcc.n	80025a4 <xTaskDelayUntil+0xac>
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d901      	bls.n	80025a8 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80025a4:	2301      	movs	r3, #1
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d009      	beq.n	80025c8 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 80025b4:	2024      	movs	r0, #36	; 0x24
 80025b6:	f002 facb 	bl	8004b50 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fbdc 	bl	8002d80 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80025c8:	f000 f882 	bl	80026d0 <xTaskResumeAll>
 80025cc:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d107      	bne.n	80025e4 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <xTaskDelayUntil+0x100>)
 80025d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80025e6:	4618      	mov	r0, r3
 80025e8:	3728      	adds	r7, #40	; 0x28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	2000017c 	.word	0x2000017c
 80025f4:	20000158 	.word	0x20000158
 80025f8:	e000ed04 	.word	0xe000ed04

080025fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002602:	4b24      	ldr	r3, [pc, #144]	; (8002694 <vTaskStartScheduler+0x98>)
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	2300      	movs	r3, #0
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	2300      	movs	r3, #0
 800260c:	2282      	movs	r2, #130	; 0x82
 800260e:	4922      	ldr	r1, [pc, #136]	; (8002698 <vTaskStartScheduler+0x9c>)
 8002610:	4822      	ldr	r0, [pc, #136]	; (800269c <vTaskStartScheduler+0xa0>)
 8002612:	f7ff fdd7 	bl	80021c4 <xTaskCreate>
 8002616:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d124      	bne.n	8002668 <vTaskStartScheduler+0x6c>
        __asm volatile
 800261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002622:	f383 8811 	msr	BASEPRI, r3
 8002626:	f3bf 8f6f 	isb	sy
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	60bb      	str	r3, [r7, #8]
    }
 8002630:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002632:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <vTaskStartScheduler+0xa4>)
 8002634:	f04f 32ff 	mov.w	r2, #4294967295
 8002638:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800263a:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <vTaskStartScheduler+0xa8>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002640:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <vTaskStartScheduler+0xac>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <vTaskStartScheduler+0xb0>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4b12      	ldr	r3, [pc, #72]	; (8002694 <vTaskStartScheduler+0x98>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d102      	bne.n	8002658 <vTaskStartScheduler+0x5c>
 8002652:	f002 fe73 	bl	800533c <SEGGER_SYSVIEW_OnIdle>
 8002656:	e004      	b.n	8002662 <vTaskStartScheduler+0x66>
 8002658:	4b14      	ldr	r3, [pc, #80]	; (80026ac <vTaskStartScheduler+0xb0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f002 fecb 	bl	80053f8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002662:	f000 fca7 	bl	8002fb4 <xPortStartScheduler>
 8002666:	e00e      	b.n	8002686 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266e:	d10a      	bne.n	8002686 <vTaskStartScheduler+0x8a>
        __asm volatile
 8002670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	607b      	str	r3, [r7, #4]
    }
 8002682:	bf00      	nop
 8002684:	e7fe      	b.n	8002684 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <vTaskStartScheduler+0xb4>)
 8002688:	681b      	ldr	r3, [r3, #0]
}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000178 	.word	0x20000178
 8002698:	08005964 	.word	0x08005964
 800269c:	08002c1d 	.word	0x08002c1d
 80026a0:	20000174 	.word	0x20000174
 80026a4:	20000160 	.word	0x20000160
 80026a8:	20000158 	.word	0x20000158
 80026ac:	2000007c 	.word	0x2000007c
 80026b0:	2000000c 	.word	0x2000000c

080026b4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <vTaskSuspendAll+0x18>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	4a03      	ldr	r2, [pc, #12]	; (80026cc <vTaskSuspendAll+0x18>)
 80026c0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80026c2:	bf00      	nop
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	2000017c 	.word	0x2000017c

080026d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80026de:	4b73      	ldr	r3, [pc, #460]	; (80028ac <xTaskResumeAll+0x1dc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10a      	bne.n	80026fc <xTaskResumeAll+0x2c>
        __asm volatile
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	607b      	str	r3, [r7, #4]
    }
 80026f8:	bf00      	nop
 80026fa:	e7fe      	b.n	80026fa <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80026fc:	f000 fd7a 	bl	80031f4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002700:	4b6a      	ldr	r3, [pc, #424]	; (80028ac <xTaskResumeAll+0x1dc>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	3b01      	subs	r3, #1
 8002706:	4a69      	ldr	r2, [pc, #420]	; (80028ac <xTaskResumeAll+0x1dc>)
 8002708:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800270a:	4b68      	ldr	r3, [pc, #416]	; (80028ac <xTaskResumeAll+0x1dc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	f040 80c4 	bne.w	800289c <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002714:	4b66      	ldr	r3, [pc, #408]	; (80028b0 <xTaskResumeAll+0x1e0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 80bf 	beq.w	800289c <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800271e:	e08e      	b.n	800283e <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002720:	4b64      	ldr	r3, [pc, #400]	; (80028b4 <xTaskResumeAll+0x1e4>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	6a12      	ldr	r2, [r2, #32]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	69d2      	ldr	r2, [r2, #28]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3318      	adds	r3, #24
 800274a:	429a      	cmp	r2, r3
 800274c:	d103      	bne.n	8002756 <xTaskResumeAll+0x86>
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	6a1a      	ldr	r2, [r3, #32]
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	2200      	movs	r2, #0
 800275a:	629a      	str	r2, [r3, #40]	; 0x28
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	1e5a      	subs	r2, r3, #1
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	68d2      	ldr	r2, [r2, #12]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	6892      	ldr	r2, [r2, #8]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	3304      	adds	r3, #4
 8002788:	429a      	cmp	r2, r3
 800278a:	d103      	bne.n	8002794 <xTaskResumeAll+0xc4>
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2200      	movs	r2, #0
 8002798:	615a      	str	r2, [r3, #20]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	1e5a      	subs	r2, r3, #1
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f002 fe68 	bl	800547c <SEGGER_SYSVIEW_OnTaskStartReady>
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	2201      	movs	r2, #1
 80027b2:	409a      	lsls	r2, r3
 80027b4:	4b40      	ldr	r3, [pc, #256]	; (80028b8 <xTaskResumeAll+0x1e8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	4a3f      	ldr	r2, [pc, #252]	; (80028b8 <xTaskResumeAll+0x1e8>)
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c2:	493e      	ldr	r1, [pc, #248]	; (80028bc <xTaskResumeAll+0x1ec>)
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	3304      	adds	r3, #4
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	609a      	str	r2, [r3, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	3204      	adds	r2, #4
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	1d1a      	adds	r2, r3, #4
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4a2e      	ldr	r2, [pc, #184]	; (80028bc <xTaskResumeAll+0x1ec>)
 8002802:	441a      	add	r2, r3
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	615a      	str	r2, [r3, #20]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280c:	492b      	ldr	r1, [pc, #172]	; (80028bc <xTaskResumeAll+0x1ec>)
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	1c59      	adds	r1, r3, #1
 800281c:	4827      	ldr	r0, [pc, #156]	; (80028bc <xTaskResumeAll+0x1ec>)
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4403      	add	r3, r0
 8002828:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <xTaskResumeAll+0x1f0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	429a      	cmp	r2, r3
 8002836:	d302      	bcc.n	800283e <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002838:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <xTaskResumeAll+0x1f4>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800283e:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <xTaskResumeAll+0x1e4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	f47f af6c 	bne.w	8002720 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800284e:	f000 fa7b 	bl	8002d48 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002852:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <xTaskResumeAll+0x1f8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d010      	beq.n	8002880 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800285e:	f000 f859 	bl	8002914 <xTaskIncrementTick>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002868:	4b16      	ldr	r3, [pc, #88]	; (80028c4 <xTaskResumeAll+0x1f4>)
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	3b01      	subs	r3, #1
 8002872:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f1      	bne.n	800285e <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800287a:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <xTaskResumeAll+0x1f8>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002880:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <xTaskResumeAll+0x1f4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d009      	beq.n	800289c <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002888:	2301      	movs	r3, #1
 800288a:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <xTaskResumeAll+0x1fc>)
 800288e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	f3bf 8f4f 	dsb	sy
 8002898:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800289c:	f000 fcda 	bl	8003254 <vPortExitCritical>

    return xAlreadyYielded;
 80028a0:	69bb      	ldr	r3, [r7, #24]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3720      	adds	r7, #32
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	2000017c 	.word	0x2000017c
 80028b0:	20000154 	.word	0x20000154
 80028b4:	20000114 	.word	0x20000114
 80028b8:	2000015c 	.word	0x2000015c
 80028bc:	20000080 	.word	0x20000080
 80028c0:	2000007c 	.word	0x2000007c
 80028c4:	20000168 	.word	0x20000168
 80028c8:	20000164 	.word	0x20000164
 80028cc:	e000ed04 	.word	0xe000ed04

080028d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <xTaskGetTickCount+0x1c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80028dc:	687b      	ldr	r3, [r7, #4]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	20000158 	.word	0x20000158

080028f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028f6:	f000 fd69 	bl	80033cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80028fe:	4b04      	ldr	r3, [pc, #16]	; (8002910 <xTaskGetTickCountFromISR+0x20>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002904:	683b      	ldr	r3, [r7, #0]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000158 	.word	0x20000158

08002914 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	; 0x28
 8002918:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800291e:	4b7f      	ldr	r3, [pc, #508]	; (8002b1c <xTaskIncrementTick+0x208>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	f040 80f0 	bne.w	8002b08 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002928:	4b7d      	ldr	r3, [pc, #500]	; (8002b20 <xTaskIncrementTick+0x20c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002930:	4a7b      	ldr	r2, [pc, #492]	; (8002b20 <xTaskIncrementTick+0x20c>)
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d120      	bne.n	800297e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800293c:	4b79      	ldr	r3, [pc, #484]	; (8002b24 <xTaskIncrementTick+0x210>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <xTaskIncrementTick+0x48>
        __asm volatile
 8002946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294a:	f383 8811 	msr	BASEPRI, r3
 800294e:	f3bf 8f6f 	isb	sy
 8002952:	f3bf 8f4f 	dsb	sy
 8002956:	607b      	str	r3, [r7, #4]
    }
 8002958:	bf00      	nop
 800295a:	e7fe      	b.n	800295a <xTaskIncrementTick+0x46>
 800295c:	4b71      	ldr	r3, [pc, #452]	; (8002b24 <xTaskIncrementTick+0x210>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	4b71      	ldr	r3, [pc, #452]	; (8002b28 <xTaskIncrementTick+0x214>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a6f      	ldr	r2, [pc, #444]	; (8002b24 <xTaskIncrementTick+0x210>)
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	4a6f      	ldr	r2, [pc, #444]	; (8002b28 <xTaskIncrementTick+0x214>)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b6e      	ldr	r3, [pc, #440]	; (8002b2c <xTaskIncrementTick+0x218>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3301      	adds	r3, #1
 8002976:	4a6d      	ldr	r2, [pc, #436]	; (8002b2c <xTaskIncrementTick+0x218>)
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	f000 f9e5 	bl	8002d48 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800297e:	4b6c      	ldr	r3, [pc, #432]	; (8002b30 <xTaskIncrementTick+0x21c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6a3a      	ldr	r2, [r7, #32]
 8002984:	429a      	cmp	r2, r3
 8002986:	f0c0 80aa 	bcc.w	8002ade <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800298a:	4b66      	ldr	r3, [pc, #408]	; (8002b24 <xTaskIncrementTick+0x210>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d104      	bne.n	800299e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002994:	4b66      	ldr	r3, [pc, #408]	; (8002b30 <xTaskIncrementTick+0x21c>)
 8002996:	f04f 32ff 	mov.w	r2, #4294967295
 800299a:	601a      	str	r2, [r3, #0]
                    break;
 800299c:	e09f      	b.n	8002ade <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800299e:	4b61      	ldr	r3, [pc, #388]	; (8002b24 <xTaskIncrementTick+0x210>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80029ae:	6a3a      	ldr	r2, [r7, #32]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d203      	bcs.n	80029be <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80029b6:	4a5e      	ldr	r2, [pc, #376]	; (8002b30 <xTaskIncrementTick+0x21c>)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80029bc:	e08f      	b.n	8002ade <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	68d2      	ldr	r2, [r2, #12]
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	6892      	ldr	r2, [r2, #8]
 80029d6:	605a      	str	r2, [r3, #4]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	3304      	adds	r3, #4
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d103      	bne.n	80029ec <xTaskIncrementTick+0xd8>
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	605a      	str	r2, [r3, #4]
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	2200      	movs	r2, #0
 80029f0:	615a      	str	r2, [r3, #20]
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	1e5a      	subs	r2, r3, #1
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01e      	beq.n	8002a42 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	6a12      	ldr	r2, [r2, #32]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	69d2      	ldr	r2, [r2, #28]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	3318      	adds	r3, #24
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d103      	bne.n	8002a32 <xTaskIncrementTick+0x11e>
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	6a1a      	ldr	r2, [r3, #32]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	2200      	movs	r2, #0
 8002a36:	629a      	str	r2, [r3, #40]	; 0x28
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	1e5a      	subs	r2, r3, #1
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f002 fd19 	bl	800547c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4e:	2201      	movs	r2, #1
 8002a50:	409a      	lsls	r2, r3
 8002a52:	4b38      	ldr	r3, [pc, #224]	; (8002b34 <xTaskIncrementTick+0x220>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	4a36      	ldr	r2, [pc, #216]	; (8002b34 <xTaskIncrementTick+0x220>)
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a60:	4935      	ldr	r1, [pc, #212]	; (8002b38 <xTaskIncrementTick+0x224>)
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	60da      	str	r2, [r3, #12]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	3204      	adds	r2, #4
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	1d1a      	adds	r2, r3, #4
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4a26      	ldr	r2, [pc, #152]	; (8002b38 <xTaskIncrementTick+0x224>)
 8002aa0:	441a      	add	r2, r3
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	615a      	str	r2, [r3, #20]
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aaa:	4923      	ldr	r1, [pc, #140]	; (8002b38 <xTaskIncrementTick+0x224>)
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	1c59      	adds	r1, r3, #1
 8002aba:	481f      	ldr	r0, [pc, #124]	; (8002b38 <xTaskIncrementTick+0x224>)
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4403      	add	r3, r0
 8002ac6:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002acc:	4b1b      	ldr	r3, [pc, #108]	; (8002b3c <xTaskIncrementTick+0x228>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	f4ff af59 	bcc.w	800298a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002adc:	e755      	b.n	800298a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ade:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <xTaskIncrementTick+0x228>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae4:	4914      	ldr	r1, [pc, #80]	; (8002b38 <xTaskIncrementTick+0x224>)
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d901      	bls.n	8002afa <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 8002af6:	2301      	movs	r3, #1
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002afa:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <xTaskIncrementTick+0x22c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d007      	beq.n	8002b12 <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 8002b02:	2301      	movs	r3, #1
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
 8002b06:	e004      	b.n	8002b12 <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002b08:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <xTaskIncrementTick+0x230>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <xTaskIncrementTick+0x230>)
 8002b10:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3728      	adds	r7, #40	; 0x28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	2000017c 	.word	0x2000017c
 8002b20:	20000158 	.word	0x20000158
 8002b24:	2000010c 	.word	0x2000010c
 8002b28:	20000110 	.word	0x20000110
 8002b2c:	2000016c 	.word	0x2000016c
 8002b30:	20000174 	.word	0x20000174
 8002b34:	2000015c 	.word	0x2000015c
 8002b38:	20000080 	.word	0x20000080
 8002b3c:	2000007c 	.word	0x2000007c
 8002b40:	20000168 	.word	0x20000168
 8002b44:	20000164 	.word	0x20000164

08002b48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b4e:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <vTaskSwitchContext+0xbc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002b56:	4b2c      	ldr	r3, [pc, #176]	; (8002c08 <vTaskSwitchContext+0xc0>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002b5c:	e04d      	b.n	8002bfa <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002b5e:	4b2a      	ldr	r3, [pc, #168]	; (8002c08 <vTaskSwitchContext+0xc0>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b64:	4b29      	ldr	r3, [pc, #164]	; (8002c0c <vTaskSwitchContext+0xc4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	fab3 f383 	clz	r3, r3
 8002b70:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002b72:	7afb      	ldrb	r3, [r7, #11]
 8002b74:	f1c3 031f 	rsb	r3, r3, #31
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	4925      	ldr	r1, [pc, #148]	; (8002c10 <vTaskSwitchContext+0xc8>)
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10a      	bne.n	8002ba4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b92:	f383 8811 	msr	BASEPRI, r3
 8002b96:	f3bf 8f6f 	isb	sy
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	607b      	str	r3, [r7, #4]
    }
 8002ba0:	bf00      	nop
 8002ba2:	e7fe      	b.n	8002ba2 <vTaskSwitchContext+0x5a>
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4a18      	ldr	r2, [pc, #96]	; (8002c10 <vTaskSwitchContext+0xc8>)
 8002bb0:	4413      	add	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	3308      	adds	r3, #8
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d104      	bne.n	8002bd4 <vTaskSwitchContext+0x8c>
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	4a0e      	ldr	r2, [pc, #56]	; (8002c14 <vTaskSwitchContext+0xcc>)
 8002bdc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002bde:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <vTaskSwitchContext+0xcc>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4b0d      	ldr	r3, [pc, #52]	; (8002c18 <vTaskSwitchContext+0xd0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d102      	bne.n	8002bf0 <vTaskSwitchContext+0xa8>
 8002bea:	f002 fba7 	bl	800533c <SEGGER_SYSVIEW_OnIdle>
}
 8002bee:	e004      	b.n	8002bfa <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002bf0:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <vTaskSwitchContext+0xcc>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f002 fbff 	bl	80053f8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	2000017c 	.word	0x2000017c
 8002c08:	20000168 	.word	0x20000168
 8002c0c:	2000015c 	.word	0x2000015c
 8002c10:	20000080 	.word	0x20000080
 8002c14:	2000007c 	.word	0x2000007c
 8002c18:	20000178 	.word	0x20000178

08002c1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002c24:	f000 f852 	bl	8002ccc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <prvIdleTask+0x28>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d9f9      	bls.n	8002c24 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <prvIdleTask+0x2c>)
 8002c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002c40:	e7f0      	b.n	8002c24 <prvIdleTask+0x8>
 8002c42:	bf00      	nop
 8002c44:	20000080 	.word	0x20000080
 8002c48:	e000ed04 	.word	0xe000ed04

08002c4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	e00c      	b.n	8002c72 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4a12      	ldr	r2, [pc, #72]	; (8002cac <prvInitialiseTaskLists+0x60>)
 8002c64:	4413      	add	r3, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fa1c 	bl	80020a4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d9ef      	bls.n	8002c58 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002c78:	480d      	ldr	r0, [pc, #52]	; (8002cb0 <prvInitialiseTaskLists+0x64>)
 8002c7a:	f7ff fa13 	bl	80020a4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002c7e:	480d      	ldr	r0, [pc, #52]	; (8002cb4 <prvInitialiseTaskLists+0x68>)
 8002c80:	f7ff fa10 	bl	80020a4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002c84:	480c      	ldr	r0, [pc, #48]	; (8002cb8 <prvInitialiseTaskLists+0x6c>)
 8002c86:	f7ff fa0d 	bl	80020a4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002c8a:	480c      	ldr	r0, [pc, #48]	; (8002cbc <prvInitialiseTaskLists+0x70>)
 8002c8c:	f7ff fa0a 	bl	80020a4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002c90:	480b      	ldr	r0, [pc, #44]	; (8002cc0 <prvInitialiseTaskLists+0x74>)
 8002c92:	f7ff fa07 	bl	80020a4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002c96:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <prvInitialiseTaskLists+0x78>)
 8002c98:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <prvInitialiseTaskLists+0x64>)
 8002c9a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <prvInitialiseTaskLists+0x7c>)
 8002c9e:	4a05      	ldr	r2, [pc, #20]	; (8002cb4 <prvInitialiseTaskLists+0x68>)
 8002ca0:	601a      	str	r2, [r3, #0]
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000080 	.word	0x20000080
 8002cb0:	200000e4 	.word	0x200000e4
 8002cb4:	200000f8 	.word	0x200000f8
 8002cb8:	20000114 	.word	0x20000114
 8002cbc:	20000128 	.word	0x20000128
 8002cc0:	20000140 	.word	0x20000140
 8002cc4:	2000010c 	.word	0x2000010c
 8002cc8:	20000110 	.word	0x20000110

08002ccc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cd2:	e019      	b.n	8002d08 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002cd4:	f000 fa8e 	bl	80031f4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cd8:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <prvCheckTasksWaitingTermination+0x50>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fa43 	bl	8002170 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <prvCheckTasksWaitingTermination+0x54>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <prvCheckTasksWaitingTermination+0x54>)
 8002cf2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <prvCheckTasksWaitingTermination+0x58>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <prvCheckTasksWaitingTermination+0x58>)
 8002cfc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002cfe:	f000 faa9 	bl	8003254 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f810 	bl	8002d28 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <prvCheckTasksWaitingTermination+0x58>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1e1      	bne.n	8002cd4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000128 	.word	0x20000128
 8002d20:	20000154 	.word	0x20000154
 8002d24:	2000013c 	.word	0x2000013c

08002d28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fc69 	bl	800360c <vPortFree>
                vPortFree( pxTCB );
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fc66 	bl	800360c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <prvResetNextTaskUnblockTime+0x30>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d104      	bne.n	8002d60 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002d56:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <prvResetNextTaskUnblockTime+0x34>)
 8002d58:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002d5e:	e005      	b.n	8002d6c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <prvResetNextTaskUnblockTime+0x30>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <prvResetNextTaskUnblockTime+0x34>)
 8002d6a:	6013      	str	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	2000010c 	.word	0x2000010c
 8002d7c:	20000174 	.word	0x20000174

08002d80 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002d8a:	4b3c      	ldr	r3, [pc, #240]	; (8002e7c <prvAddCurrentTaskToDelayedList+0xfc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d90:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3304      	adds	r3, #4
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff f9ea 	bl	8002170 <uxListRemove>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10b      	bne.n	8002dba <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002da2:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <prvAddCurrentTaskToDelayedList+0x100>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	2201      	movs	r2, #1
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43da      	mvns	r2, r3
 8002db0:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <prvAddCurrentTaskToDelayedList+0x104>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4013      	ands	r3, r2
 8002db6:	4a33      	ldr	r2, [pc, #204]	; (8002e84 <prvAddCurrentTaskToDelayedList+0x104>)
 8002db8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc0:	d124      	bne.n	8002e0c <prvAddCurrentTaskToDelayedList+0x8c>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d021      	beq.n	8002e0c <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dc8:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <prvAddCurrentTaskToDelayedList+0x108>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <prvAddCurrentTaskToDelayedList+0x100>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	609a      	str	r2, [r3, #8]
 8002dd6:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <prvAddCurrentTaskToDelayedList+0x100>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	6892      	ldr	r2, [r2, #8]
 8002dde:	60da      	str	r2, [r3, #12]
 8002de0:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <prvAddCurrentTaskToDelayedList+0x100>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	3204      	adds	r2, #4
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <prvAddCurrentTaskToDelayedList+0x100>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	1d1a      	adds	r2, r3, #4
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	609a      	str	r2, [r3, #8]
 8002df6:	4b22      	ldr	r3, [pc, #136]	; (8002e80 <prvAddCurrentTaskToDelayedList+0x100>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a23      	ldr	r2, [pc, #140]	; (8002e88 <prvAddCurrentTaskToDelayedList+0x108>)
 8002dfc:	615a      	str	r2, [r3, #20]
 8002dfe:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <prvAddCurrentTaskToDelayedList+0x108>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	3301      	adds	r3, #1
 8002e04:	4a20      	ldr	r2, [pc, #128]	; (8002e88 <prvAddCurrentTaskToDelayedList+0x108>)
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002e0a:	e032      	b.n	8002e72 <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4413      	add	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e14:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <prvAddCurrentTaskToDelayedList+0x100>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d20f      	bcs.n	8002e44 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002e24:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <prvAddCurrentTaskToDelayedList+0x100>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2104      	movs	r1, #4
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f002 fb68 	bl	8005500 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e30:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <prvAddCurrentTaskToDelayedList+0x10c>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <prvAddCurrentTaskToDelayedList+0x100>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	f7ff f95e 	bl	80020fe <vListInsert>
}
 8002e42:	e016      	b.n	8002e72 <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002e44:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <prvAddCurrentTaskToDelayedList+0x100>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2104      	movs	r1, #4
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f002 fb58 	bl	8005500 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <prvAddCurrentTaskToDelayedList+0x110>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <prvAddCurrentTaskToDelayedList+0x100>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	f7ff f94e 	bl	80020fe <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002e62:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <prvAddCurrentTaskToDelayedList+0x114>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d202      	bcs.n	8002e72 <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8002e6c:	4a09      	ldr	r2, [pc, #36]	; (8002e94 <prvAddCurrentTaskToDelayedList+0x114>)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6013      	str	r3, [r2, #0]
}
 8002e72:	bf00      	nop
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000158 	.word	0x20000158
 8002e80:	2000007c 	.word	0x2000007c
 8002e84:	2000015c 	.word	0x2000015c
 8002e88:	20000140 	.word	0x20000140
 8002e8c:	20000110 	.word	0x20000110
 8002e90:	2000010c 	.word	0x2000010c
 8002e94:	20000174 	.word	0x20000174

08002e98 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3b04      	subs	r3, #4
 8002ea8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002eb0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	3b04      	subs	r3, #4
 8002eb6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f023 0201 	bic.w	r2, r3, #1
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	3b04      	subs	r3, #4
 8002ec6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002ec8:	4a0c      	ldr	r2, [pc, #48]	; (8002efc <pxPortInitialiseStack+0x64>)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3b14      	subs	r3, #20
 8002ed2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3b04      	subs	r3, #4
 8002ede:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f06f 0202 	mvn.w	r2, #2
 8002ee6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	3b20      	subs	r3, #32
 8002eec:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002eee:	68fb      	ldr	r3, [r7, #12]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	08002f01 	.word	0x08002f01

08002f00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002f0a:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <prvTaskExitError+0x54>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f12:	d00a      	beq.n	8002f2a <prvTaskExitError+0x2a>
        __asm volatile
 8002f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	60fb      	str	r3, [r7, #12]
    }
 8002f26:	bf00      	nop
 8002f28:	e7fe      	b.n	8002f28 <prvTaskExitError+0x28>
        __asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	60bb      	str	r3, [r7, #8]
    }
 8002f3c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002f3e:	bf00      	nop
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0fc      	beq.n	8002f40 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002f46:	bf00      	nop
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	20000010 	.word	0x20000010
	...

08002f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002f60:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <pxCurrentTCBConst2>)
 8002f62:	6819      	ldr	r1, [r3, #0]
 8002f64:	6808      	ldr	r0, [r1, #0]
 8002f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f6a:	f380 8809 	msr	PSP, r0
 8002f6e:	f3bf 8f6f 	isb	sy
 8002f72:	f04f 0000 	mov.w	r0, #0
 8002f76:	f380 8811 	msr	BASEPRI, r0
 8002f7a:	4770      	bx	lr
 8002f7c:	f3af 8000 	nop.w

08002f80 <pxCurrentTCBConst2>:
 8002f80:	2000007c 	.word	0x2000007c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop

08002f88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002f88:	4808      	ldr	r0, [pc, #32]	; (8002fac <prvPortStartFirstTask+0x24>)
 8002f8a:	6800      	ldr	r0, [r0, #0]
 8002f8c:	6800      	ldr	r0, [r0, #0]
 8002f8e:	f380 8808 	msr	MSP, r0
 8002f92:	f04f 0000 	mov.w	r0, #0
 8002f96:	f380 8814 	msr	CONTROL, r0
 8002f9a:	b662      	cpsie	i
 8002f9c:	b661      	cpsie	f
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	df00      	svc	0
 8002fa8:	bf00      	nop
 8002faa:	0000      	.short	0x0000
 8002fac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002fb0:	bf00      	nop
 8002fb2:	bf00      	nop

08002fb4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002fba:	4b46      	ldr	r3, [pc, #280]	; (80030d4 <xPortStartScheduler+0x120>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a46      	ldr	r2, [pc, #280]	; (80030d8 <xPortStartScheduler+0x124>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d10a      	bne.n	8002fda <xPortStartScheduler+0x26>
        __asm volatile
 8002fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc8:	f383 8811 	msr	BASEPRI, r3
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	f3bf 8f4f 	dsb	sy
 8002fd4:	613b      	str	r3, [r7, #16]
    }
 8002fd6:	bf00      	nop
 8002fd8:	e7fe      	b.n	8002fd8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002fda:	4b3e      	ldr	r3, [pc, #248]	; (80030d4 <xPortStartScheduler+0x120>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a3f      	ldr	r2, [pc, #252]	; (80030dc <xPortStartScheduler+0x128>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d10a      	bne.n	8002ffa <xPortStartScheduler+0x46>
        __asm volatile
 8002fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe8:	f383 8811 	msr	BASEPRI, r3
 8002fec:	f3bf 8f6f 	isb	sy
 8002ff0:	f3bf 8f4f 	dsb	sy
 8002ff4:	60fb      	str	r3, [r7, #12]
    }
 8002ff6:	bf00      	nop
 8002ff8:	e7fe      	b.n	8002ff8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002ffa:	4b39      	ldr	r3, [pc, #228]	; (80030e0 <xPortStartScheduler+0x12c>)
 8002ffc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	22ff      	movs	r2, #255	; 0xff
 800300a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4b31      	ldr	r3, [pc, #196]	; (80030e4 <xPortStartScheduler+0x130>)
 8003020:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003022:	4b31      	ldr	r3, [pc, #196]	; (80030e8 <xPortStartScheduler+0x134>)
 8003024:	2207      	movs	r2, #7
 8003026:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003028:	e009      	b.n	800303e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800302a:	4b2f      	ldr	r3, [pc, #188]	; (80030e8 <xPortStartScheduler+0x134>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3b01      	subs	r3, #1
 8003030:	4a2d      	ldr	r2, [pc, #180]	; (80030e8 <xPortStartScheduler+0x134>)
 8003032:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	b2db      	uxtb	r3, r3
 800303c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003046:	2b80      	cmp	r3, #128	; 0x80
 8003048:	d0ef      	beq.n	800302a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800304a:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <xPortStartScheduler+0x134>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f1c3 0307 	rsb	r3, r3, #7
 8003052:	2b04      	cmp	r3, #4
 8003054:	d00a      	beq.n	800306c <xPortStartScheduler+0xb8>
        __asm volatile
 8003056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305a:	f383 8811 	msr	BASEPRI, r3
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	f3bf 8f4f 	dsb	sy
 8003066:	60bb      	str	r3, [r7, #8]
    }
 8003068:	bf00      	nop
 800306a:	e7fe      	b.n	800306a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800306c:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <xPortStartScheduler+0x134>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	4a1d      	ldr	r2, [pc, #116]	; (80030e8 <xPortStartScheduler+0x134>)
 8003074:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003076:	4b1c      	ldr	r3, [pc, #112]	; (80030e8 <xPortStartScheduler+0x134>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800307e:	4a1a      	ldr	r2, [pc, #104]	; (80030e8 <xPortStartScheduler+0x134>)
 8003080:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	b2da      	uxtb	r2, r3
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800308a:	4b18      	ldr	r3, [pc, #96]	; (80030ec <xPortStartScheduler+0x138>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a17      	ldr	r2, [pc, #92]	; (80030ec <xPortStartScheduler+0x138>)
 8003090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003094:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003096:	4b15      	ldr	r3, [pc, #84]	; (80030ec <xPortStartScheduler+0x138>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a14      	ldr	r2, [pc, #80]	; (80030ec <xPortStartScheduler+0x138>)
 800309c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80030a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80030a2:	f000 f963 	bl	800336c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80030a6:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <xPortStartScheduler+0x13c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80030ac:	f000 f982 	bl	80033b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80030b0:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <xPortStartScheduler+0x140>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0f      	ldr	r2, [pc, #60]	; (80030f4 <xPortStartScheduler+0x140>)
 80030b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80030ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80030bc:	f7ff ff64 	bl	8002f88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80030c0:	f7ff fd42 	bl	8002b48 <vTaskSwitchContext>
    prvTaskExitError();
 80030c4:	f7ff ff1c 	bl	8002f00 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	e000ed00 	.word	0xe000ed00
 80030d8:	410fc271 	.word	0x410fc271
 80030dc:	410fc270 	.word	0x410fc270
 80030e0:	e000e400 	.word	0xe000e400
 80030e4:	20000180 	.word	0x20000180
 80030e8:	20000184 	.word	0x20000184
 80030ec:	e000ed20 	.word	0xe000ed20
 80030f0:	20000010 	.word	0x20000010
 80030f4:	e000ef34 	.word	0xe000ef34

080030f8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80030fe:	4b37      	ldr	r3, [pc, #220]	; (80031dc <vInitPrioGroupValue+0xe4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a37      	ldr	r2, [pc, #220]	; (80031e0 <vInitPrioGroupValue+0xe8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d10a      	bne.n	800311e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	613b      	str	r3, [r7, #16]
    }
 800311a:	bf00      	nop
 800311c:	e7fe      	b.n	800311c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800311e:	4b2f      	ldr	r3, [pc, #188]	; (80031dc <vInitPrioGroupValue+0xe4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a30      	ldr	r2, [pc, #192]	; (80031e4 <vInitPrioGroupValue+0xec>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d10a      	bne.n	800313e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312c:	f383 8811 	msr	BASEPRI, r3
 8003130:	f3bf 8f6f 	isb	sy
 8003134:	f3bf 8f4f 	dsb	sy
 8003138:	60fb      	str	r3, [r7, #12]
    }
 800313a:	bf00      	nop
 800313c:	e7fe      	b.n	800313c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800313e:	4b2a      	ldr	r3, [pc, #168]	; (80031e8 <vInitPrioGroupValue+0xf0>)
 8003140:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	22ff      	movs	r2, #255	; 0xff
 800314e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003160:	b2da      	uxtb	r2, r3
 8003162:	4b22      	ldr	r3, [pc, #136]	; (80031ec <vInitPrioGroupValue+0xf4>)
 8003164:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003166:	4b22      	ldr	r3, [pc, #136]	; (80031f0 <vInitPrioGroupValue+0xf8>)
 8003168:	2207      	movs	r2, #7
 800316a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800316c:	e009      	b.n	8003182 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800316e:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <vInitPrioGroupValue+0xf8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	3b01      	subs	r3, #1
 8003174:	4a1e      	ldr	r2, [pc, #120]	; (80031f0 <vInitPrioGroupValue+0xf8>)
 8003176:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	b2db      	uxtb	r3, r3
 8003180:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318a:	2b80      	cmp	r3, #128	; 0x80
 800318c:	d0ef      	beq.n	800316e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800318e:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <vInitPrioGroupValue+0xf8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f1c3 0307 	rsb	r3, r3, #7
 8003196:	2b04      	cmp	r3, #4
 8003198:	d00a      	beq.n	80031b0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800319a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319e:	f383 8811 	msr	BASEPRI, r3
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	f3bf 8f4f 	dsb	sy
 80031aa:	60bb      	str	r3, [r7, #8]
    }
 80031ac:	bf00      	nop
 80031ae:	e7fe      	b.n	80031ae <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <vInitPrioGroupValue+0xf8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	4a0e      	ldr	r2, [pc, #56]	; (80031f0 <vInitPrioGroupValue+0xf8>)
 80031b8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80031ba:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <vInitPrioGroupValue+0xf8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031c2:	4a0b      	ldr	r2, [pc, #44]	; (80031f0 <vInitPrioGroupValue+0xf8>)
 80031c4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80031ce:	bf00      	nop
 80031d0:	371c      	adds	r7, #28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	e000ed00 	.word	0xe000ed00
 80031e0:	410fc271 	.word	0x410fc271
 80031e4:	410fc270 	.word	0x410fc270
 80031e8:	e000e400 	.word	0xe000e400
 80031ec:	20000180 	.word	0x20000180
 80031f0:	20000184 	.word	0x20000184

080031f4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
        __asm volatile
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	607b      	str	r3, [r7, #4]
    }
 800320c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800320e:	4b0f      	ldr	r3, [pc, #60]	; (800324c <vPortEnterCritical+0x58>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3301      	adds	r3, #1
 8003214:	4a0d      	ldr	r2, [pc, #52]	; (800324c <vPortEnterCritical+0x58>)
 8003216:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003218:	4b0c      	ldr	r3, [pc, #48]	; (800324c <vPortEnterCritical+0x58>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d10f      	bne.n	8003240 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <vPortEnterCritical+0x5c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <vPortEnterCritical+0x4c>
        __asm volatile
 800322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	603b      	str	r3, [r7, #0]
    }
 800323c:	bf00      	nop
 800323e:	e7fe      	b.n	800323e <vPortEnterCritical+0x4a>
    }
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	20000010 	.word	0x20000010
 8003250:	e000ed04 	.word	0xe000ed04

08003254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800325a:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <vPortExitCritical+0x50>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10a      	bne.n	8003278 <vPortExitCritical+0x24>
        __asm volatile
 8003262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003266:	f383 8811 	msr	BASEPRI, r3
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	607b      	str	r3, [r7, #4]
    }
 8003274:	bf00      	nop
 8003276:	e7fe      	b.n	8003276 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003278:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <vPortExitCritical+0x50>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3b01      	subs	r3, #1
 800327e:	4a09      	ldr	r2, [pc, #36]	; (80032a4 <vPortExitCritical+0x50>)
 8003280:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003282:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <vPortExitCritical+0x50>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d105      	bne.n	8003296 <vPortExitCritical+0x42>
 800328a:	2300      	movs	r3, #0
 800328c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003294:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20000010 	.word	0x20000010
	...

080032b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80032b0:	f3ef 8009 	mrs	r0, PSP
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	4b15      	ldr	r3, [pc, #84]	; (8003310 <pxCurrentTCBConst>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	f01e 0f10 	tst.w	lr, #16
 80032c0:	bf08      	it	eq
 80032c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80032c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ca:	6010      	str	r0, [r2, #0]
 80032cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80032d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80032d4:	f380 8811 	msr	BASEPRI, r0
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f7ff fc32 	bl	8002b48 <vTaskSwitchContext>
 80032e4:	f04f 0000 	mov.w	r0, #0
 80032e8:	f380 8811 	msr	BASEPRI, r0
 80032ec:	bc09      	pop	{r0, r3}
 80032ee:	6819      	ldr	r1, [r3, #0]
 80032f0:	6808      	ldr	r0, [r1, #0]
 80032f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f6:	f01e 0f10 	tst.w	lr, #16
 80032fa:	bf08      	it	eq
 80032fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003300:	f380 8809 	msr	PSP, r0
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	f3af 8000 	nop.w

08003310 <pxCurrentTCBConst>:
 8003310:	2000007c 	.word	0x2000007c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop

08003318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
        __asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	607b      	str	r3, [r7, #4]
    }
 8003330:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003332:	f001 ff89 	bl	8005248 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003336:	f7ff faed 	bl	8002914 <xTaskIncrementTick>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d006      	beq.n	800334e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003340:	f001 ffe0 	bl	8005304 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003344:	4b08      	ldr	r3, [pc, #32]	; (8003368 <SysTick_Handler+0x50>)
 8003346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	e001      	b.n	8003352 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800334e:	f001 ffbd 	bl	80052cc <SEGGER_SYSVIEW_RecordExitISR>
 8003352:	2300      	movs	r3, #0
 8003354:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	f383 8811 	msr	BASEPRI, r3
    }
 800335c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	e000ed04 	.word	0xe000ed04

0800336c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <vPortSetupTimerInterrupt+0x34>)
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003376:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <vPortSetupTimerInterrupt+0x38>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800337c:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <vPortSetupTimerInterrupt+0x3c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a0a      	ldr	r2, [pc, #40]	; (80033ac <vPortSetupTimerInterrupt+0x40>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	099b      	lsrs	r3, r3, #6
 8003388:	4a09      	ldr	r2, [pc, #36]	; (80033b0 <vPortSetupTimerInterrupt+0x44>)
 800338a:	3b01      	subs	r3, #1
 800338c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800338e:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <vPortSetupTimerInterrupt+0x34>)
 8003390:	2207      	movs	r2, #7
 8003392:	601a      	str	r2, [r3, #0]
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	e000e010 	.word	0xe000e010
 80033a4:	e000e018 	.word	0xe000e018
 80033a8:	20000000 	.word	0x20000000
 80033ac:	10624dd3 	.word	0x10624dd3
 80033b0:	e000e014 	.word	0xe000e014

080033b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80033b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80033c4 <vPortEnableVFP+0x10>
 80033b8:	6801      	ldr	r1, [r0, #0]
 80033ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80033be:	6001      	str	r1, [r0, #0]
 80033c0:	4770      	bx	lr
 80033c2:	0000      	.short	0x0000
 80033c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop

080033cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80033d2:	f3ef 8305 	mrs	r3, IPSR
 80033d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b0f      	cmp	r3, #15
 80033dc:	d914      	bls.n	8003408 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80033de:	4a17      	ldr	r2, [pc, #92]	; (800343c <vPortValidateInterruptPriority+0x70>)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80033e8:	4b15      	ldr	r3, [pc, #84]	; (8003440 <vPortValidateInterruptPriority+0x74>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	7afa      	ldrb	r2, [r7, #11]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d20a      	bcs.n	8003408 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80033f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	607b      	str	r3, [r7, #4]
    }
 8003404:	bf00      	nop
 8003406:	e7fe      	b.n	8003406 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003408:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <vPortValidateInterruptPriority+0x78>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003410:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <vPortValidateInterruptPriority+0x7c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d90a      	bls.n	800342e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	603b      	str	r3, [r7, #0]
    }
 800342a:	bf00      	nop
 800342c:	e7fe      	b.n	800342c <vPortValidateInterruptPriority+0x60>
    }
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	e000e3f0 	.word	0xe000e3f0
 8003440:	20000180 	.word	0x20000180
 8003444:	e000ed0c 	.word	0xe000ed0c
 8003448:	20000184 	.word	0x20000184

0800344c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	; 0x28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003458:	f7ff f92c 	bl	80026b4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800345c:	4b65      	ldr	r3, [pc, #404]	; (80035f4 <pvPortMalloc+0x1a8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003464:	f000 f934 	bl	80036d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003468:	4b63      	ldr	r3, [pc, #396]	; (80035f8 <pvPortMalloc+0x1ac>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	f040 80a7 	bne.w	80035c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d02d      	beq.n	80034d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800347c:	2208      	movs	r2, #8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	429a      	cmp	r2, r3
 8003486:	d227      	bcs.n	80034d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003488:	2208      	movs	r2, #8
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	2b00      	cmp	r3, #0
 8003498:	d021      	beq.n	80034de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f023 0307 	bic.w	r3, r3, #7
 80034a0:	3308      	adds	r3, #8
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d214      	bcs.n	80034d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f023 0307 	bic.w	r3, r3, #7
 80034ae:	3308      	adds	r3, #8
 80034b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d010      	beq.n	80034de <pvPortMalloc+0x92>
        __asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	617b      	str	r3, [r7, #20]
    }
 80034ce:	bf00      	nop
 80034d0:	e7fe      	b.n	80034d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80034d2:	2300      	movs	r3, #0
 80034d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80034d6:	e002      	b.n	80034de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	607b      	str	r3, [r7, #4]
 80034dc:	e000      	b.n	80034e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80034de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d06e      	beq.n	80035c4 <pvPortMalloc+0x178>
 80034e6:	4b45      	ldr	r3, [pc, #276]	; (80035fc <pvPortMalloc+0x1b0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d869      	bhi.n	80035c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80034f0:	4b43      	ldr	r3, [pc, #268]	; (8003600 <pvPortMalloc+0x1b4>)
 80034f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80034f4:	4b42      	ldr	r3, [pc, #264]	; (8003600 <pvPortMalloc+0x1b4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80034fa:	e004      	b.n	8003506 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	429a      	cmp	r2, r3
 800350e:	d903      	bls.n	8003518 <pvPortMalloc+0xcc>
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f1      	bne.n	80034fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003518:	4b36      	ldr	r3, [pc, #216]	; (80035f4 <pvPortMalloc+0x1a8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351e:	429a      	cmp	r2, r3
 8003520:	d050      	beq.n	80035c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2208      	movs	r2, #8
 8003528:	4413      	add	r3, r2
 800352a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	1ad2      	subs	r2, r2, r3
 800353c:	2308      	movs	r3, #8
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	429a      	cmp	r2, r3
 8003542:	d91f      	bls.n	8003584 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <pvPortMalloc+0x120>
        __asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	613b      	str	r3, [r7, #16]
    }
 8003568:	bf00      	nop
 800356a:	e7fe      	b.n	800356a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	1ad2      	subs	r2, r2, r3
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800357e:	69b8      	ldr	r0, [r7, #24]
 8003580:	f000 f908 	bl	8003794 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003584:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <pvPortMalloc+0x1b0>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	4a1b      	ldr	r2, [pc, #108]	; (80035fc <pvPortMalloc+0x1b0>)
 8003590:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003592:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <pvPortMalloc+0x1b0>)
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <pvPortMalloc+0x1b8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d203      	bcs.n	80035a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800359e:	4b17      	ldr	r3, [pc, #92]	; (80035fc <pvPortMalloc+0x1b0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a18      	ldr	r2, [pc, #96]	; (8003604 <pvPortMalloc+0x1b8>)
 80035a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <pvPortMalloc+0x1ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80035ba:	4b13      	ldr	r3, [pc, #76]	; (8003608 <pvPortMalloc+0x1bc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3301      	adds	r3, #1
 80035c0:	4a11      	ldr	r2, [pc, #68]	; (8003608 <pvPortMalloc+0x1bc>)
 80035c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80035c4:	f7ff f884 	bl	80026d0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <pvPortMalloc+0x19c>
        __asm volatile
 80035d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d6:	f383 8811 	msr	BASEPRI, r3
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	60fb      	str	r3, [r7, #12]
    }
 80035e4:	bf00      	nop
 80035e6:	e7fe      	b.n	80035e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80035e8:	69fb      	ldr	r3, [r7, #28]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3728      	adds	r7, #40	; 0x28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20012d90 	.word	0x20012d90
 80035f8:	20012da4 	.word	0x20012da4
 80035fc:	20012d94 	.word	0x20012d94
 8003600:	20012d88 	.word	0x20012d88
 8003604:	20012d98 	.word	0x20012d98
 8003608:	20012d9c 	.word	0x20012d9c

0800360c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d04d      	beq.n	80036ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800361e:	2308      	movs	r3, #8
 8003620:	425b      	negs	r3, r3
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	4413      	add	r3, r2
 8003626:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <vPortFree+0xb8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4013      	ands	r3, r2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10a      	bne.n	8003650 <vPortFree+0x44>
        __asm volatile
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	60fb      	str	r3, [r7, #12]
    }
 800364c:	bf00      	nop
 800364e:	e7fe      	b.n	800364e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <vPortFree+0x62>
        __asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	60bb      	str	r3, [r7, #8]
    }
 800366a:	bf00      	nop
 800366c:	e7fe      	b.n	800366c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <vPortFree+0xb8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4013      	ands	r3, r2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01e      	beq.n	80036ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d11a      	bne.n	80036ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <vPortFree+0xb8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	43db      	mvns	r3, r3
 800368e:	401a      	ands	r2, r3
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003694:	f7ff f80e 	bl	80026b4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <vPortFree+0xbc>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4413      	add	r3, r2
 80036a2:	4a09      	ldr	r2, [pc, #36]	; (80036c8 <vPortFree+0xbc>)
 80036a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80036a6:	6938      	ldr	r0, [r7, #16]
 80036a8:	f000 f874 	bl	8003794 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80036ac:	4b07      	ldr	r3, [pc, #28]	; (80036cc <vPortFree+0xc0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3301      	adds	r3, #1
 80036b2:	4a06      	ldr	r2, [pc, #24]	; (80036cc <vPortFree+0xc0>)
 80036b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80036b6:	f7ff f80b 	bl	80026d0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80036ba:	bf00      	nop
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20012da4 	.word	0x20012da4
 80036c8:	20012d94 	.word	0x20012d94
 80036cc:	20012da0 	.word	0x20012da0

080036d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80036d6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80036da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80036dc:	4b27      	ldr	r3, [pc, #156]	; (800377c <prvHeapInit+0xac>)
 80036de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00c      	beq.n	8003704 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	3307      	adds	r3, #7
 80036ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0307 	bic.w	r3, r3, #7
 80036f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	4a1f      	ldr	r2, [pc, #124]	; (800377c <prvHeapInit+0xac>)
 8003700:	4413      	add	r3, r2
 8003702:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003708:	4a1d      	ldr	r2, [pc, #116]	; (8003780 <prvHeapInit+0xb0>)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800370e:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <prvHeapInit+0xb0>)
 8003710:	2200      	movs	r2, #0
 8003712:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	4413      	add	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800371c:	2208      	movs	r2, #8
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0307 	bic.w	r3, r3, #7
 800372a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4a15      	ldr	r2, [pc, #84]	; (8003784 <prvHeapInit+0xb4>)
 8003730:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003732:	4b14      	ldr	r3, [pc, #80]	; (8003784 <prvHeapInit+0xb4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2200      	movs	r2, #0
 8003738:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800373a:	4b12      	ldr	r3, [pc, #72]	; (8003784 <prvHeapInit+0xb4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	1ad2      	subs	r2, r2, r3
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003750:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <prvHeapInit+0xb4>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a0a      	ldr	r2, [pc, #40]	; (8003788 <prvHeapInit+0xb8>)
 800375e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	4a09      	ldr	r2, [pc, #36]	; (800378c <prvHeapInit+0xbc>)
 8003766:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003768:	4b09      	ldr	r3, [pc, #36]	; (8003790 <prvHeapInit+0xc0>)
 800376a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800376e:	601a      	str	r2, [r3, #0]
}
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	20000188 	.word	0x20000188
 8003780:	20012d88 	.word	0x20012d88
 8003784:	20012d90 	.word	0x20012d90
 8003788:	20012d98 	.word	0x20012d98
 800378c:	20012d94 	.word	0x20012d94
 8003790:	20012da4 	.word	0x20012da4

08003794 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800379c:	4b28      	ldr	r3, [pc, #160]	; (8003840 <prvInsertBlockIntoFreeList+0xac>)
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	e002      	b.n	80037a8 <prvInsertBlockIntoFreeList+0x14>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d8f7      	bhi.n	80037a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	4413      	add	r3, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d108      	bne.n	80037d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	441a      	add	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	441a      	add	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d118      	bne.n	800381c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4b15      	ldr	r3, [pc, #84]	; (8003844 <prvInsertBlockIntoFreeList+0xb0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d00d      	beq.n	8003812 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	441a      	add	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	e008      	b.n	8003824 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003812:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <prvInsertBlockIntoFreeList+0xb0>)
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	e003      	b.n	8003824 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	429a      	cmp	r2, r3
 800382a:	d002      	beq.n	8003832 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20012d88 	.word	0x20012d88
 8003844:	20012d90 	.word	0x20012d90

08003848 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800384c:	4803      	ldr	r0, [pc, #12]	; (800385c <_cbSendSystemDesc+0x14>)
 800384e:	f001 fca5 	bl	800519c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003852:	4803      	ldr	r0, [pc, #12]	; (8003860 <_cbSendSystemDesc+0x18>)
 8003854:	f001 fca2 	bl	800519c <SEGGER_SYSVIEW_SendSysDesc>
}
 8003858:	bf00      	nop
 800385a:	bd80      	pop	{r7, pc}
 800385c:	0800596c 	.word	0x0800596c
 8003860:	080059b4 	.word	0x080059b4

08003864 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003868:	4b06      	ldr	r3, [pc, #24]	; (8003884 <SEGGER_SYSVIEW_Conf+0x20>)
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <SEGGER_SYSVIEW_Conf+0x20>)
 800386e:	6819      	ldr	r1, [r3, #0]
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <SEGGER_SYSVIEW_Conf+0x24>)
 8003872:	4a06      	ldr	r2, [pc, #24]	; (800388c <SEGGER_SYSVIEW_Conf+0x28>)
 8003874:	f001 f918 	bl	8004aa8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003878:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800387c:	f001 f958 	bl	8004b30 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003880:	bf00      	nop
 8003882:	bd80      	pop	{r7, pc}
 8003884:	20000000 	.word	0x20000000
 8003888:	08003849 	.word	0x08003849
 800388c:	08005a48 	.word	0x08005a48

08003890 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003892:	b085      	sub	sp, #20
 8003894:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003896:	2300      	movs	r3, #0
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	e033      	b.n	8003904 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800389c:	491e      	ldr	r1, [pc, #120]	; (8003918 <_cbSendTaskList+0x88>)
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	491a      	ldr	r1, [pc, #104]	; (8003918 <_cbSendTaskList+0x88>)
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	3304      	adds	r3, #4
 80038bc:	6819      	ldr	r1, [r3, #0]
 80038be:	4c16      	ldr	r4, [pc, #88]	; (8003918 <_cbSendTaskList+0x88>)
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4423      	add	r3, r4
 80038cc:	3308      	adds	r3, #8
 80038ce:	681c      	ldr	r4, [r3, #0]
 80038d0:	4d11      	ldr	r5, [pc, #68]	; (8003918 <_cbSendTaskList+0x88>)
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	442b      	add	r3, r5
 80038de:	330c      	adds	r3, #12
 80038e0:	681d      	ldr	r5, [r3, #0]
 80038e2:	4e0d      	ldr	r6, [pc, #52]	; (8003918 <_cbSendTaskList+0x88>)
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4433      	add	r3, r6
 80038f0:	3310      	adds	r3, #16
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	462b      	mov	r3, r5
 80038f8:	4622      	mov	r2, r4
 80038fa:	f000 f8bd 	bl	8003a78 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3301      	adds	r3, #1
 8003902:	607b      	str	r3, [r7, #4]
 8003904:	4b05      	ldr	r3, [pc, #20]	; (800391c <_cbSendTaskList+0x8c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	429a      	cmp	r2, r3
 800390c:	d3c6      	bcc.n	800389c <_cbSendTaskList+0xc>
  }
}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003918:	20012da8 	.word	0x20012da8
 800391c:	20012e48 	.word	0x20012e48

08003920 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003928:	f7fe ffe2 	bl	80028f0 <xTaskGetTickCountFromISR>
 800392c:	4603      	mov	r3, r0
 800392e:	2200      	movs	r2, #0
 8003930:	469a      	mov	sl, r3
 8003932:	4693      	mov	fp, r2
 8003934:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003938:	e9d7 0100 	ldrd	r0, r1, [r7]
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	f04f 0a00 	mov.w	sl, #0
 8003944:	f04f 0b00 	mov.w	fp, #0
 8003948:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800394c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003950:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003954:	4652      	mov	r2, sl
 8003956:	465b      	mov	r3, fp
 8003958:	1a14      	subs	r4, r2, r0
 800395a:	eb63 0501 	sbc.w	r5, r3, r1
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	00ab      	lsls	r3, r5, #2
 8003968:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800396c:	00a2      	lsls	r2, r4, #2
 800396e:	4614      	mov	r4, r2
 8003970:	461d      	mov	r5, r3
 8003972:	eb14 0800 	adds.w	r8, r4, r0
 8003976:	eb45 0901 	adc.w	r9, r5, r1
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800398a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800398e:	4690      	mov	r8, r2
 8003990:	4699      	mov	r9, r3
 8003992:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003996:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800399a:	4610      	mov	r0, r2
 800399c:	4619      	mov	r1, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080039a8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80039b6:	2205      	movs	r2, #5
 80039b8:	492b      	ldr	r1, [pc, #172]	; (8003a68 <SYSVIEW_AddTask+0xc0>)
 80039ba:	68b8      	ldr	r0, [r7, #8]
 80039bc:	f001 ff70 	bl	80058a0 <memcmp>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d04b      	beq.n	8003a5e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80039c6:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <SYSVIEW_AddTask+0xc4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b07      	cmp	r3, #7
 80039cc:	d903      	bls.n	80039d6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80039ce:	4828      	ldr	r0, [pc, #160]	; (8003a70 <SYSVIEW_AddTask+0xc8>)
 80039d0:	f001 fee6 	bl	80057a0 <SEGGER_SYSVIEW_Warn>
    return;
 80039d4:	e044      	b.n	8003a60 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80039d6:	4b25      	ldr	r3, [pc, #148]	; (8003a6c <SYSVIEW_AddTask+0xc4>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	4926      	ldr	r1, [pc, #152]	; (8003a74 <SYSVIEW_AddTask+0xcc>)
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80039ea:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <SYSVIEW_AddTask+0xc4>)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	4921      	ldr	r1, [pc, #132]	; (8003a74 <SYSVIEW_AddTask+0xcc>)
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	3304      	adds	r3, #4
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003a00:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <SYSVIEW_AddTask+0xc4>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	491b      	ldr	r1, [pc, #108]	; (8003a74 <SYSVIEW_AddTask+0xcc>)
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	3308      	adds	r3, #8
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003a16:	4b15      	ldr	r3, [pc, #84]	; (8003a6c <SYSVIEW_AddTask+0xc4>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4916      	ldr	r1, [pc, #88]	; (8003a74 <SYSVIEW_AddTask+0xcc>)
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	330c      	adds	r3, #12
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003a2c:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <SYSVIEW_AddTask+0xc4>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4910      	ldr	r1, [pc, #64]	; (8003a74 <SYSVIEW_AddTask+0xcc>)
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	3310      	adds	r3, #16
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003a42:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <SYSVIEW_AddTask+0xc4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3301      	adds	r3, #1
 8003a48:	4a08      	ldr	r2, [pc, #32]	; (8003a6c <SYSVIEW_AddTask+0xc4>)
 8003a4a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f80e 	bl	8003a78 <SYSVIEW_SendTaskInfo>
 8003a5c:	e000      	b.n	8003a60 <SYSVIEW_AddTask+0xb8>
    return;
 8003a5e:	bf00      	nop

}
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	080059c4 	.word	0x080059c4
 8003a6c:	20012e48 	.word	0x20012e48
 8003a70:	080059cc 	.word	0x080059cc
 8003a74:	20012da8 	.word	0x20012da8

08003a78 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08a      	sub	sp, #40	; 0x28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003a86:	f107 0314 	add.w	r3, r7, #20
 8003a8a:	2214      	movs	r2, #20
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 ff24 	bl	80058dc <memset>
  TaskInfo.TaskID     = TaskID;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003aa8:	f107 0314 	add.w	r3, r7, #20
 8003aac:	4618      	mov	r0, r3
 8003aae:	f001 fa7d 	bl	8004fac <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003ab2:	bf00      	nop
 8003ab4:	3728      	adds	r7, #40	; 0x28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003ac2:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <_DoInit+0xa0>)
 8003ac4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003ac6:	22a8      	movs	r2, #168	; 0xa8
 8003ac8:	2100      	movs	r1, #0
 8003aca:	6838      	ldr	r0, [r7, #0]
 8003acc:	f001 ff06 	bl	80058dc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2203      	movs	r2, #3
 8003ada:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	4a20      	ldr	r2, [pc, #128]	; (8003b60 <_DoInit+0xa4>)
 8003ae0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <_DoInit+0xa8>)
 8003ae6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aee:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2200      	movs	r2, #0
 8003af4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2200      	movs	r2, #0
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2200      	movs	r2, #0
 8003b00:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	4a16      	ldr	r2, [pc, #88]	; (8003b60 <_DoInit+0xa4>)
 8003b06:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	4a17      	ldr	r2, [pc, #92]	; (8003b68 <_DoInit+0xac>)
 8003b0c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2210      	movs	r2, #16
 8003b12:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2200      	movs	r2, #0
 8003b18:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2200      	movs	r2, #0
 8003b24:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003b26:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	607b      	str	r3, [r7, #4]
 8003b2e:	e00c      	b.n	8003b4a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f1c3 030f 	rsb	r3, r3, #15
 8003b36:	4a0d      	ldr	r2, [pc, #52]	; (8003b6c <_DoInit+0xb0>)
 8003b38:	5cd1      	ldrb	r1, [r2, r3]
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4413      	add	r3, r2
 8003b40:	460a      	mov	r2, r1
 8003b42:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3301      	adds	r3, #1
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b0f      	cmp	r3, #15
 8003b4e:	d9ef      	bls.n	8003b30 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003b50:	f3bf 8f5f 	dmb	sy
}
 8003b54:	bf00      	nop
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20012e4c 	.word	0x20012e4c
 8003b60:	08005a1c 	.word	0x08005a1c
 8003b64:	20012ef4 	.word	0x20012ef4
 8003b68:	200132f4 	.word	0x200132f4
 8003b6c:	08005a50 	.word	0x08005a50

08003b70 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08c      	sub	sp, #48	; 0x30
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003b7c:	4b3e      	ldr	r3, [pc, #248]	; (8003c78 <SEGGER_RTT_ReadNoLock+0x108>)
 8003b7e:	623b      	str	r3, [r7, #32]
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <SEGGER_RTT_ReadNoLock+0x1e>
 8003b8a:	f7ff ff97 	bl	8003abc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4613      	mov	r3, r2
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	4413      	add	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	3360      	adds	r3, #96	; 0x60
 8003b9a:	4a37      	ldr	r2, [pc, #220]	; (8003c78 <SEGGER_RTT_ReadNoLock+0x108>)
 8003b9c:	4413      	add	r3, r2
 8003b9e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d92b      	bls.n	8003c14 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	bf28      	it	cs
 8003bce:	4613      	movcs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd8:	4413      	add	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	6939      	ldr	r1, [r7, #16]
 8003be0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003be2:	f001 fe6d 	bl	80058c0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	4413      	add	r3, r2
 8003bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	4413      	add	r3, r2
 8003c04:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d101      	bne.n	8003c14 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003c10:	2300      	movs	r3, #0
 8003c12:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4293      	cmp	r3, r2
 8003c22:	bf28      	it	cs
 8003c24:	4613      	movcs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d019      	beq.n	8003c62 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c34:	4413      	add	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	6939      	ldr	r1, [r7, #16]
 8003c3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c3e:	f001 fe3f 	bl	80058c0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	4413      	add	r3, r2
 8003c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	4413      	add	r3, r2
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	4413      	add	r3, r2
 8003c60:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c6c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3730      	adds	r7, #48	; 0x30
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20012e4c 	.word	0x20012e4c

08003c7c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003c8a:	4b3d      	ldr	r3, [pc, #244]	; (8003d80 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <SEGGER_RTT_AllocUpBuffer+0x20>
 8003c98:	f7ff ff10 	bl	8003abc <_DoInit>
  SEGGER_RTT_LOCK();
 8003c9c:	f3ef 8311 	mrs	r3, BASEPRI
 8003ca0:	f04f 0120 	mov.w	r1, #32
 8003ca4:	f381 8811 	msr	BASEPRI, r1
 8003ca8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003caa:	4b35      	ldr	r3, [pc, #212]	; (8003d80 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003cac:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003cb2:	6939      	ldr	r1, [r7, #16]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	4613      	mov	r3, r2
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	4413      	add	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	440b      	add	r3, r1
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d008      	beq.n	8003cdc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	dbeb      	blt.n	8003cb2 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003cda:	e000      	b.n	8003cde <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003cdc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	da3f      	bge.n	8003d68 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003ce8:	6939      	ldr	r1, [r7, #16]
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	4613      	mov	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	4413      	add	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	440b      	add	r3, r1
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003cfc:	6939      	ldr	r1, [r7, #16]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	4613      	mov	r3, r2
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	440b      	add	r3, r1
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003d12:	6939      	ldr	r1, [r7, #16]
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	4613      	mov	r3, r2
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4413      	add	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	440b      	add	r3, r1
 8003d20:	3320      	adds	r3, #32
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003d26:	6939      	ldr	r1, [r7, #16]
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	4413      	add	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	440b      	add	r3, r1
 8003d34:	3328      	adds	r3, #40	; 0x28
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003d3a:	6939      	ldr	r1, [r7, #16]
 8003d3c:	69fa      	ldr	r2, [r7, #28]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	4413      	add	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	440b      	add	r3, r1
 8003d48:	3324      	adds	r3, #36	; 0x24
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003d4e:	6939      	ldr	r1, [r7, #16]
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	4613      	mov	r3, r2
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	4413      	add	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	440b      	add	r3, r1
 8003d5c:	332c      	adds	r3, #44	; 0x2c
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d62:	f3bf 8f5f 	dmb	sy
 8003d66:	e002      	b.n	8003d6e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003d68:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003d74:	69fb      	ldr	r3, [r7, #28]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20012e4c 	.word	0x20012e4c

08003d84 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	; 0x28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003d92:	4b21      	ldr	r3, [pc, #132]	; (8003e18 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003d94:	623b      	str	r3, [r7, #32]
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003da0:	f7ff fe8c 	bl	8003abc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003da4:	4b1c      	ldr	r3, [pc, #112]	; (8003e18 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003da6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d82c      	bhi.n	8003e08 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003dae:	f3ef 8311 	mrs	r3, BASEPRI
 8003db2:	f04f 0120 	mov.w	r1, #32
 8003db6:	f381 8811 	msr	BASEPRI, r1
 8003dba:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	3360      	adds	r3, #96	; 0x60
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	4413      	add	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00e      	beq.n	8003df2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2200      	movs	r2, #0
 8003dea:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2200      	movs	r2, #0
 8003df0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003df6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003df8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003e02:	2300      	movs	r3, #0
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
 8003e06:	e002      	b.n	8003e0e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003e08:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3728      	adds	r7, #40	; 0x28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20012e4c 	.word	0x20012e4c

08003e1c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00f      	beq.n	8003e52 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8003e32:	e002      	b.n	8003e3a <_EncodeStr+0x1e>
      Len++;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	3301      	adds	r3, #1
 8003e38:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f6      	bne.n	8003e34 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d901      	bls.n	8003e52 <_EncodeStr+0x36>
      Len = Limit;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	2bfe      	cmp	r3, #254	; 0xfe
 8003e56:	d806      	bhi.n	8003e66 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	60fa      	str	r2, [r7, #12]
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	701a      	strb	r2, [r3, #0]
 8003e64:	e011      	b.n	8003e8a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	60fa      	str	r2, [r7, #12]
 8003e6c:	22ff      	movs	r2, #255	; 0xff
 8003e6e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	60fa      	str	r2, [r7, #12]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	0a19      	lsrs	r1, r3, #8
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	60fa      	str	r2, [r7, #12]
 8003e86:	b2ca      	uxtb	r2, r1
 8003e88:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003e8e:	e00a      	b.n	8003ea6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	1c53      	adds	r3, r2, #1
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1c59      	adds	r1, r3, #1
 8003e9a:	60f9      	str	r1, [r7, #12]
 8003e9c:	7812      	ldrb	r2, [r2, #0]
 8003e9e:	701a      	strb	r2, [r3, #0]
    n++;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d3f0      	bcc.n	8003e90 <_EncodeStr+0x74>
  }
  return pPayload;
 8003eae:	68fb      	ldr	r3, [r7, #12]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3307      	adds	r3, #7
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003eda:	4b35      	ldr	r3, [pc, #212]	; (8003fb0 <_HandleIncomingPacket+0xdc>)
 8003edc:	7e1b      	ldrb	r3, [r3, #24]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	1cfb      	adds	r3, r7, #3
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	f7ff fe43 	bl	8003b70 <SEGGER_RTT_ReadNoLock>
 8003eea:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d052      	beq.n	8003f98 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	2b80      	cmp	r3, #128	; 0x80
 8003ef6:	d031      	beq.n	8003f5c <_HandleIncomingPacket+0x88>
 8003ef8:	2b80      	cmp	r3, #128	; 0x80
 8003efa:	dc40      	bgt.n	8003f7e <_HandleIncomingPacket+0xaa>
 8003efc:	2b07      	cmp	r3, #7
 8003efe:	dc15      	bgt.n	8003f2c <_HandleIncomingPacket+0x58>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	dd3c      	ble.n	8003f7e <_HandleIncomingPacket+0xaa>
 8003f04:	3b01      	subs	r3, #1
 8003f06:	2b06      	cmp	r3, #6
 8003f08:	d839      	bhi.n	8003f7e <_HandleIncomingPacket+0xaa>
 8003f0a:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <_HandleIncomingPacket+0x3c>)
 8003f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f10:	08003f33 	.word	0x08003f33
 8003f14:	08003f39 	.word	0x08003f39
 8003f18:	08003f3f 	.word	0x08003f3f
 8003f1c:	08003f45 	.word	0x08003f45
 8003f20:	08003f4b 	.word	0x08003f4b
 8003f24:	08003f51 	.word	0x08003f51
 8003f28:	08003f57 	.word	0x08003f57
 8003f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8003f2e:	d035      	beq.n	8003f9c <_HandleIncomingPacket+0xc8>
 8003f30:	e025      	b.n	8003f7e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003f32:	f000 fec1 	bl	8004cb8 <SEGGER_SYSVIEW_Start>
      break;
 8003f36:	e036      	b.n	8003fa6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003f38:	f000 ff78 	bl	8004e2c <SEGGER_SYSVIEW_Stop>
      break;
 8003f3c:	e033      	b.n	8003fa6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003f3e:	f001 f951 	bl	80051e4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003f42:	e030      	b.n	8003fa6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003f44:	f001 f916 	bl	8005174 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003f48:	e02d      	b.n	8003fa6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003f4a:	f000 ff95 	bl	8004e78 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003f4e:	e02a      	b.n	8003fa6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003f50:	f001 fbd4 	bl	80056fc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003f54:	e027      	b.n	8003fa6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003f56:	f001 fbb3 	bl	80056c0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003f5a:	e024      	b.n	8003fa6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f5c:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <_HandleIncomingPacket+0xdc>)
 8003f5e:	7e1b      	ldrb	r3, [r3, #24]
 8003f60:	4618      	mov	r0, r3
 8003f62:	1cfb      	adds	r3, r7, #3
 8003f64:	2201      	movs	r2, #1
 8003f66:	4619      	mov	r1, r3
 8003f68:	f7ff fe02 	bl	8003b70 <SEGGER_RTT_ReadNoLock>
 8003f6c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d015      	beq.n	8003fa0 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f001 fb22 	bl	80055c0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003f7c:	e010      	b.n	8003fa0 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	b25b      	sxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	da0e      	bge.n	8003fa4 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f86:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <_HandleIncomingPacket+0xdc>)
 8003f88:	7e1b      	ldrb	r3, [r3, #24]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	1cfb      	adds	r3, r7, #3
 8003f8e:	2201      	movs	r2, #1
 8003f90:	4619      	mov	r1, r3
 8003f92:	f7ff fded 	bl	8003b70 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003f96:	e005      	b.n	8003fa4 <_HandleIncomingPacket+0xd0>
    }
  }
 8003f98:	bf00      	nop
 8003f9a:	e004      	b.n	8003fa6 <_HandleIncomingPacket+0xd2>
      break;
 8003f9c:	bf00      	nop
 8003f9e:	e002      	b.n	8003fa6 <_HandleIncomingPacket+0xd2>
      break;
 8003fa0:	bf00      	nop
 8003fa2:	e000      	b.n	8003fa6 <_HandleIncomingPacket+0xd2>
      break;
 8003fa4:	bf00      	nop
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	2001430c 	.word	0x2001430c

08003fb4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08c      	sub	sp, #48	; 0x30
 8003fb8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003fba:	2301      	movs	r3, #1
 8003fbc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003fbe:	1d3b      	adds	r3, r7, #4
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc8:	4b31      	ldr	r3, [pc, #196]	; (8004090 <_TrySendOverflowPacket+0xdc>)
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fce:	e00b      	b.n	8003fe8 <_TrySendOverflowPacket+0x34>
 8003fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd6:	1c59      	adds	r1, r3, #1
 8003fd8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003fda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe4:	09db      	lsrs	r3, r3, #7
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	2b7f      	cmp	r3, #127	; 0x7f
 8003fec:	d8f0      	bhi.n	8003fd0 <_TrySendOverflowPacket+0x1c>
 8003fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003ffe:	4b25      	ldr	r3, [pc, #148]	; (8004094 <_TrySendOverflowPacket+0xe0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004004:	4b22      	ldr	r3, [pc, #136]	; (8004090 <_TrySendOverflowPacket+0xdc>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	623b      	str	r3, [r7, #32]
 8004016:	e00b      	b.n	8004030 <_TrySendOverflowPacket+0x7c>
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	b2da      	uxtb	r2, r3
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	1c59      	adds	r1, r3, #1
 8004020:	6279      	str	r1, [r7, #36]	; 0x24
 8004022:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	09db      	lsrs	r3, r3, #7
 800402e:	623b      	str	r3, [r7, #32]
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	2b7f      	cmp	r3, #127	; 0x7f
 8004034:	d8f0      	bhi.n	8004018 <_TrySendOverflowPacket+0x64>
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	627a      	str	r2, [r7, #36]	; 0x24
 800403c:	6a3a      	ldr	r2, [r7, #32]
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <_TrySendOverflowPacket+0xdc>)
 8004048:	785b      	ldrb	r3, [r3, #1]
 800404a:	4618      	mov	r0, r3
 800404c:	1d3b      	adds	r3, r7, #4
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	461a      	mov	r2, r3
 8004054:	1d3b      	adds	r3, r7, #4
 8004056:	4619      	mov	r1, r3
 8004058:	f7fc f8c2 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800405c:	4603      	mov	r3, r0
 800405e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004066:	4a0a      	ldr	r2, [pc, #40]	; (8004090 <_TrySendOverflowPacket+0xdc>)
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800406c:	4b08      	ldr	r3, [pc, #32]	; (8004090 <_TrySendOverflowPacket+0xdc>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	3b01      	subs	r3, #1
 8004072:	b2da      	uxtb	r2, r3
 8004074:	4b06      	ldr	r3, [pc, #24]	; (8004090 <_TrySendOverflowPacket+0xdc>)
 8004076:	701a      	strb	r2, [r3, #0]
 8004078:	e004      	b.n	8004084 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800407a:	4b05      	ldr	r3, [pc, #20]	; (8004090 <_TrySendOverflowPacket+0xdc>)
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	3301      	adds	r3, #1
 8004080:	4a03      	ldr	r2, [pc, #12]	; (8004090 <_TrySendOverflowPacket+0xdc>)
 8004082:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004084:	693b      	ldr	r3, [r7, #16]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3730      	adds	r7, #48	; 0x30
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	2001430c 	.word	0x2001430c
 8004094:	e0001004 	.word	0xe0001004

08004098 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	; 0x28
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80040a4:	4b98      	ldr	r3, [pc, #608]	; (8004308 <_SendPacket+0x270>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d010      	beq.n	80040ce <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80040ac:	4b96      	ldr	r3, [pc, #600]	; (8004308 <_SendPacket+0x270>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 812d 	beq.w	8004310 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80040b6:	4b94      	ldr	r3, [pc, #592]	; (8004308 <_SendPacket+0x270>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d109      	bne.n	80040d2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80040be:	f7ff ff79 	bl	8003fb4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80040c2:	4b91      	ldr	r3, [pc, #580]	; (8004308 <_SendPacket+0x270>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	f040 8124 	bne.w	8004314 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80040cc:	e001      	b.n	80040d2 <_SendPacket+0x3a>
    goto Send;
 80040ce:	bf00      	nop
 80040d0:	e000      	b.n	80040d4 <_SendPacket+0x3c>
Send:
 80040d2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b1f      	cmp	r3, #31
 80040d8:	d809      	bhi.n	80040ee <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80040da:	4b8b      	ldr	r3, [pc, #556]	; (8004308 <_SendPacket+0x270>)
 80040dc:	69da      	ldr	r2, [r3, #28]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	fa22 f303 	lsr.w	r3, r2, r3
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f040 8115 	bne.w	8004318 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b17      	cmp	r3, #23
 80040f2:	d807      	bhi.n	8004104 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	e0c4      	b.n	800428e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	2b7f      	cmp	r3, #127	; 0x7f
 8004110:	d912      	bls.n	8004138 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	09da      	lsrs	r2, r3, #7
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3b01      	subs	r3, #1
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	3a01      	subs	r2, #1
 800412a:	60fa      	str	r2, [r7, #12]
 800412c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004130:	b2da      	uxtb	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	e006      	b.n	8004146 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3b01      	subs	r3, #1
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	b2da      	uxtb	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b7e      	cmp	r3, #126	; 0x7e
 800414a:	d807      	bhi.n	800415c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3b01      	subs	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	b2da      	uxtb	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	e098      	b.n	800428e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004162:	d212      	bcs.n	800418a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	09da      	lsrs	r2, r3, #7
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3b01      	subs	r3, #1
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	3a01      	subs	r2, #1
 800417c:	60fa      	str	r2, [r7, #12]
 800417e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004182:	b2da      	uxtb	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	e081      	b.n	800428e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004190:	d21d      	bcs.n	80041ce <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	0b9a      	lsrs	r2, r3, #14
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3b01      	subs	r3, #1
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	09db      	lsrs	r3, r3, #7
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	3a01      	subs	r2, #1
 80041ac:	60fa      	str	r2, [r7, #12]
 80041ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	3a01      	subs	r2, #1
 80041c0:	60fa      	str	r2, [r7, #12]
 80041c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	701a      	strb	r2, [r3, #0]
 80041cc:	e05f      	b.n	800428e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041d4:	d228      	bcs.n	8004228 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	0d5a      	lsrs	r2, r3, #21
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3b01      	subs	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	0b9b      	lsrs	r3, r3, #14
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	3a01      	subs	r2, #1
 80041f0:	60fa      	str	r2, [r7, #12]
 80041f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	09db      	lsrs	r3, r3, #7
 8004200:	b2db      	uxtb	r3, r3
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	3a01      	subs	r2, #1
 8004206:	60fa      	str	r2, [r7, #12]
 8004208:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800420c:	b2da      	uxtb	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	3a01      	subs	r2, #1
 800421a:	60fa      	str	r2, [r7, #12]
 800421c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004220:	b2da      	uxtb	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	701a      	strb	r2, [r3, #0]
 8004226:	e032      	b.n	800428e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	0f1a      	lsrs	r2, r3, #28
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3b01      	subs	r3, #1
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	0d5b      	lsrs	r3, r3, #21
 800423c:	b2db      	uxtb	r3, r3
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	3a01      	subs	r2, #1
 8004242:	60fa      	str	r2, [r7, #12]
 8004244:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004248:	b2da      	uxtb	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	0b9b      	lsrs	r3, r3, #14
 8004252:	b2db      	uxtb	r3, r3
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	3a01      	subs	r2, #1
 8004258:	60fa      	str	r2, [r7, #12]
 800425a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800425e:	b2da      	uxtb	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	09db      	lsrs	r3, r3, #7
 8004268:	b2db      	uxtb	r3, r3
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	3a01      	subs	r2, #1
 800426e:	60fa      	str	r2, [r7, #12]
 8004270:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004274:	b2da      	uxtb	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	3a01      	subs	r2, #1
 8004282:	60fa      	str	r2, [r7, #12]
 8004284:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004288:	b2da      	uxtb	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800428e:	4b1f      	ldr	r3, [pc, #124]	; (800430c <_SendPacket+0x274>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004294:	4b1c      	ldr	r3, [pc, #112]	; (8004308 <_SendPacket+0x270>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	623b      	str	r3, [r7, #32]
 80042a6:	e00b      	b.n	80042c0 <_SendPacket+0x228>
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	1c59      	adds	r1, r3, #1
 80042b0:	6279      	str	r1, [r7, #36]	; 0x24
 80042b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	09db      	lsrs	r3, r3, #7
 80042be:	623b      	str	r3, [r7, #32]
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	2b7f      	cmp	r3, #127	; 0x7f
 80042c4:	d8f0      	bhi.n	80042a8 <_SendPacket+0x210>
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	627a      	str	r2, [r7, #36]	; 0x24
 80042cc:	6a3a      	ldr	r2, [r7, #32]
 80042ce:	b2d2      	uxtb	r2, r2
 80042d0:	701a      	strb	r2, [r3, #0]
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80042d6:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <_SendPacket+0x270>)
 80042d8:	785b      	ldrb	r3, [r3, #1]
 80042da:	4618      	mov	r0, r3
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	461a      	mov	r2, r3
 80042e4:	68f9      	ldr	r1, [r7, #12]
 80042e6:	f7fb ff7b 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80042ea:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80042f2:	4a05      	ldr	r2, [pc, #20]	; (8004308 <_SendPacket+0x270>)
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	60d3      	str	r3, [r2, #12]
 80042f8:	e00f      	b.n	800431a <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80042fa:	4b03      	ldr	r3, [pc, #12]	; (8004308 <_SendPacket+0x270>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	3301      	adds	r3, #1
 8004300:	b2da      	uxtb	r2, r3
 8004302:	4b01      	ldr	r3, [pc, #4]	; (8004308 <_SendPacket+0x270>)
 8004304:	701a      	strb	r2, [r3, #0]
 8004306:	e008      	b.n	800431a <_SendPacket+0x282>
 8004308:	2001430c 	.word	0x2001430c
 800430c:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004310:	bf00      	nop
 8004312:	e002      	b.n	800431a <_SendPacket+0x282>
      goto SendDone;
 8004314:	bf00      	nop
 8004316:	e000      	b.n	800431a <_SendPacket+0x282>
      goto SendDone;
 8004318:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800431a:	4b14      	ldr	r3, [pc, #80]	; (800436c <_SendPacket+0x2d4>)
 800431c:	7e1b      	ldrb	r3, [r3, #24]
 800431e:	4619      	mov	r1, r3
 8004320:	4a13      	ldr	r2, [pc, #76]	; (8004370 <_SendPacket+0x2d8>)
 8004322:	460b      	mov	r3, r1
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	440b      	add	r3, r1
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4413      	add	r3, r2
 800432c:	336c      	adds	r3, #108	; 0x6c
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b0e      	ldr	r3, [pc, #56]	; (800436c <_SendPacket+0x2d4>)
 8004332:	7e1b      	ldrb	r3, [r3, #24]
 8004334:	4618      	mov	r0, r3
 8004336:	490e      	ldr	r1, [pc, #56]	; (8004370 <_SendPacket+0x2d8>)
 8004338:	4603      	mov	r3, r0
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	4403      	add	r3, r0
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	440b      	add	r3, r1
 8004342:	3370      	adds	r3, #112	; 0x70
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d00b      	beq.n	8004362 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800434a:	4b08      	ldr	r3, [pc, #32]	; (800436c <_SendPacket+0x2d4>)
 800434c:	789b      	ldrb	r3, [r3, #2]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d107      	bne.n	8004362 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004352:	4b06      	ldr	r3, [pc, #24]	; (800436c <_SendPacket+0x2d4>)
 8004354:	2201      	movs	r2, #1
 8004356:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004358:	f7ff fdbc 	bl	8003ed4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800435c:	4b03      	ldr	r3, [pc, #12]	; (800436c <_SendPacket+0x2d4>)
 800435e:	2200      	movs	r2, #0
 8004360:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004362:	bf00      	nop
 8004364:	3728      	adds	r7, #40	; 0x28
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	2001430c 	.word	0x2001430c
 8004370:	20012e4c 	.word	0x20012e4c

08004374 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004374:	b580      	push	{r7, lr}
 8004376:	b08a      	sub	sp, #40	; 0x28
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	3301      	adds	r3, #1
 800438a:	2b80      	cmp	r3, #128	; 0x80
 800438c:	d80a      	bhi.n	80043a4 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	1c59      	adds	r1, r3, #1
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6051      	str	r1, [r2, #4]
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	2b80      	cmp	r3, #128	; 0x80
 80043aa:	d15a      	bne.n	8004462 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	623b      	str	r3, [r7, #32]
 80043cc:	e00b      	b.n	80043e6 <_StoreChar+0x72>
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	1c59      	adds	r1, r3, #1
 80043d6:	6279      	str	r1, [r7, #36]	; 0x24
 80043d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	701a      	strb	r2, [r3, #0]
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	09db      	lsrs	r3, r3, #7
 80043e4:	623b      	str	r3, [r7, #32]
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	2b7f      	cmp	r3, #127	; 0x7f
 80043ea:	d8f0      	bhi.n	80043ce <_StoreChar+0x5a>
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	627a      	str	r2, [r7, #36]	; 0x24
 80043f2:	6a3a      	ldr	r2, [r7, #32]
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	701a      	strb	r2, [r3, #0]
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	61fb      	str	r3, [r7, #28]
 8004400:	2300      	movs	r3, #0
 8004402:	61bb      	str	r3, [r7, #24]
 8004404:	e00b      	b.n	800441e <_StoreChar+0xaa>
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	b2da      	uxtb	r2, r3
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	1c59      	adds	r1, r3, #1
 800440e:	61f9      	str	r1, [r7, #28]
 8004410:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	701a      	strb	r2, [r3, #0]
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	09db      	lsrs	r3, r3, #7
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	2b7f      	cmp	r3, #127	; 0x7f
 8004422:	d8f0      	bhi.n	8004406 <_StoreChar+0x92>
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	61fa      	str	r2, [r7, #28]
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	701a      	strb	r2, [r3, #0]
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	221a      	movs	r2, #26
 800443a:	6939      	ldr	r1, [r7, #16]
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fe2b 	bl	8004098 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff fd38 	bl	8003ebc <_PreparePacket>
 800444c:	4602      	mov	r2, r0
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	611a      	str	r2, [r3, #16]
  }
}
 8004462:	bf00      	nop
 8004464:	3728      	adds	r7, #40	; 0x28
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800446c:	b580      	push	{r7, lr}
 800446e:	b08a      	sub	sp, #40	; 0x28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800447e:	2301      	movs	r3, #1
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004482:	2301      	movs	r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004486:	e007      	b.n	8004498 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004488:	6a3a      	ldr	r2, [r7, #32]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004490:	623b      	str	r3, [r7, #32]
    Width++;
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	3301      	adds	r3, #1
 8004496:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004498:	6a3a      	ldr	r2, [r7, #32]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	429a      	cmp	r2, r3
 800449e:	d2f3      	bcs.n	8004488 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d901      	bls.n	80044ac <_PrintUnsigned+0x40>
    Width = NumDigits;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80044ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d11f      	bne.n	80044f6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01c      	beq.n	80044f6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80044bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <_PrintUnsigned+0x66>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <_PrintUnsigned+0x66>
        c = '0';
 80044cc:	2330      	movs	r3, #48	; 0x30
 80044ce:	76fb      	strb	r3, [r7, #27]
 80044d0:	e001      	b.n	80044d6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80044d2:	2320      	movs	r3, #32
 80044d4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044d6:	e007      	b.n	80044e8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	3b01      	subs	r3, #1
 80044dc:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80044de:	7efb      	ldrb	r3, [r7, #27]
 80044e0:	4619      	mov	r1, r3
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f7ff ff46 	bl	8004374 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <_PrintUnsigned+0x8a>
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d3f0      	bcc.n	80044d8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d903      	bls.n	8004504 <_PrintUnsigned+0x98>
      NumDigits--;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	3b01      	subs	r3, #1
 8004500:	603b      	str	r3, [r7, #0]
 8004502:	e009      	b.n	8004518 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	fbb2 f3f3 	udiv	r3, r2, r3
 800450c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	429a      	cmp	r2, r3
 8004514:	d200      	bcs.n	8004518 <_PrintUnsigned+0xac>
        break;
 8004516:	e005      	b.n	8004524 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	fb02 f303 	mul.w	r3, r2, r3
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004522:	e7e8      	b.n	80044f6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	fbb2 f3f3 	udiv	r3, r2, r3
 800452c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004532:	fb02 f303 	mul.w	r3, r2, r3
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800453c:	4a15      	ldr	r2, [pc, #84]	; (8004594 <_PrintUnsigned+0x128>)
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	4413      	add	r3, r2
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	4619      	mov	r1, r3
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f7ff ff14 	bl	8004374 <_StoreChar>
    Digit /= Base;
 800454c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	fbb2 f3f3 	udiv	r3, r2, r3
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e3      	bne.n	8004524 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800455c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d011      	beq.n	800458a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00e      	beq.n	800458a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800456c:	e006      	b.n	800457c <_PrintUnsigned+0x110>
        FieldWidth--;
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	3b01      	subs	r3, #1
 8004572:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004574:	2120      	movs	r1, #32
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f7ff fefc 	bl	8004374 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <_PrintUnsigned+0x11e>
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	429a      	cmp	r2, r3
 8004588:	d3f1      	bcc.n	800456e <_PrintUnsigned+0x102>
      }
    }
  }
}
 800458a:	bf00      	nop
 800458c:	3728      	adds	r7, #40	; 0x28
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	08005a70 	.word	0x08005a70

08004598 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af02      	add	r7, sp, #8
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	bfb8      	it	lt
 80045ac:	425b      	neglt	r3, r3
 80045ae:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80045b0:	2301      	movs	r3, #1
 80045b2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80045b4:	e007      	b.n	80045c6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80045be:	613b      	str	r3, [r7, #16]
    Width++;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	3301      	adds	r3, #1
 80045c4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	daf3      	bge.n	80045b6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d901      	bls.n	80045da <_PrintInt+0x42>
    Width = NumDigits;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <_PrintInt+0x5e>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	db04      	blt.n	80045f0 <_PrintInt+0x58>
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <_PrintInt+0x5e>
    FieldWidth--;
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <_PrintInt+0x6e>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d016      	beq.n	8004634 <_PrintInt+0x9c>
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d111      	bne.n	8004634 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00e      	beq.n	8004634 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004616:	e006      	b.n	8004626 <_PrintInt+0x8e>
        FieldWidth--;
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	3b01      	subs	r3, #1
 800461c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800461e:	2120      	movs	r1, #32
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f7ff fea7 	bl	8004374 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <_PrintInt+0x9c>
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	429a      	cmp	r2, r3
 8004632:	d3f1      	bcc.n	8004618 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	da07      	bge.n	800464a <_PrintInt+0xb2>
    v = -v;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	425b      	negs	r3, r3
 800463e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004640:	212d      	movs	r1, #45	; 0x2d
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f7ff fe96 	bl	8004374 <_StoreChar>
 8004648:	e008      	b.n	800465c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004654:	212b      	movs	r1, #43	; 0x2b
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7ff fe8c 	bl	8004374 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d019      	beq.n	800469a <_PrintInt+0x102>
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d114      	bne.n	800469a <_PrintInt+0x102>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d111      	bne.n	800469a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00e      	beq.n	800469a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800467c:	e006      	b.n	800468c <_PrintInt+0xf4>
        FieldWidth--;
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	3b01      	subs	r3, #1
 8004682:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004684:	2130      	movs	r1, #48	; 0x30
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f7ff fe74 	bl	8004374 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <_PrintInt+0x102>
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	429a      	cmp	r2, r3
 8004698:	d3f1      	bcc.n	800467e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f7ff fedf 	bl	800446c <_PrintUnsigned>
}
 80046ae:	bf00      	nop
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
	...

080046b8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b098      	sub	sp, #96	; 0x60
 80046bc:	af02      	add	r7, sp, #8
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80046c4:	f3ef 8311 	mrs	r3, BASEPRI
 80046c8:	f04f 0120 	mov.w	r1, #32
 80046cc:	f381 8811 	msr	BASEPRI, r1
 80046d0:	633b      	str	r3, [r7, #48]	; 0x30
 80046d2:	48b7      	ldr	r0, [pc, #732]	; (80049b0 <_VPrintTarget+0x2f8>)
 80046d4:	f7ff fbf2 	bl	8003ebc <_PreparePacket>
 80046d8:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80046da:	4bb5      	ldr	r3, [pc, #724]	; (80049b0 <_VPrintTarget+0x2f8>)
 80046dc:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80046de:	2300      	movs	r3, #0
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80046e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	3301      	adds	r3, #1
 80046ea:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3301      	adds	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80046fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 8183 	beq.w	8004a0e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004708:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800470c:	2b25      	cmp	r3, #37	; 0x25
 800470e:	f040 8170 	bne.w	80049f2 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004712:	2300      	movs	r3, #0
 8004714:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004716:	2301      	movs	r3, #1
 8004718:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004722:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004726:	3b23      	subs	r3, #35	; 0x23
 8004728:	2b0d      	cmp	r3, #13
 800472a:	d83f      	bhi.n	80047ac <_VPrintTarget+0xf4>
 800472c:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <_VPrintTarget+0x7c>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	0800479d 	.word	0x0800479d
 8004738:	080047ad 	.word	0x080047ad
 800473c:	080047ad 	.word	0x080047ad
 8004740:	080047ad 	.word	0x080047ad
 8004744:	080047ad 	.word	0x080047ad
 8004748:	080047ad 	.word	0x080047ad
 800474c:	080047ad 	.word	0x080047ad
 8004750:	080047ad 	.word	0x080047ad
 8004754:	0800478d 	.word	0x0800478d
 8004758:	080047ad 	.word	0x080047ad
 800475c:	0800476d 	.word	0x0800476d
 8004760:	080047ad 	.word	0x080047ad
 8004764:	080047ad 	.word	0x080047ad
 8004768:	0800477d 	.word	0x0800477d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800476c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800476e:	f043 0301 	orr.w	r3, r3, #1
 8004772:	64bb      	str	r3, [r7, #72]	; 0x48
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	3301      	adds	r3, #1
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	e01a      	b.n	80047b2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800477c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800477e:	f043 0302 	orr.w	r3, r3, #2
 8004782:	64bb      	str	r3, [r7, #72]	; 0x48
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	3301      	adds	r3, #1
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	e012      	b.n	80047b2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800478c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800478e:	f043 0304 	orr.w	r3, r3, #4
 8004792:	64bb      	str	r3, [r7, #72]	; 0x48
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3301      	adds	r3, #1
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	e00a      	b.n	80047b2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800479c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800479e:	f043 0308 	orr.w	r3, r3, #8
 80047a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3301      	adds	r3, #1
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	e002      	b.n	80047b2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80047ac:	2300      	movs	r3, #0
 80047ae:	653b      	str	r3, [r7, #80]	; 0x50
 80047b0:	bf00      	nop
        }
      } while (v);
 80047b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1b0      	bne.n	800471a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80047b8:	2300      	movs	r3, #0
 80047ba:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80047c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047c8:	2b2f      	cmp	r3, #47	; 0x2f
 80047ca:	d912      	bls.n	80047f2 <_VPrintTarget+0x13a>
 80047cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047d0:	2b39      	cmp	r3, #57	; 0x39
 80047d2:	d80e      	bhi.n	80047f2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3301      	adds	r3, #1
 80047d8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80047da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	461a      	mov	r2, r3
 80047e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047ea:	4413      	add	r3, r2
 80047ec:	3b30      	subs	r3, #48	; 0x30
 80047ee:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80047f0:	e7e4      	b.n	80047bc <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80047f2:	2300      	movs	r3, #0
 80047f4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80047fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004802:	2b2e      	cmp	r3, #46	; 0x2e
 8004804:	d11d      	bne.n	8004842 <_VPrintTarget+0x18a>
        sFormat++;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	3301      	adds	r3, #1
 800480a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004814:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004818:	2b2f      	cmp	r3, #47	; 0x2f
 800481a:	d912      	bls.n	8004842 <_VPrintTarget+0x18a>
 800481c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004820:	2b39      	cmp	r3, #57	; 0x39
 8004822:	d80e      	bhi.n	8004842 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3301      	adds	r3, #1
 8004828:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800482a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	461a      	mov	r2, r3
 8004836:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800483a:	4413      	add	r3, r2
 800483c:	3b30      	subs	r3, #48	; 0x30
 800483e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004840:	e7e4      	b.n	800480c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800484a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800484e:	2b6c      	cmp	r3, #108	; 0x6c
 8004850:	d003      	beq.n	800485a <_VPrintTarget+0x1a2>
 8004852:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004856:	2b68      	cmp	r3, #104	; 0x68
 8004858:	d107      	bne.n	800486a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3301      	adds	r3, #1
 8004866:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004868:	e7ef      	b.n	800484a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800486a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800486e:	2b25      	cmp	r3, #37	; 0x25
 8004870:	f000 80b3 	beq.w	80049da <_VPrintTarget+0x322>
 8004874:	2b25      	cmp	r3, #37	; 0x25
 8004876:	f2c0 80b7 	blt.w	80049e8 <_VPrintTarget+0x330>
 800487a:	2b78      	cmp	r3, #120	; 0x78
 800487c:	f300 80b4 	bgt.w	80049e8 <_VPrintTarget+0x330>
 8004880:	2b58      	cmp	r3, #88	; 0x58
 8004882:	f2c0 80b1 	blt.w	80049e8 <_VPrintTarget+0x330>
 8004886:	3b58      	subs	r3, #88	; 0x58
 8004888:	2b20      	cmp	r3, #32
 800488a:	f200 80ad 	bhi.w	80049e8 <_VPrintTarget+0x330>
 800488e:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <_VPrintTarget+0x1dc>)
 8004890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004894:	0800498b 	.word	0x0800498b
 8004898:	080049e9 	.word	0x080049e9
 800489c:	080049e9 	.word	0x080049e9
 80048a0:	080049e9 	.word	0x080049e9
 80048a4:	080049e9 	.word	0x080049e9
 80048a8:	080049e9 	.word	0x080049e9
 80048ac:	080049e9 	.word	0x080049e9
 80048b0:	080049e9 	.word	0x080049e9
 80048b4:	080049e9 	.word	0x080049e9
 80048b8:	080049e9 	.word	0x080049e9
 80048bc:	080049e9 	.word	0x080049e9
 80048c0:	08004919 	.word	0x08004919
 80048c4:	0800493f 	.word	0x0800493f
 80048c8:	080049e9 	.word	0x080049e9
 80048cc:	080049e9 	.word	0x080049e9
 80048d0:	080049e9 	.word	0x080049e9
 80048d4:	080049e9 	.word	0x080049e9
 80048d8:	080049e9 	.word	0x080049e9
 80048dc:	080049e9 	.word	0x080049e9
 80048e0:	080049e9 	.word	0x080049e9
 80048e4:	080049e9 	.word	0x080049e9
 80048e8:	080049e9 	.word	0x080049e9
 80048ec:	080049e9 	.word	0x080049e9
 80048f0:	080049e9 	.word	0x080049e9
 80048f4:	080049b5 	.word	0x080049b5
 80048f8:	080049e9 	.word	0x080049e9
 80048fc:	080049e9 	.word	0x080049e9
 8004900:	080049e9 	.word	0x080049e9
 8004904:	080049e9 	.word	0x080049e9
 8004908:	08004965 	.word	0x08004965
 800490c:	080049e9 	.word	0x080049e9
 8004910:	080049e9 	.word	0x080049e9
 8004914:	0800498b 	.word	0x0800498b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	1d19      	adds	r1, r3, #4
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6011      	str	r1, [r2, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800492c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004930:	f107 0314 	add.w	r3, r7, #20
 8004934:	4611      	mov	r1, r2
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff fd1c 	bl	8004374 <_StoreChar>
        break;
 800493c:	e055      	b.n	80049ea <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	1d19      	adds	r1, r3, #4
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6011      	str	r1, [r2, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800494c:	f107 0014 	add.w	r0, r7, #20
 8004950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004952:	9301      	str	r3, [sp, #4]
 8004954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800495a:	220a      	movs	r2, #10
 800495c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800495e:	f7ff fe1b 	bl	8004598 <_PrintInt>
        break;
 8004962:	e042      	b.n	80049ea <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	1d19      	adds	r1, r3, #4
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6011      	str	r1, [r2, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004972:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004974:	f107 0014 	add.w	r0, r7, #20
 8004978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800497a:	9301      	str	r3, [sp, #4]
 800497c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004982:	220a      	movs	r2, #10
 8004984:	f7ff fd72 	bl	800446c <_PrintUnsigned>
        break;
 8004988:	e02f      	b.n	80049ea <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	1d19      	adds	r1, r3, #4
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6011      	str	r1, [r2, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004998:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800499a:	f107 0014 	add.w	r0, r7, #20
 800499e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a0:	9301      	str	r3, [sp, #4]
 80049a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a8:	2210      	movs	r2, #16
 80049aa:	f7ff fd5f 	bl	800446c <_PrintUnsigned>
        break;
 80049ae:	e01c      	b.n	80049ea <_VPrintTarget+0x332>
 80049b0:	2001433c 	.word	0x2001433c
      case 'p':
        v = va_arg(*pParamList, int);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	1d19      	adds	r1, r3, #4
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6011      	str	r1, [r2, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80049c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80049c4:	f107 0014 	add.w	r0, r7, #20
 80049c8:	2300      	movs	r3, #0
 80049ca:	9301      	str	r3, [sp, #4]
 80049cc:	2308      	movs	r3, #8
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	2308      	movs	r3, #8
 80049d2:	2210      	movs	r2, #16
 80049d4:	f7ff fd4a 	bl	800446c <_PrintUnsigned>
        break;
 80049d8:	e007      	b.n	80049ea <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80049da:	f107 0314 	add.w	r3, r7, #20
 80049de:	2125      	movs	r1, #37	; 0x25
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fcc7 	bl	8004374 <_StoreChar>
        break;
 80049e6:	e000      	b.n	80049ea <_VPrintTarget+0x332>
      default:
        break;
 80049e8:	bf00      	nop
      }
      sFormat++;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3301      	adds	r3, #1
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e007      	b.n	8004a02 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80049f2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80049f6:	f107 0314 	add.w	r3, r7, #20
 80049fa:	4611      	mov	r1, r2
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff fcb9 	bl	8004374 <_StoreChar>
    }
  } while (*sFormat);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f47f ae72 	bne.w	80046f0 <_VPrintTarget+0x38>
 8004a0c:	e000      	b.n	8004a10 <_VPrintTarget+0x358>
      break;
 8004a0e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d041      	beq.n	8004a9a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	643b      	str	r3, [r7, #64]	; 0x40
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a26:	e00b      	b.n	8004a40 <_VPrintTarget+0x388>
 8004a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a2e:	1c59      	adds	r1, r3, #1
 8004a30:	6439      	str	r1, [r7, #64]	; 0x40
 8004a32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]
 8004a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a3c:	09db      	lsrs	r3, r3, #7
 8004a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a42:	2b7f      	cmp	r3, #127	; 0x7f
 8004a44:	d8f0      	bhi.n	8004a28 <_VPrintTarget+0x370>
 8004a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	643a      	str	r2, [r7, #64]	; 0x40
 8004a4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a54:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a5e:	e00b      	b.n	8004a78 <_VPrintTarget+0x3c0>
 8004a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a66:	1c59      	adds	r1, r3, #1
 8004a68:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a74:	09db      	lsrs	r3, r3, #7
 8004a76:	637b      	str	r3, [r7, #52]	; 0x34
 8004a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a7c:	d8f0      	bhi.n	8004a60 <_VPrintTarget+0x3a8>
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	701a      	strb	r2, [r3, #0]
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	69b9      	ldr	r1, [r7, #24]
 8004a92:	221a      	movs	r2, #26
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff faff 	bl	8004098 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004aa0:	bf00      	nop
 8004aa2:	3758      	adds	r7, #88	; 0x58
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004abc:	4917      	ldr	r1, [pc, #92]	; (8004b1c <SEGGER_SYSVIEW_Init+0x74>)
 8004abe:	4818      	ldr	r0, [pc, #96]	; (8004b20 <SEGGER_SYSVIEW_Init+0x78>)
 8004ac0:	f7ff f8dc 	bl	8003c7c <SEGGER_RTT_AllocUpBuffer>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004aca:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004acc:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ace:	785a      	ldrb	r2, [r3, #1]
 8004ad0:	4b14      	ldr	r3, [pc, #80]	; (8004b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ad2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004ad4:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ad6:	7e1b      	ldrb	r3, [r3, #24]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	2300      	movs	r3, #0
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	2308      	movs	r3, #8
 8004ae0:	4a11      	ldr	r2, [pc, #68]	; (8004b28 <SEGGER_SYSVIEW_Init+0x80>)
 8004ae2:	490f      	ldr	r1, [pc, #60]	; (8004b20 <SEGGER_SYSVIEW_Init+0x78>)
 8004ae4:	f7ff f94e 	bl	8003d84 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004ae8:	4b0e      	ldr	r3, [pc, #56]	; (8004b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004aee:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <SEGGER_SYSVIEW_Init+0x84>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a0c      	ldr	r2, [pc, #48]	; (8004b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004af4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004af6:	4a0b      	ldr	r2, [pc, #44]	; (8004b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004afc:	4a09      	ldr	r2, [pc, #36]	; (8004b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004b02:	4a08      	ldr	r2, [pc, #32]	; (8004b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004b08:	4a06      	ldr	r2, [pc, #24]	; (8004b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004b0e:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004b14:	bf00      	nop
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20013304 	.word	0x20013304
 8004b20:	08005a28 	.word	0x08005a28
 8004b24:	2001430c 	.word	0x2001430c
 8004b28:	20014304 	.word	0x20014304
 8004b2c:	e0001004 	.word	0xe0001004

08004b30 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004b38:	4a04      	ldr	r2, [pc, #16]	; (8004b4c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6113      	str	r3, [r2, #16]
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	2001430c 	.word	0x2001430c

08004b50 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b58:	f3ef 8311 	mrs	r3, BASEPRI
 8004b5c:	f04f 0120 	mov.w	r1, #32
 8004b60:	f381 8811 	msr	BASEPRI, r1
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	4808      	ldr	r0, [pc, #32]	; (8004b88 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004b68:	f7ff f9a8 	bl	8003ebc <_PreparePacket>
 8004b6c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	68b8      	ldr	r0, [r7, #8]
 8004b74:	f7ff fa90 	bl	8004098 <_SendPacket>
  RECORD_END();
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f383 8811 	msr	BASEPRI, r3
}
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	2001433c 	.word	0x2001433c

08004b8c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b96:	f3ef 8311 	mrs	r3, BASEPRI
 8004b9a:	f04f 0120 	mov.w	r1, #32
 8004b9e:	f381 8811 	msr	BASEPRI, r1
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	4816      	ldr	r0, [pc, #88]	; (8004c00 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004ba6:	f7ff f989 	bl	8003ebc <_PreparePacket>
 8004baa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	61fb      	str	r3, [r7, #28]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	61bb      	str	r3, [r7, #24]
 8004bb8:	e00b      	b.n	8004bd2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	1c59      	adds	r1, r3, #1
 8004bc2:	61f9      	str	r1, [r7, #28]
 8004bc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	701a      	strb	r2, [r3, #0]
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	09db      	lsrs	r3, r3, #7
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004bd6:	d8f0      	bhi.n	8004bba <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	61fa      	str	r2, [r7, #28]
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	68f9      	ldr	r1, [r7, #12]
 8004bec:	6938      	ldr	r0, [r7, #16]
 8004bee:	f7ff fa53 	bl	8004098 <_SendPacket>
  RECORD_END();
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f383 8811 	msr	BASEPRI, r3
}
 8004bf8:	bf00      	nop
 8004bfa:	3720      	adds	r7, #32
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	2001433c 	.word	0x2001433c

08004c04 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08c      	sub	sp, #48	; 0x30
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c10:	f3ef 8311 	mrs	r3, BASEPRI
 8004c14:	f04f 0120 	mov.w	r1, #32
 8004c18:	f381 8811 	msr	BASEPRI, r1
 8004c1c:	61fb      	str	r3, [r7, #28]
 8004c1e:	4825      	ldr	r0, [pc, #148]	; (8004cb4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004c20:	f7ff f94c 	bl	8003ebc <_PreparePacket>
 8004c24:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c32:	e00b      	b.n	8004c4c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3a:	1c59      	adds	r1, r3, #1
 8004c3c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	09db      	lsrs	r3, r3, #7
 8004c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c50:	d8f0      	bhi.n	8004c34 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c60:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	623b      	str	r3, [r7, #32]
 8004c6a:	e00b      	b.n	8004c84 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	1c59      	adds	r1, r3, #1
 8004c74:	6279      	str	r1, [r7, #36]	; 0x24
 8004c76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	09db      	lsrs	r3, r3, #7
 8004c82:	623b      	str	r3, [r7, #32]
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	2b7f      	cmp	r3, #127	; 0x7f
 8004c88:	d8f0      	bhi.n	8004c6c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	627a      	str	r2, [r7, #36]	; 0x24
 8004c90:	6a3a      	ldr	r2, [r7, #32]
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	6979      	ldr	r1, [r7, #20]
 8004c9e:	69b8      	ldr	r0, [r7, #24]
 8004ca0:	f7ff f9fa 	bl	8004098 <_SendPacket>
  RECORD_END();
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	f383 8811 	msr	BASEPRI, r3
}
 8004caa:	bf00      	nop
 8004cac:	3730      	adds	r7, #48	; 0x30
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	2001433c 	.word	0x2001433c

08004cb8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08c      	sub	sp, #48	; 0x30
 8004cbc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004cbe:	4b58      	ldr	r3, [pc, #352]	; (8004e20 <SEGGER_SYSVIEW_Start+0x168>)
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004cc4:	f3ef 8311 	mrs	r3, BASEPRI
 8004cc8:	f04f 0120 	mov.w	r1, #32
 8004ccc:	f381 8811 	msr	BASEPRI, r1
 8004cd0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004cd2:	4b53      	ldr	r3, [pc, #332]	; (8004e20 <SEGGER_SYSVIEW_Start+0x168>)
 8004cd4:	785b      	ldrb	r3, [r3, #1]
 8004cd6:	220a      	movs	r2, #10
 8004cd8:	4952      	ldr	r1, [pc, #328]	; (8004e24 <SEGGER_SYSVIEW_Start+0x16c>)
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fb fa80 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004ce6:	200a      	movs	r0, #10
 8004ce8:	f7ff ff32 	bl	8004b50 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004cec:	f3ef 8311 	mrs	r3, BASEPRI
 8004cf0:	f04f 0120 	mov.w	r1, #32
 8004cf4:	f381 8811 	msr	BASEPRI, r1
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	484b      	ldr	r0, [pc, #300]	; (8004e28 <SEGGER_SYSVIEW_Start+0x170>)
 8004cfc:	f7ff f8de 	bl	8003ebc <_PreparePacket>
 8004d00:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d0a:	4b45      	ldr	r3, [pc, #276]	; (8004e20 <SEGGER_SYSVIEW_Start+0x168>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d10:	e00b      	b.n	8004d2a <SEGGER_SYSVIEW_Start+0x72>
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d18:	1c59      	adds	r1, r3, #1
 8004d1a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	09db      	lsrs	r3, r3, #7
 8004d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d2e:	d8f0      	bhi.n	8004d12 <SEGGER_SYSVIEW_Start+0x5a>
 8004d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	701a      	strb	r2, [r3, #0]
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
 8004d44:	4b36      	ldr	r3, [pc, #216]	; (8004e20 <SEGGER_SYSVIEW_Start+0x168>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	623b      	str	r3, [r7, #32]
 8004d4a:	e00b      	b.n	8004d64 <SEGGER_SYSVIEW_Start+0xac>
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	1c59      	adds	r1, r3, #1
 8004d54:	6279      	str	r1, [r7, #36]	; 0x24
 8004d56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	09db      	lsrs	r3, r3, #7
 8004d62:	623b      	str	r3, [r7, #32]
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	2b7f      	cmp	r3, #127	; 0x7f
 8004d68:	d8f0      	bhi.n	8004d4c <SEGGER_SYSVIEW_Start+0x94>
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	627a      	str	r2, [r7, #36]	; 0x24
 8004d70:	6a3a      	ldr	r2, [r7, #32]
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	701a      	strb	r2, [r3, #0]
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	61fb      	str	r3, [r7, #28]
 8004d7e:	4b28      	ldr	r3, [pc, #160]	; (8004e20 <SEGGER_SYSVIEW_Start+0x168>)
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	e00b      	b.n	8004d9e <SEGGER_SYSVIEW_Start+0xe6>
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	1c59      	adds	r1, r3, #1
 8004d8e:	61f9      	str	r1, [r7, #28]
 8004d90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	701a      	strb	r2, [r3, #0]
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	09db      	lsrs	r3, r3, #7
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b7f      	cmp	r3, #127	; 0x7f
 8004da2:	d8f0      	bhi.n	8004d86 <SEGGER_SYSVIEW_Start+0xce>
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	61fa      	str	r2, [r7, #28]
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	701a      	strb	r2, [r3, #0]
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	2300      	movs	r3, #0
 8004dba:	613b      	str	r3, [r7, #16]
 8004dbc:	e00b      	b.n	8004dd6 <SEGGER_SYSVIEW_Start+0x11e>
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	1c59      	adds	r1, r3, #1
 8004dc6:	6179      	str	r1, [r7, #20]
 8004dc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	701a      	strb	r2, [r3, #0]
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	09db      	lsrs	r3, r3, #7
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b7f      	cmp	r3, #127	; 0x7f
 8004dda:	d8f0      	bhi.n	8004dbe <SEGGER_SYSVIEW_Start+0x106>
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	617a      	str	r2, [r7, #20]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	701a      	strb	r2, [r3, #0]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004dec:	2218      	movs	r2, #24
 8004dee:	6839      	ldr	r1, [r7, #0]
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff f951 	bl	8004098 <_SendPacket>
      RECORD_END();
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004dfc:	4b08      	ldr	r3, [pc, #32]	; (8004e20 <SEGGER_SYSVIEW_Start+0x168>)
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <SEGGER_SYSVIEW_Start+0x168>)
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004e0a:	f000 f9eb 	bl	80051e4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004e0e:	f000 f9b1 	bl	8005174 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004e12:	f000 fc73 	bl	80056fc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004e16:	bf00      	nop
 8004e18:	3730      	adds	r7, #48	; 0x30
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	2001430c 	.word	0x2001430c
 8004e24:	08005a64 	.word	0x08005a64
 8004e28:	2001433c 	.word	0x2001433c

08004e2c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e32:	f3ef 8311 	mrs	r3, BASEPRI
 8004e36:	f04f 0120 	mov.w	r1, #32
 8004e3a:	f381 8811 	msr	BASEPRI, r1
 8004e3e:	607b      	str	r3, [r7, #4]
 8004e40:	480b      	ldr	r0, [pc, #44]	; (8004e70 <SEGGER_SYSVIEW_Stop+0x44>)
 8004e42:	f7ff f83b 	bl	8003ebc <_PreparePacket>
 8004e46:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004e48:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <SEGGER_SYSVIEW_Stop+0x48>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d007      	beq.n	8004e60 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004e50:	220b      	movs	r2, #11
 8004e52:	6839      	ldr	r1, [r7, #0]
 8004e54:	6838      	ldr	r0, [r7, #0]
 8004e56:	f7ff f91f 	bl	8004098 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004e5a:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <SEGGER_SYSVIEW_Stop+0x48>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f383 8811 	msr	BASEPRI, r3
}
 8004e66:	bf00      	nop
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	2001433c 	.word	0x2001433c
 8004e74:	2001430c 	.word	0x2001430c

08004e78 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08c      	sub	sp, #48	; 0x30
 8004e7c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e7e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e82:	f04f 0120 	mov.w	r1, #32
 8004e86:	f381 8811 	msr	BASEPRI, r1
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	4845      	ldr	r0, [pc, #276]	; (8004fa4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004e8e:	f7ff f815 	bl	8003ebc <_PreparePacket>
 8004e92:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e9c:	4b42      	ldr	r3, [pc, #264]	; (8004fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea2:	e00b      	b.n	8004ebc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eaa:	1c59      	adds	r1, r3, #1
 8004eac:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004eae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	09db      	lsrs	r3, r3, #7
 8004eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8004ec0:	d8f0      	bhi.n	8004ea4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed6:	4b34      	ldr	r3, [pc, #208]	; (8004fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	623b      	str	r3, [r7, #32]
 8004edc:	e00b      	b.n	8004ef6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	1c59      	adds	r1, r3, #1
 8004ee6:	6279      	str	r1, [r7, #36]	; 0x24
 8004ee8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	09db      	lsrs	r3, r3, #7
 8004ef4:	623b      	str	r3, [r7, #32]
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8004efa:	d8f0      	bhi.n	8004ede <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	627a      	str	r2, [r7, #36]	; 0x24
 8004f02:	6a3a      	ldr	r2, [r7, #32]
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	61fb      	str	r3, [r7, #28]
 8004f10:	4b25      	ldr	r3, [pc, #148]	; (8004fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	e00b      	b.n	8004f30 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	1c59      	adds	r1, r3, #1
 8004f20:	61f9      	str	r1, [r7, #28]
 8004f22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	09db      	lsrs	r3, r3, #7
 8004f2e:	61bb      	str	r3, [r7, #24]
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b7f      	cmp	r3, #127	; 0x7f
 8004f34:	d8f0      	bhi.n	8004f18 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	61fa      	str	r2, [r7, #28]
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	701a      	strb	r2, [r3, #0]
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	613b      	str	r3, [r7, #16]
 8004f4e:	e00b      	b.n	8004f68 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	1c59      	adds	r1, r3, #1
 8004f58:	6179      	str	r1, [r7, #20]
 8004f5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	09db      	lsrs	r3, r3, #7
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f6c:	d8f0      	bhi.n	8004f50 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	617a      	str	r2, [r7, #20]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004f7e:	2218      	movs	r2, #24
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	68b8      	ldr	r0, [r7, #8]
 8004f84:	f7ff f888 	bl	8004098 <_SendPacket>
  RECORD_END();
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004f8e:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004f96:	4b04      	ldr	r3, [pc, #16]	; (8004fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	4798      	blx	r3
  }
}
 8004f9c:	bf00      	nop
 8004f9e:	3730      	adds	r7, #48	; 0x30
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	2001433c 	.word	0x2001433c
 8004fa8:	2001430c 	.word	0x2001430c

08004fac <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b092      	sub	sp, #72	; 0x48
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004fb4:	f3ef 8311 	mrs	r3, BASEPRI
 8004fb8:	f04f 0120 	mov.w	r1, #32
 8004fbc:	f381 8811 	msr	BASEPRI, r1
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	486a      	ldr	r0, [pc, #424]	; (800516c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004fc4:	f7fe ff7a 	bl	8003ebc <_PreparePacket>
 8004fc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	4b66      	ldr	r3, [pc, #408]	; (8005170 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	643b      	str	r3, [r7, #64]	; 0x40
 8004fde:	e00b      	b.n	8004ff8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fe6:	1c59      	adds	r1, r3, #1
 8004fe8:	6479      	str	r1, [r7, #68]	; 0x44
 8004fea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff4:	09db      	lsrs	r3, r3, #7
 8004ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8004ffc:	d8f0      	bhi.n	8004fe0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	647a      	str	r2, [r7, #68]	; 0x44
 8005004:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800500c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	63bb      	str	r3, [r7, #56]	; 0x38
 8005018:	e00b      	b.n	8005032 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	b2da      	uxtb	r2, r3
 800501e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005020:	1c59      	adds	r1, r3, #1
 8005022:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005024:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502e:	09db      	lsrs	r3, r3, #7
 8005030:	63bb      	str	r3, [r7, #56]	; 0x38
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	2b7f      	cmp	r3, #127	; 0x7f
 8005036:	d8f0      	bhi.n	800501a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800503e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005046:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	4619      	mov	r1, r3
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f7fe fee3 	bl	8003e1c <_EncodeStr>
 8005056:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005058:	2209      	movs	r2, #9
 800505a:	68f9      	ldr	r1, [r7, #12]
 800505c:	6938      	ldr	r0, [r7, #16]
 800505e:	f7ff f81b 	bl	8004098 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	637b      	str	r3, [r7, #52]	; 0x34
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	4b40      	ldr	r3, [pc, #256]	; (8005170 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	633b      	str	r3, [r7, #48]	; 0x30
 8005076:	e00b      	b.n	8005090 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	b2da      	uxtb	r2, r3
 800507c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507e:	1c59      	adds	r1, r3, #1
 8005080:	6379      	str	r1, [r7, #52]	; 0x34
 8005082:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	09db      	lsrs	r3, r3, #7
 800508e:	633b      	str	r3, [r7, #48]	; 0x30
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	2b7f      	cmp	r3, #127	; 0x7f
 8005094:	d8f0      	bhi.n	8005078 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	637a      	str	r2, [r7, #52]	; 0x34
 800509c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b0:	e00b      	b.n	80050ca <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b8:	1c59      	adds	r1, r3, #1
 80050ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80050bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	09db      	lsrs	r3, r3, #7
 80050c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	2b7f      	cmp	r3, #127	; 0x7f
 80050ce:	d8f0      	bhi.n	80050b2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050de:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	623b      	str	r3, [r7, #32]
 80050ea:	e00b      	b.n	8005104 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	1c59      	adds	r1, r3, #1
 80050f4:	6279      	str	r1, [r7, #36]	; 0x24
 80050f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	09db      	lsrs	r3, r3, #7
 8005102:	623b      	str	r3, [r7, #32]
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	2b7f      	cmp	r3, #127	; 0x7f
 8005108:	d8f0      	bhi.n	80050ec <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	627a      	str	r2, [r7, #36]	; 0x24
 8005110:	6a3a      	ldr	r2, [r7, #32]
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	61fb      	str	r3, [r7, #28]
 800511e:	2300      	movs	r3, #0
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	e00b      	b.n	800513c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	b2da      	uxtb	r2, r3
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	1c59      	adds	r1, r3, #1
 800512c:	61f9      	str	r1, [r7, #28]
 800512e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	09db      	lsrs	r3, r3, #7
 800513a:	61bb      	str	r3, [r7, #24]
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	2b7f      	cmp	r3, #127	; 0x7f
 8005140:	d8f0      	bhi.n	8005124 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	61fa      	str	r2, [r7, #28]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	701a      	strb	r2, [r3, #0]
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005152:	2215      	movs	r2, #21
 8005154:	68f9      	ldr	r1, [r7, #12]
 8005156:	6938      	ldr	r0, [r7, #16]
 8005158:	f7fe ff9e 	bl	8004098 <_SendPacket>
  RECORD_END();
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f383 8811 	msr	BASEPRI, r3
}
 8005162:	bf00      	nop
 8005164:	3748      	adds	r7, #72	; 0x48
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	2001433c 	.word	0x2001433c
 8005170:	2001430c 	.word	0x2001430c

08005174 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005178:	4b07      	ldr	r3, [pc, #28]	; (8005198 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005180:	4b05      	ldr	r3, [pc, #20]	; (8005198 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800518a:	4b03      	ldr	r3, [pc, #12]	; (8005198 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	4798      	blx	r3
  }
}
 8005192:	bf00      	nop
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	2001430c 	.word	0x2001430c

0800519c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051a4:	f3ef 8311 	mrs	r3, BASEPRI
 80051a8:	f04f 0120 	mov.w	r1, #32
 80051ac:	f381 8811 	msr	BASEPRI, r1
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	480b      	ldr	r0, [pc, #44]	; (80051e0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80051b4:	f7fe fe82 	bl	8003ebc <_PreparePacket>
 80051b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051ba:	2280      	movs	r2, #128	; 0x80
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	6938      	ldr	r0, [r7, #16]
 80051c0:	f7fe fe2c 	bl	8003e1c <_EncodeStr>
 80051c4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80051c6:	220e      	movs	r2, #14
 80051c8:	68f9      	ldr	r1, [r7, #12]
 80051ca:	6938      	ldr	r0, [r7, #16]
 80051cc:	f7fe ff64 	bl	8004098 <_SendPacket>
  RECORD_END();
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f383 8811 	msr	BASEPRI, r3
}
 80051d6:	bf00      	nop
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	2001433c 	.word	0x2001433c

080051e4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80051ea:	4b15      	ldr	r3, [pc, #84]	; (8005240 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d01a      	beq.n	8005228 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80051f2:	4b13      	ldr	r3, [pc, #76]	; (8005240 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d015      	beq.n	8005228 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80051fc:	4b10      	ldr	r3, [pc, #64]	; (8005240 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4798      	blx	r3
 8005204:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005208:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800520a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	000a      	movs	r2, r1
 8005218:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800521a:	4613      	mov	r3, r2
 800521c:	461a      	mov	r2, r3
 800521e:	4621      	mov	r1, r4
 8005220:	200d      	movs	r0, #13
 8005222:	f7ff fcef 	bl	8004c04 <SEGGER_SYSVIEW_RecordU32x2>
 8005226:	e006      	b.n	8005236 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005228:	4b06      	ldr	r3, [pc, #24]	; (8005244 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4619      	mov	r1, r3
 800522e:	200c      	movs	r0, #12
 8005230:	f7ff fcac 	bl	8004b8c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	bd90      	pop	{r4, r7, pc}
 800523e:	bf00      	nop
 8005240:	2001430c 	.word	0x2001430c
 8005244:	e0001004 	.word	0xe0001004

08005248 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800524e:	f3ef 8311 	mrs	r3, BASEPRI
 8005252:	f04f 0120 	mov.w	r1, #32
 8005256:	f381 8811 	msr	BASEPRI, r1
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	4819      	ldr	r0, [pc, #100]	; (80052c4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800525e:	f7fe fe2d 	bl	8003ebc <_PreparePacket>
 8005262:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005268:	4b17      	ldr	r3, [pc, #92]	; (80052c8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005270:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	e00b      	b.n	8005294 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	b2da      	uxtb	r2, r3
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	1c59      	adds	r1, r3, #1
 8005284:	6179      	str	r1, [r7, #20]
 8005286:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	09db      	lsrs	r3, r3, #7
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	2b7f      	cmp	r3, #127	; 0x7f
 8005298:	d8f0      	bhi.n	800527c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	617a      	str	r2, [r7, #20]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80052aa:	2202      	movs	r2, #2
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	68b8      	ldr	r0, [r7, #8]
 80052b0:	f7fe fef2 	bl	8004098 <_SendPacket>
  RECORD_END();
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f383 8811 	msr	BASEPRI, r3
}
 80052ba:	bf00      	nop
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	2001433c 	.word	0x2001433c
 80052c8:	e000ed04 	.word	0xe000ed04

080052cc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80052d2:	f3ef 8311 	mrs	r3, BASEPRI
 80052d6:	f04f 0120 	mov.w	r1, #32
 80052da:	f381 8811 	msr	BASEPRI, r1
 80052de:	607b      	str	r3, [r7, #4]
 80052e0:	4807      	ldr	r0, [pc, #28]	; (8005300 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80052e2:	f7fe fdeb 	bl	8003ebc <_PreparePacket>
 80052e6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80052e8:	2203      	movs	r2, #3
 80052ea:	6839      	ldr	r1, [r7, #0]
 80052ec:	6838      	ldr	r0, [r7, #0]
 80052ee:	f7fe fed3 	bl	8004098 <_SendPacket>
  RECORD_END();
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f383 8811 	msr	BASEPRI, r3
}
 80052f8:	bf00      	nop
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	2001433c 	.word	0x2001433c

08005304 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800530a:	f3ef 8311 	mrs	r3, BASEPRI
 800530e:	f04f 0120 	mov.w	r1, #32
 8005312:	f381 8811 	msr	BASEPRI, r1
 8005316:	607b      	str	r3, [r7, #4]
 8005318:	4807      	ldr	r0, [pc, #28]	; (8005338 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800531a:	f7fe fdcf 	bl	8003ebc <_PreparePacket>
 800531e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005320:	2212      	movs	r2, #18
 8005322:	6839      	ldr	r1, [r7, #0]
 8005324:	6838      	ldr	r0, [r7, #0]
 8005326:	f7fe feb7 	bl	8004098 <_SendPacket>
  RECORD_END();
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f383 8811 	msr	BASEPRI, r3
}
 8005330:	bf00      	nop
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	2001433c 	.word	0x2001433c

0800533c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005342:	f3ef 8311 	mrs	r3, BASEPRI
 8005346:	f04f 0120 	mov.w	r1, #32
 800534a:	f381 8811 	msr	BASEPRI, r1
 800534e:	607b      	str	r3, [r7, #4]
 8005350:	4807      	ldr	r0, [pc, #28]	; (8005370 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005352:	f7fe fdb3 	bl	8003ebc <_PreparePacket>
 8005356:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005358:	2211      	movs	r2, #17
 800535a:	6839      	ldr	r1, [r7, #0]
 800535c:	6838      	ldr	r0, [r7, #0]
 800535e:	f7fe fe9b 	bl	8004098 <_SendPacket>
  RECORD_END();
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f383 8811 	msr	BASEPRI, r3
}
 8005368:	bf00      	nop
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	2001433c 	.word	0x2001433c

08005374 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005374:	b580      	push	{r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800537c:	f3ef 8311 	mrs	r3, BASEPRI
 8005380:	f04f 0120 	mov.w	r1, #32
 8005384:	f381 8811 	msr	BASEPRI, r1
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	4819      	ldr	r0, [pc, #100]	; (80053f0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800538c:	f7fe fd96 	bl	8003ebc <_PreparePacket>
 8005390:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005396:	4b17      	ldr	r3, [pc, #92]	; (80053f4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	61fb      	str	r3, [r7, #28]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	61bb      	str	r3, [r7, #24]
 80053a8:	e00b      	b.n	80053c2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	1c59      	adds	r1, r3, #1
 80053b2:	61f9      	str	r1, [r7, #28]
 80053b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053b8:	b2d2      	uxtb	r2, r2
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	09db      	lsrs	r3, r3, #7
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	2b7f      	cmp	r3, #127	; 0x7f
 80053c6:	d8f0      	bhi.n	80053aa <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	61fa      	str	r2, [r7, #28]
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80053d8:	2208      	movs	r2, #8
 80053da:	68f9      	ldr	r1, [r7, #12]
 80053dc:	6938      	ldr	r0, [r7, #16]
 80053de:	f7fe fe5b 	bl	8004098 <_SendPacket>
  RECORD_END();
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f383 8811 	msr	BASEPRI, r3
}
 80053e8:	bf00      	nop
 80053ea:	3720      	adds	r7, #32
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	2001433c 	.word	0x2001433c
 80053f4:	2001430c 	.word	0x2001430c

080053f8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005400:	f3ef 8311 	mrs	r3, BASEPRI
 8005404:	f04f 0120 	mov.w	r1, #32
 8005408:	f381 8811 	msr	BASEPRI, r1
 800540c:	617b      	str	r3, [r7, #20]
 800540e:	4819      	ldr	r0, [pc, #100]	; (8005474 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005410:	f7fe fd54 	bl	8003ebc <_PreparePacket>
 8005414:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800541a:	4b17      	ldr	r3, [pc, #92]	; (8005478 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	61fb      	str	r3, [r7, #28]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	61bb      	str	r3, [r7, #24]
 800542c:	e00b      	b.n	8005446 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	b2da      	uxtb	r2, r3
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	1c59      	adds	r1, r3, #1
 8005436:	61f9      	str	r1, [r7, #28]
 8005438:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	701a      	strb	r2, [r3, #0]
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	09db      	lsrs	r3, r3, #7
 8005444:	61bb      	str	r3, [r7, #24]
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	2b7f      	cmp	r3, #127	; 0x7f
 800544a:	d8f0      	bhi.n	800542e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	61fa      	str	r2, [r7, #28]
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	b2d2      	uxtb	r2, r2
 8005456:	701a      	strb	r2, [r3, #0]
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800545c:	2204      	movs	r2, #4
 800545e:	68f9      	ldr	r1, [r7, #12]
 8005460:	6938      	ldr	r0, [r7, #16]
 8005462:	f7fe fe19 	bl	8004098 <_SendPacket>
  RECORD_END();
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f383 8811 	msr	BASEPRI, r3
}
 800546c:	bf00      	nop
 800546e:	3720      	adds	r7, #32
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	2001433c 	.word	0x2001433c
 8005478:	2001430c 	.word	0x2001430c

0800547c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005484:	f3ef 8311 	mrs	r3, BASEPRI
 8005488:	f04f 0120 	mov.w	r1, #32
 800548c:	f381 8811 	msr	BASEPRI, r1
 8005490:	617b      	str	r3, [r7, #20]
 8005492:	4819      	ldr	r0, [pc, #100]	; (80054f8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005494:	f7fe fd12 	bl	8003ebc <_PreparePacket>
 8005498:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800549e:	4b17      	ldr	r3, [pc, #92]	; (80054fc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	61fb      	str	r3, [r7, #28]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	61bb      	str	r3, [r7, #24]
 80054b0:	e00b      	b.n	80054ca <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	1c59      	adds	r1, r3, #1
 80054ba:	61f9      	str	r1, [r7, #28]
 80054bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	701a      	strb	r2, [r3, #0]
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	09db      	lsrs	r3, r3, #7
 80054c8:	61bb      	str	r3, [r7, #24]
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	2b7f      	cmp	r3, #127	; 0x7f
 80054ce:	d8f0      	bhi.n	80054b2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	61fa      	str	r2, [r7, #28]
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	701a      	strb	r2, [r3, #0]
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80054e0:	2206      	movs	r2, #6
 80054e2:	68f9      	ldr	r1, [r7, #12]
 80054e4:	6938      	ldr	r0, [r7, #16]
 80054e6:	f7fe fdd7 	bl	8004098 <_SendPacket>
  RECORD_END();
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f383 8811 	msr	BASEPRI, r3
}
 80054f0:	bf00      	nop
 80054f2:	3720      	adds	r7, #32
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	2001433c 	.word	0x2001433c
 80054fc:	2001430c 	.word	0x2001430c

08005500 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005500:	b580      	push	{r7, lr}
 8005502:	b08a      	sub	sp, #40	; 0x28
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800550a:	f3ef 8311 	mrs	r3, BASEPRI
 800550e:	f04f 0120 	mov.w	r1, #32
 8005512:	f381 8811 	msr	BASEPRI, r1
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	4827      	ldr	r0, [pc, #156]	; (80055b8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800551a:	f7fe fccf 	bl	8003ebc <_PreparePacket>
 800551e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005524:	4b25      	ldr	r3, [pc, #148]	; (80055bc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	623b      	str	r3, [r7, #32]
 8005536:	e00b      	b.n	8005550 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	b2da      	uxtb	r2, r3
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	1c59      	adds	r1, r3, #1
 8005540:	6279      	str	r1, [r7, #36]	; 0x24
 8005542:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	09db      	lsrs	r3, r3, #7
 800554e:	623b      	str	r3, [r7, #32]
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	2b7f      	cmp	r3, #127	; 0x7f
 8005554:	d8f0      	bhi.n	8005538 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	627a      	str	r2, [r7, #36]	; 0x24
 800555c:	6a3a      	ldr	r2, [r7, #32]
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	61fb      	str	r3, [r7, #28]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	61bb      	str	r3, [r7, #24]
 800556e:	e00b      	b.n	8005588 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	b2da      	uxtb	r2, r3
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	1c59      	adds	r1, r3, #1
 8005578:	61f9      	str	r1, [r7, #28]
 800557a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	701a      	strb	r2, [r3, #0]
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	09db      	lsrs	r3, r3, #7
 8005586:	61bb      	str	r3, [r7, #24]
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	2b7f      	cmp	r3, #127	; 0x7f
 800558c:	d8f0      	bhi.n	8005570 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	61fa      	str	r2, [r7, #28]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800559e:	2207      	movs	r2, #7
 80055a0:	68f9      	ldr	r1, [r7, #12]
 80055a2:	6938      	ldr	r0, [r7, #16]
 80055a4:	f7fe fd78 	bl	8004098 <_SendPacket>
  RECORD_END();
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f383 8811 	msr	BASEPRI, r3
}
 80055ae:	bf00      	nop
 80055b0:	3728      	adds	r7, #40	; 0x28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	2001433c 	.word	0x2001433c
 80055bc:	2001430c 	.word	0x2001430c

080055c0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08c      	sub	sp, #48	; 0x30
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80055ca:	4b3b      	ldr	r3, [pc, #236]	; (80056b8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d06d      	beq.n	80056ae <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80055d2:	4b39      	ldr	r3, [pc, #228]	; (80056b8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80055d8:	2300      	movs	r3, #0
 80055da:	62bb      	str	r3, [r7, #40]	; 0x28
 80055dc:	e008      	b.n	80055f0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80055de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80055e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d007      	beq.n	80055fa <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ec:	3301      	adds	r3, #1
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d3f2      	bcc.n	80055de <SEGGER_SYSVIEW_SendModule+0x1e>
 80055f8:	e000      	b.n	80055fc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80055fa:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d055      	beq.n	80056ae <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005602:	f3ef 8311 	mrs	r3, BASEPRI
 8005606:	f04f 0120 	mov.w	r1, #32
 800560a:	f381 8811 	msr	BASEPRI, r1
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	482a      	ldr	r0, [pc, #168]	; (80056bc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005612:	f7fe fc53 	bl	8003ebc <_PreparePacket>
 8005616:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	627b      	str	r3, [r7, #36]	; 0x24
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	623b      	str	r3, [r7, #32]
 8005624:	e00b      	b.n	800563e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	1c59      	adds	r1, r3, #1
 800562e:	6279      	str	r1, [r7, #36]	; 0x24
 8005630:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	701a      	strb	r2, [r3, #0]
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	09db      	lsrs	r3, r3, #7
 800563c:	623b      	str	r3, [r7, #32]
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	2b7f      	cmp	r3, #127	; 0x7f
 8005642:	d8f0      	bhi.n	8005626 <SEGGER_SYSVIEW_SendModule+0x66>
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	627a      	str	r2, [r7, #36]	; 0x24
 800564a:	6a3a      	ldr	r2, [r7, #32]
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	61fb      	str	r3, [r7, #28]
 8005658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	e00b      	b.n	8005678 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	b2da      	uxtb	r2, r3
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	1c59      	adds	r1, r3, #1
 8005668:	61f9      	str	r1, [r7, #28]
 800566a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	09db      	lsrs	r3, r3, #7
 8005676:	61bb      	str	r3, [r7, #24]
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	2b7f      	cmp	r3, #127	; 0x7f
 800567c:	d8f0      	bhi.n	8005660 <SEGGER_SYSVIEW_SendModule+0xa0>
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	61fa      	str	r2, [r7, #28]
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800568e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2280      	movs	r2, #128	; 0x80
 8005694:	4619      	mov	r1, r3
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f7fe fbc0 	bl	8003e1c <_EncodeStr>
 800569c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800569e:	2216      	movs	r2, #22
 80056a0:	68f9      	ldr	r1, [r7, #12]
 80056a2:	6938      	ldr	r0, [r7, #16]
 80056a4:	f7fe fcf8 	bl	8004098 <_SendPacket>
      RECORD_END();
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80056ae:	bf00      	nop
 80056b0:	3730      	adds	r7, #48	; 0x30
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20014334 	.word	0x20014334
 80056bc:	2001433c 	.word	0x2001433c

080056c0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80056c6:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00f      	beq.n	80056ee <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80056ce:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1f2      	bne.n	80056d4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80056ee:	bf00      	nop
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20014334 	.word	0x20014334

080056fc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005702:	f3ef 8311 	mrs	r3, BASEPRI
 8005706:	f04f 0120 	mov.w	r1, #32
 800570a:	f381 8811 	msr	BASEPRI, r1
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	4817      	ldr	r0, [pc, #92]	; (8005770 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005712:	f7fe fbd3 	bl	8003ebc <_PreparePacket>
 8005716:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	4b14      	ldr	r3, [pc, #80]	; (8005774 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	e00b      	b.n	8005740 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	b2da      	uxtb	r2, r3
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	1c59      	adds	r1, r3, #1
 8005730:	6179      	str	r1, [r7, #20]
 8005732:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	09db      	lsrs	r3, r3, #7
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	2b7f      	cmp	r3, #127	; 0x7f
 8005744:	d8f0      	bhi.n	8005728 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	617a      	str	r2, [r7, #20]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005756:	221b      	movs	r2, #27
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	68b8      	ldr	r0, [r7, #8]
 800575c:	f7fe fc9c 	bl	8004098 <_SendPacket>
  RECORD_END();
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f383 8811 	msr	BASEPRI, r3
}
 8005766:	bf00      	nop
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	2001433c 	.word	0x2001433c
 8005774:	20014338 	.word	0x20014338

08005778 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005778:	b40f      	push	{r0, r1, r2, r3}
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005780:	f107 0314 	add.w	r3, r7, #20
 8005784:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005786:	1d3b      	adds	r3, r7, #4
 8005788:	461a      	mov	r2, r3
 800578a:	2100      	movs	r1, #0
 800578c:	6938      	ldr	r0, [r7, #16]
 800578e:	f7fe ff93 	bl	80046b8 <_VPrintTarget>
  va_end(ParamList);
}
 8005792:	bf00      	nop
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800579c:	b004      	add	sp, #16
 800579e:	4770      	bx	lr

080057a0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08a      	sub	sp, #40	; 0x28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057a8:	f3ef 8311 	mrs	r3, BASEPRI
 80057ac:	f04f 0120 	mov.w	r1, #32
 80057b0:	f381 8811 	msr	BASEPRI, r1
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	4827      	ldr	r0, [pc, #156]	; (8005854 <SEGGER_SYSVIEW_Warn+0xb4>)
 80057b8:	f7fe fb80 	bl	8003ebc <_PreparePacket>
 80057bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057be:	2280      	movs	r2, #128	; 0x80
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	6938      	ldr	r0, [r7, #16]
 80057c4:	f7fe fb2a 	bl	8003e1c <_EncodeStr>
 80057c8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
 80057ce:	2301      	movs	r3, #1
 80057d0:	623b      	str	r3, [r7, #32]
 80057d2:	e00b      	b.n	80057ec <SEGGER_SYSVIEW_Warn+0x4c>
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	1c59      	adds	r1, r3, #1
 80057dc:	6279      	str	r1, [r7, #36]	; 0x24
 80057de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	09db      	lsrs	r3, r3, #7
 80057ea:	623b      	str	r3, [r7, #32]
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	2b7f      	cmp	r3, #127	; 0x7f
 80057f0:	d8f0      	bhi.n	80057d4 <SEGGER_SYSVIEW_Warn+0x34>
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	627a      	str	r2, [r7, #36]	; 0x24
 80057f8:	6a3a      	ldr	r2, [r7, #32]
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	2300      	movs	r3, #0
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	e00b      	b.n	8005824 <SEGGER_SYSVIEW_Warn+0x84>
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	b2da      	uxtb	r2, r3
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	1c59      	adds	r1, r3, #1
 8005814:	61f9      	str	r1, [r7, #28]
 8005816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	09db      	lsrs	r3, r3, #7
 8005822:	61bb      	str	r3, [r7, #24]
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	2b7f      	cmp	r3, #127	; 0x7f
 8005828:	d8f0      	bhi.n	800580c <SEGGER_SYSVIEW_Warn+0x6c>
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	61fa      	str	r2, [r7, #28]
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800583a:	221a      	movs	r2, #26
 800583c:	68f9      	ldr	r1, [r7, #12]
 800583e:	6938      	ldr	r0, [r7, #16]
 8005840:	f7fe fc2a 	bl	8004098 <_SendPacket>
  RECORD_END();
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f383 8811 	msr	BASEPRI, r3
}
 800584a:	bf00      	nop
 800584c:	3728      	adds	r7, #40	; 0x28
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	2001433c 	.word	0x2001433c

08005858 <__libc_init_array>:
 8005858:	b570      	push	{r4, r5, r6, lr}
 800585a:	4d0d      	ldr	r5, [pc, #52]	; (8005890 <__libc_init_array+0x38>)
 800585c:	4c0d      	ldr	r4, [pc, #52]	; (8005894 <__libc_init_array+0x3c>)
 800585e:	1b64      	subs	r4, r4, r5
 8005860:	10a4      	asrs	r4, r4, #2
 8005862:	2600      	movs	r6, #0
 8005864:	42a6      	cmp	r6, r4
 8005866:	d109      	bne.n	800587c <__libc_init_array+0x24>
 8005868:	4d0b      	ldr	r5, [pc, #44]	; (8005898 <__libc_init_array+0x40>)
 800586a:	4c0c      	ldr	r4, [pc, #48]	; (800589c <__libc_init_array+0x44>)
 800586c:	f000 f83e 	bl	80058ec <_init>
 8005870:	1b64      	subs	r4, r4, r5
 8005872:	10a4      	asrs	r4, r4, #2
 8005874:	2600      	movs	r6, #0
 8005876:	42a6      	cmp	r6, r4
 8005878:	d105      	bne.n	8005886 <__libc_init_array+0x2e>
 800587a:	bd70      	pop	{r4, r5, r6, pc}
 800587c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005880:	4798      	blx	r3
 8005882:	3601      	adds	r6, #1
 8005884:	e7ee      	b.n	8005864 <__libc_init_array+0xc>
 8005886:	f855 3b04 	ldr.w	r3, [r5], #4
 800588a:	4798      	blx	r3
 800588c:	3601      	adds	r6, #1
 800588e:	e7f2      	b.n	8005876 <__libc_init_array+0x1e>
 8005890:	08005a88 	.word	0x08005a88
 8005894:	08005a88 	.word	0x08005a88
 8005898:	08005a88 	.word	0x08005a88
 800589c:	08005a8c 	.word	0x08005a8c

080058a0 <memcmp>:
 80058a0:	b510      	push	{r4, lr}
 80058a2:	3901      	subs	r1, #1
 80058a4:	4402      	add	r2, r0
 80058a6:	4290      	cmp	r0, r2
 80058a8:	d101      	bne.n	80058ae <memcmp+0xe>
 80058aa:	2000      	movs	r0, #0
 80058ac:	e005      	b.n	80058ba <memcmp+0x1a>
 80058ae:	7803      	ldrb	r3, [r0, #0]
 80058b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80058b4:	42a3      	cmp	r3, r4
 80058b6:	d001      	beq.n	80058bc <memcmp+0x1c>
 80058b8:	1b18      	subs	r0, r3, r4
 80058ba:	bd10      	pop	{r4, pc}
 80058bc:	3001      	adds	r0, #1
 80058be:	e7f2      	b.n	80058a6 <memcmp+0x6>

080058c0 <memcpy>:
 80058c0:	440a      	add	r2, r1
 80058c2:	4291      	cmp	r1, r2
 80058c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80058c8:	d100      	bne.n	80058cc <memcpy+0xc>
 80058ca:	4770      	bx	lr
 80058cc:	b510      	push	{r4, lr}
 80058ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058d6:	4291      	cmp	r1, r2
 80058d8:	d1f9      	bne.n	80058ce <memcpy+0xe>
 80058da:	bd10      	pop	{r4, pc}

080058dc <memset>:
 80058dc:	4402      	add	r2, r0
 80058de:	4603      	mov	r3, r0
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d100      	bne.n	80058e6 <memset+0xa>
 80058e4:	4770      	bx	lr
 80058e6:	f803 1b01 	strb.w	r1, [r3], #1
 80058ea:	e7f9      	b.n	80058e0 <memset+0x4>

080058ec <_init>:
 80058ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ee:	bf00      	nop
 80058f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f2:	bc08      	pop	{r3}
 80058f4:	469e      	mov	lr, r3
 80058f6:	4770      	bx	lr

080058f8 <_fini>:
 80058f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fa:	bf00      	nop
 80058fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058fe:	bc08      	pop	{r3}
 8005900:	469e      	mov	lr, r3
 8005902:	4770      	bx	lr
