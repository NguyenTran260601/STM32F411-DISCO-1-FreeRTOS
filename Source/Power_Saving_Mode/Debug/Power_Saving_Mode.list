
Power_Saving_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08005874  08005874  00015874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059ec  080059ec  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080059ec  080059ec  000159ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059f4  080059f4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059f4  080059f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059f8  080059f8  000159f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080059fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001440c  20000014  08005a10  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014420  08005a10  00024420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123b9  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002978  00000000  00000000  000323fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  00034d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  00035ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e54  00000000  00000000  00036ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012844  00000000  00000000  0004ed34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098b6b  00000000  00000000  00061578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa0e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004838  00000000  00000000  000fa134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800585c 	.word	0x0800585c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	0800585c 	.word	0x0800585c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012e4c 	.word	0x20012e4c

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af02      	add	r7, sp, #8
	TaskHandle_t task2_handle;
	TaskHandle_t task3_handle;

	BaseType_t status;

	HAL_Init();
 800057e:	f000 fb75 	bl	8000c6c <HAL_Init>

	SystemClock_Config();
 8000582:	f000 f8b5 	bl	80006f0 <SystemClock_Config>

	MX_GPIO_Init();
 8000586:	f000 f91d 	bl	80007c4 <MX_GPIO_Init>

	//enable CYCCNT register
	DWT_CTRL |= (1 << 0);
 800058a:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <main+0xc8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a2c      	ldr	r2, [pc, #176]	; (8000640 <main+0xc8>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6013      	str	r3, [r2, #0]


	SEGGER_SYSVIEW_Conf();
 8000596:	f003 f91d 	bl	80037d4 <SEGGER_SYSVIEW_Conf>

	SEGGER_SYSVIEW_Start();
 800059a:	f004 fb45 	bl	8004c28 <SEGGER_SYSVIEW_Start>

	status = xTaskCreate(led_green_handler, "Led1_Task", 200, NULL, 2, &task1_handle);
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	2302      	movs	r3, #2
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2300      	movs	r3, #0
 80005aa:	22c8      	movs	r2, #200	; 0xc8
 80005ac:	4925      	ldr	r1, [pc, #148]	; (8000644 <main+0xcc>)
 80005ae:	4826      	ldr	r0, [pc, #152]	; (8000648 <main+0xd0>)
 80005b0:	f001 fe1a 	bl	80021e8 <xTaskCreate>
 80005b4:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d00a      	beq.n	80005d2 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c0:	f383 8811 	msr	BASEPRI, r3
 80005c4:	f3bf 8f6f 	isb	sy
 80005c8:	f3bf 8f4f 	dsb	sy
 80005cc:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ce:	bf00      	nop
 80005d0:	e7fe      	b.n	80005d0 <main+0x58>

	status = xTaskCreate(led_orange_handler, "Led2_Task", 200, NULL, 2, &task2_handle);
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	2302      	movs	r3, #2
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2300      	movs	r3, #0
 80005de:	22c8      	movs	r2, #200	; 0xc8
 80005e0:	491a      	ldr	r1, [pc, #104]	; (800064c <main+0xd4>)
 80005e2:	481b      	ldr	r0, [pc, #108]	; (8000650 <main+0xd8>)
 80005e4:	f001 fe00 	bl	80021e8 <xTaskCreate>
 80005e8:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d00a      	beq.n	8000606 <main+0x8e>
        __asm volatile
 80005f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f4:	f383 8811 	msr	BASEPRI, r3
 80005f8:	f3bf 8f6f 	isb	sy
 80005fc:	f3bf 8f4f 	dsb	sy
 8000600:	617b      	str	r3, [r7, #20]
    }
 8000602:	bf00      	nop
 8000604:	e7fe      	b.n	8000604 <main+0x8c>

	status = xTaskCreate(led_red_handler, "Led3_Task", 200, NULL, 2, &task3_handle);
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2302      	movs	r3, #2
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2300      	movs	r3, #0
 8000610:	22c8      	movs	r2, #200	; 0xc8
 8000612:	4910      	ldr	r1, [pc, #64]	; (8000654 <main+0xdc>)
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <main+0xe0>)
 8000616:	f001 fde7 	bl	80021e8 <xTaskCreate>
 800061a:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d00a      	beq.n	8000638 <main+0xc0>
        __asm volatile
 8000622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000626:	f383 8811 	msr	BASEPRI, r3
 800062a:	f3bf 8f6f 	isb	sy
 800062e:	f3bf 8f4f 	dsb	sy
 8000632:	613b      	str	r3, [r7, #16]
    }
 8000634:	bf00      	nop
 8000636:	e7fe      	b.n	8000636 <main+0xbe>

	//start the freeRTOS scheduler
	vTaskStartScheduler();
 8000638:	f001 ffa8 	bl	800258c <vTaskStartScheduler>

  while (1)
 800063c:	e7fe      	b.n	800063c <main+0xc4>
 800063e:	bf00      	nop
 8000640:	e0001000 	.word	0xe0001000
 8000644:	08005874 	.word	0x08005874
 8000648:	0800065d 	.word	0x0800065d
 800064c:	08005880 	.word	0x08005880
 8000650:	08000689 	.word	0x08000689
 8000654:	0800588c 	.word	0x0800588c
 8000658:	080006b5 	.word	0x080006b5

0800065c <led_green_handler>:

  }
}

static void led_green_handler(void* parameters)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000664:	4806      	ldr	r0, [pc, #24]	; (8000680 <led_green_handler+0x24>)
 8000666:	f005 f83f 	bl	80056e8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 800066a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <led_green_handler+0x28>)
 8000670:	f000 fdbd 	bl	80011ee <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000674:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000678:	f001 ff50 	bl	800251c <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 800067c:	e7f2      	b.n	8000664 <led_green_handler+0x8>
 800067e:	bf00      	nop
 8000680:	08005898 	.word	0x08005898
 8000684:	40020c00 	.word	0x40020c00

08000688 <led_orange_handler>:

}


static void led_orange_handler(void* parameters)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000690:	4806      	ldr	r0, [pc, #24]	; (80006ac <led_orange_handler+0x24>)
 8000692:	f005 f829 	bl	80056e8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000696:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <led_orange_handler+0x28>)
 800069c:	f000 fda7 	bl	80011ee <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(800));
 80006a0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80006a4:	f001 ff3a 	bl	800251c <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80006a8:	e7f2      	b.n	8000690 <led_orange_handler+0x8>
 80006aa:	bf00      	nop
 80006ac:	080058ac 	.word	0x080058ac
 80006b0:	40020c00 	.word	0x40020c00

080006b4 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80006bc:	4806      	ldr	r0, [pc, #24]	; (80006d8 <led_red_handler+0x24>)
 80006be:	f005 f813 	bl	80056e8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 80006c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <led_red_handler+0x28>)
 80006c8:	f000 fd91 	bl	80011ee <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(400));
 80006cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80006d0:	f001 ff24 	bl	800251c <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80006d4:	e7f2      	b.n	80006bc <led_red_handler+0x8>
 80006d6:	bf00      	nop
 80006d8:	080058c0 	.word	0x080058c0
 80006dc:	40020c00 	.word	0x40020c00

080006e0 <vApplicationIdleHook>:
}

//Low power mode
//callback func
void vApplicationIdleHook(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80006e4:	2101      	movs	r1, #1
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 fd9c 	bl	8001224 <HAL_PWR_EnterSLEEPMode>
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	; 0x50
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2230      	movs	r2, #48	; 0x30
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f005 f8a4 	bl	800584c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <SystemClock_Config+0xcc>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	4a27      	ldr	r2, [pc, #156]	; (80007bc <SystemClock_Config+0xcc>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	; 0x40
 8000724:	4b25      	ldr	r3, [pc, #148]	; (80007bc <SystemClock_Config+0xcc>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <SystemClock_Config+0xd0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <SystemClock_Config+0xd0>)
 800073a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <SystemClock_Config+0xd0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000754:	2310      	movs	r3, #16
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075c:	2300      	movs	r3, #0
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000760:	2308      	movs	r3, #8
 8000762:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000764:	23c0      	movs	r3, #192	; 0xc0
 8000766:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000768:	2304      	movs	r3, #4
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800076c:	2308      	movs	r3, #8
 800076e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	4618      	mov	r0, r3
 8000776:	f000 fd71 	bl	800125c <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000780:	f000 f990 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2302      	movs	r3, #2
 800078a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000790:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000794:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2103      	movs	r1, #3
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 ffd2 	bl	800174c <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ae:	f000 f979 	bl	8000aa4 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	; 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	4ba2      	ldr	r3, [pc, #648]	; (8000a68 <MX_GPIO_Init+0x2a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4aa1      	ldr	r2, [pc, #644]	; (8000a68 <MX_GPIO_Init+0x2a4>)
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b9f      	ldr	r3, [pc, #636]	; (8000a68 <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0310 	and.w	r3, r3, #16
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	4b9b      	ldr	r3, [pc, #620]	; (8000a68 <MX_GPIO_Init+0x2a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a9a      	ldr	r2, [pc, #616]	; (8000a68 <MX_GPIO_Init+0x2a4>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b98      	ldr	r3, [pc, #608]	; (8000a68 <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b94      	ldr	r3, [pc, #592]	; (8000a68 <MX_GPIO_Init+0x2a4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a93      	ldr	r2, [pc, #588]	; (8000a68 <MX_GPIO_Init+0x2a4>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b91      	ldr	r3, [pc, #580]	; (8000a68 <MX_GPIO_Init+0x2a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b8d      	ldr	r3, [pc, #564]	; (8000a68 <MX_GPIO_Init+0x2a4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a8c      	ldr	r2, [pc, #560]	; (8000a68 <MX_GPIO_Init+0x2a4>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b8a      	ldr	r3, [pc, #552]	; (8000a68 <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b86      	ldr	r3, [pc, #536]	; (8000a68 <MX_GPIO_Init+0x2a4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a85      	ldr	r2, [pc, #532]	; (8000a68 <MX_GPIO_Init+0x2a4>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b83      	ldr	r3, [pc, #524]	; (8000a68 <MX_GPIO_Init+0x2a4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b7f      	ldr	r3, [pc, #508]	; (8000a68 <MX_GPIO_Init+0x2a4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a7e      	ldr	r2, [pc, #504]	; (8000a68 <MX_GPIO_Init+0x2a4>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b7c      	ldr	r3, [pc, #496]	; (8000a68 <MX_GPIO_Init+0x2a4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2108      	movs	r1, #8
 8000886:	4879      	ldr	r0, [pc, #484]	; (8000a6c <MX_GPIO_Init+0x2a8>)
 8000888:	f000 fc98 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2101      	movs	r1, #1
 8000890:	4877      	ldr	r0, [pc, #476]	; (8000a70 <MX_GPIO_Init+0x2ac>)
 8000892:	f000 fc93 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000896:	2200      	movs	r2, #0
 8000898:	f24f 0110 	movw	r1, #61456	; 0xf010
 800089c:	4875      	ldr	r0, [pc, #468]	; (8000a74 <MX_GPIO_Init+0x2b0>)
 800089e:	f000 fc8d 	bl	80011bc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008a2:	2304      	movs	r3, #4
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	486d      	ldr	r0, [pc, #436]	; (8000a6c <MX_GPIO_Init+0x2a8>)
 80008b6:	f000 fafd 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ba:	2308      	movs	r3, #8
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4866      	ldr	r0, [pc, #408]	; (8000a6c <MX_GPIO_Init+0x2a8>)
 80008d2:	f000 faef 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80008d6:	2332      	movs	r3, #50	; 0x32
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008da:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4860      	ldr	r0, [pc, #384]	; (8000a6c <MX_GPIO_Init+0x2a8>)
 80008ec:	f000 fae2 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	485a      	ldr	r0, [pc, #360]	; (8000a70 <MX_GPIO_Init+0x2ac>)
 8000908:	f000 fad4 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800090c:	2308      	movs	r3, #8
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800091c:	2305      	movs	r3, #5
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4852      	ldr	r0, [pc, #328]	; (8000a70 <MX_GPIO_Init+0x2ac>)
 8000928:	f000 fac4 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800092c:	2301      	movs	r3, #1
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000930:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	484d      	ldr	r0, [pc, #308]	; (8000a78 <MX_GPIO_Init+0x2b4>)
 8000942:	f000 fab7 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000946:	2310      	movs	r3, #16
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000956:	2306      	movs	r3, #6
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4845      	ldr	r0, [pc, #276]	; (8000a78 <MX_GPIO_Init+0x2b4>)
 8000962:	f000 faa7 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000966:	23e0      	movs	r3, #224	; 0xe0
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000976:	2305      	movs	r3, #5
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	483d      	ldr	r0, [pc, #244]	; (8000a78 <MX_GPIO_Init+0x2b4>)
 8000982:	f000 fa97 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000986:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000998:	2305      	movs	r3, #5
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4836      	ldr	r0, [pc, #216]	; (8000a7c <MX_GPIO_Init+0x2b8>)
 80009a4:	f000 fa86 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009a8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009ac:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	482c      	ldr	r0, [pc, #176]	; (8000a74 <MX_GPIO_Init+0x2b0>)
 80009c2:	f000 fa77 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009c6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009d8:	2306      	movs	r3, #6
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4823      	ldr	r0, [pc, #140]	; (8000a70 <MX_GPIO_Init+0x2ac>)
 80009e4:	f000 fa66 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	481e      	ldr	r0, [pc, #120]	; (8000a78 <MX_GPIO_Init+0x2b4>)
 80009fe:	f000 fa59 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a02:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a14:	230a      	movs	r3, #10
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4816      	ldr	r0, [pc, #88]	; (8000a78 <MX_GPIO_Init+0x2b4>)
 8000a20:	f000 fa48 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a24:	2320      	movs	r3, #32
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	480f      	ldr	r0, [pc, #60]	; (8000a74 <MX_GPIO_Init+0x2b0>)
 8000a38:	f000 fa3c 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a3c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a42:	2312      	movs	r3, #18
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4808      	ldr	r0, [pc, #32]	; (8000a7c <MX_GPIO_Init+0x2b8>)
 8000a5a:	f000 fa2b 	bl	8000eb4 <HAL_GPIO_Init>

}
 8000a5e:	bf00      	nop
 8000a60:	3730      	adds	r7, #48	; 0x30
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40020800 	.word	0x40020800
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020400 	.word	0x40020400

08000a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d101      	bne.n	8000a96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a92:	f000 f90d 	bl	8000cb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40014400 	.word	0x40014400

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_MspInit+0x4c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000aee:	f002 fabb 	bl	8003068 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08c      	sub	sp, #48	; 0x30
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	2019      	movs	r0, #25
 8000b16:	f000 f9a3 	bl	8000e60 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b1a:	2019      	movs	r0, #25
 8000b1c:	f000 f9bc 	bl	8000e98 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <HAL_InitTick+0xa4>)
 8000b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b28:	4a1e      	ldr	r2, [pc, #120]	; (8000ba4 <HAL_InitTick+0xa4>)
 8000b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <HAL_InitTick+0xa4>)
 8000b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b3c:	f107 0210 	add.w	r2, r7, #16
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 f80c 	bl	8001b64 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b4c:	f000 fff6 	bl	8001b3c <HAL_RCC_GetPCLK2Freq>
 8000b50:	4603      	mov	r3, r0
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b58:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <HAL_InitTick+0xa8>)
 8000b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5e:	0c9b      	lsrs	r3, r3, #18
 8000b60:	3b01      	subs	r3, #1
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_InitTick+0xac>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <HAL_InitTick+0xb0>)
 8000b68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <HAL_InitTick+0xac>)
 8000b6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b70:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000b72:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <HAL_InitTick+0xac>)
 8000b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b76:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_InitTick+0xac>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_InitTick+0xac>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000b84:	4809      	ldr	r0, [pc, #36]	; (8000bac <HAL_InitTick+0xac>)
 8000b86:	f001 f81f 	bl	8001bc8 <HAL_TIM_Base_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d104      	bne.n	8000b9a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000b90:	4806      	ldr	r0, [pc, #24]	; (8000bac <HAL_InitTick+0xac>)
 8000b92:	f001 f873 	bl	8001c7c <HAL_TIM_Base_Start_IT>
 8000b96:	4603      	mov	r3, r0
 8000b98:	e000      	b.n	8000b9c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3730      	adds	r7, #48	; 0x30
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	431bde83 	.word	0x431bde83
 8000bac:	20000030 	.word	0x20000030
 8000bb0:	40014400 	.word	0x40014400

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000be6:	f001 f8ab 	bl	8001d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000030 	.word	0x20000030

08000bf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <SystemInit+0x20>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfe:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <SystemInit+0x20>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c1e:	490e      	ldr	r1, [pc, #56]	; (8000c58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c20:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c24:	e002      	b.n	8000c2c <LoopCopyDataInit>

08000c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2a:	3304      	adds	r3, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c30:	d3f9      	bcc.n	8000c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c32:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c34:	4c0b      	ldr	r4, [pc, #44]	; (8000c64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c38:	e001      	b.n	8000c3e <LoopFillZerobss>

08000c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c3c:	3204      	adds	r2, #4

08000c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c40:	d3fb      	bcc.n	8000c3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c42:	f7ff ffd7 	bl	8000bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c46:	f004 fdbf 	bl	80057c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4a:	f7ff fc95 	bl	8000578 <main>
  bx  lr    
 8000c4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c5c:	080059fc 	.word	0x080059fc
  ldr r2, =_sbss
 8000c60:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c64:	20014420 	.word	0x20014420

08000c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <HAL_Init+0x40>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <HAL_Init+0x40>)
 8000c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a07      	ldr	r2, [pc, #28]	; (8000cac <HAL_Init+0x40>)
 8000c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c94:	2003      	movs	r0, #3
 8000c96:	f000 f8d8 	bl	8000e4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9a:	200f      	movs	r0, #15
 8000c9c:	f7ff ff30 	bl	8000b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca0:	f7ff ff06 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023c00 	.word	0x40023c00

08000cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000078 	.word	0x20000078

08000cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <HAL_GetTick+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000078 	.word	0x20000078

08000cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d22:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	60d3      	str	r3, [r2, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <__NVIC_GetPriorityGrouping+0x18>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	f003 0307 	and.w	r3, r3, #7
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	db0b      	blt.n	8000d7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	f003 021f 	and.w	r2, r3, #31
 8000d6c:	4907      	ldr	r1, [pc, #28]	; (8000d8c <__NVIC_EnableIRQ+0x38>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	095b      	lsrs	r3, r3, #5
 8000d74:	2001      	movs	r0, #1
 8000d76:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	; (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	; (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	; 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ff4c 	bl	8000cf0 <__NVIC_SetPriorityGrouping>
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e72:	f7ff ff61 	bl	8000d38 <__NVIC_GetPriorityGrouping>
 8000e76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	68b9      	ldr	r1, [r7, #8]
 8000e7c:	6978      	ldr	r0, [r7, #20]
 8000e7e:	f7ff ffb1 	bl	8000de4 <NVIC_EncodePriority>
 8000e82:	4602      	mov	r2, r0
 8000e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff80 	bl	8000d90 <__NVIC_SetPriority>
}
 8000e90:	bf00      	nop
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff54 	bl	8000d54 <__NVIC_EnableIRQ>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	e159      	b.n	8001184 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	f040 8148 	bne.w	800117e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d005      	beq.n	8000f06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d130      	bne.n	8000f68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	091b      	lsrs	r3, r3, #4
 8000f52:	f003 0201 	and.w	r2, r3, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d017      	beq.n	8000fa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d123      	bne.n	8000ff8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	08da      	lsrs	r2, r3, #3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3208      	adds	r2, #8
 8000fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	f003 0307 	and.w	r3, r3, #7
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	691a      	ldr	r2, [r3, #16]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	08da      	lsrs	r2, r3, #3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	69b9      	ldr	r1, [r7, #24]
 8000ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0203 	and.w	r2, r3, #3
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 80a2 	beq.w	800117e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b57      	ldr	r3, [pc, #348]	; (800119c <HAL_GPIO_Init+0x2e8>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a56      	ldr	r2, [pc, #344]	; (800119c <HAL_GPIO_Init+0x2e8>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b54      	ldr	r3, [pc, #336]	; (800119c <HAL_GPIO_Init+0x2e8>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001056:	4a52      	ldr	r2, [pc, #328]	; (80011a0 <HAL_GPIO_Init+0x2ec>)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a49      	ldr	r2, [pc, #292]	; (80011a4 <HAL_GPIO_Init+0x2f0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d019      	beq.n	80010b6 <HAL_GPIO_Init+0x202>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a48      	ldr	r2, [pc, #288]	; (80011a8 <HAL_GPIO_Init+0x2f4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0x1fe>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a47      	ldr	r2, [pc, #284]	; (80011ac <HAL_GPIO_Init+0x2f8>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00d      	beq.n	80010ae <HAL_GPIO_Init+0x1fa>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a46      	ldr	r2, [pc, #280]	; (80011b0 <HAL_GPIO_Init+0x2fc>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d007      	beq.n	80010aa <HAL_GPIO_Init+0x1f6>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a45      	ldr	r2, [pc, #276]	; (80011b4 <HAL_GPIO_Init+0x300>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_GPIO_Init+0x1f2>
 80010a2:	2304      	movs	r3, #4
 80010a4:	e008      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010a6:	2307      	movs	r3, #7
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010aa:	2303      	movs	r3, #3
 80010ac:	e004      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e002      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010b6:	2300      	movs	r3, #0
 80010b8:	69fa      	ldr	r2, [r7, #28]
 80010ba:	f002 0203 	and.w	r2, r2, #3
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	4093      	lsls	r3, r2
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c8:	4935      	ldr	r1, [pc, #212]	; (80011a0 <HAL_GPIO_Init+0x2ec>)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d6:	4b38      	ldr	r3, [pc, #224]	; (80011b8 <HAL_GPIO_Init+0x304>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010fa:	4a2f      	ldr	r2, [pc, #188]	; (80011b8 <HAL_GPIO_Init+0x304>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001100:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <HAL_GPIO_Init+0x304>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001124:	4a24      	ldr	r2, [pc, #144]	; (80011b8 <HAL_GPIO_Init+0x304>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800112a:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <HAL_GPIO_Init+0x304>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800114e:	4a1a      	ldr	r2, [pc, #104]	; (80011b8 <HAL_GPIO_Init+0x304>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <HAL_GPIO_Init+0x304>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001178:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <HAL_GPIO_Init+0x304>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3301      	adds	r3, #1
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	2b0f      	cmp	r3, #15
 8001188:	f67f aea2 	bls.w	8000ed0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40013800 	.word	0x40013800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020c00 	.word	0x40020c00
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40013c00 	.word	0x40013c00

080011bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
 80011c8:	4613      	mov	r3, r2
 80011ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011d8:	e003      	b.n	80011e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	041a      	lsls	r2, r3, #16
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	619a      	str	r2, [r3, #24]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b085      	sub	sp, #20
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	460b      	mov	r3, r1
 80011f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001200:	887a      	ldrh	r2, [r7, #2]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4013      	ands	r3, r2
 8001206:	041a      	lsls	r2, r3, #16
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43d9      	mvns	r1, r3
 800120c:	887b      	ldrh	r3, [r7, #2]
 800120e:	400b      	ands	r3, r1
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	619a      	str	r2, [r3, #24]
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	4a08      	ldr	r2, [pc, #32]	; (8001258 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001236:	f023 0304 	bic.w	r3, r3, #4
 800123a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d101      	bne.n	8001246 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8001242:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001244:	e002      	b.n	800124c <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8001246:	bf40      	sev
    __WFE();
 8001248:	bf20      	wfe
    __WFE();
 800124a:	bf20      	wfe
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e267      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d075      	beq.n	8001366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800127a:	4b88      	ldr	r3, [pc, #544]	; (800149c <HAL_RCC_OscConfig+0x240>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b04      	cmp	r3, #4
 8001284:	d00c      	beq.n	80012a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001286:	4b85      	ldr	r3, [pc, #532]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800128e:	2b08      	cmp	r3, #8
 8001290:	d112      	bne.n	80012b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001292:	4b82      	ldr	r3, [pc, #520]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800129e:	d10b      	bne.n	80012b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a0:	4b7e      	ldr	r3, [pc, #504]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d05b      	beq.n	8001364 <HAL_RCC_OscConfig+0x108>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d157      	bne.n	8001364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e242      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c0:	d106      	bne.n	80012d0 <HAL_RCC_OscConfig+0x74>
 80012c2:	4b76      	ldr	r3, [pc, #472]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a75      	ldr	r2, [pc, #468]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e01d      	b.n	800130c <HAL_RCC_OscConfig+0xb0>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d8:	d10c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x98>
 80012da:	4b70      	ldr	r3, [pc, #448]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a6f      	ldr	r2, [pc, #444]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80012e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	4b6d      	ldr	r3, [pc, #436]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a6c      	ldr	r2, [pc, #432]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e00b      	b.n	800130c <HAL_RCC_OscConfig+0xb0>
 80012f4:	4b69      	ldr	r3, [pc, #420]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a68      	ldr	r2, [pc, #416]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80012fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	4b66      	ldr	r3, [pc, #408]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a65      	ldr	r2, [pc, #404]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d013      	beq.n	800133c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fce0 	bl	8000cd8 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fcdc 	bl	8000cd8 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e207      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132e:	4b5b      	ldr	r3, [pc, #364]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f0      	beq.n	800131c <HAL_RCC_OscConfig+0xc0>
 800133a:	e014      	b.n	8001366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fccc 	bl	8000cd8 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001344:	f7ff fcc8 	bl	8000cd8 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b64      	cmp	r3, #100	; 0x64
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e1f3      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001356:	4b51      	ldr	r3, [pc, #324]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0xe8>
 8001362:	e000      	b.n	8001366 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d063      	beq.n	800143a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001372:	4b4a      	ldr	r3, [pc, #296]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00b      	beq.n	8001396 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137e:	4b47      	ldr	r3, [pc, #284]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001386:	2b08      	cmp	r3, #8
 8001388:	d11c      	bne.n	80013c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800138a:	4b44      	ldr	r3, [pc, #272]	; (800149c <HAL_RCC_OscConfig+0x240>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d116      	bne.n	80013c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001396:	4b41      	ldr	r3, [pc, #260]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d005      	beq.n	80013ae <HAL_RCC_OscConfig+0x152>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d001      	beq.n	80013ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e1c7      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ae:	4b3b      	ldr	r3, [pc, #236]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4937      	ldr	r1, [pc, #220]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c2:	e03a      	b.n	800143a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d020      	beq.n	800140e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013cc:	4b34      	ldr	r3, [pc, #208]	; (80014a0 <HAL_RCC_OscConfig+0x244>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d2:	f7ff fc81 	bl	8000cd8 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013da:	f7ff fc7d 	bl	8000cd8 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e1a8      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ec:	4b2b      	ldr	r3, [pc, #172]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f8:	4b28      	ldr	r3, [pc, #160]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	4925      	ldr	r1, [pc, #148]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001408:	4313      	orrs	r3, r2
 800140a:	600b      	str	r3, [r1, #0]
 800140c:	e015      	b.n	800143a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800140e:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <HAL_RCC_OscConfig+0x244>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001414:	f7ff fc60 	bl	8000cd8 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141c:	f7ff fc5c 	bl	8000cd8 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e187      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b00      	cmp	r3, #0
 8001444:	d036      	beq.n	80014b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d016      	beq.n	800147c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_RCC_OscConfig+0x248>)
 8001450:	2201      	movs	r2, #1
 8001452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001454:	f7ff fc40 	bl	8000cd8 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145c:	f7ff fc3c 	bl	8000cd8 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e167      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0x200>
 800147a:	e01b      	b.n	80014b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_RCC_OscConfig+0x248>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001482:	f7ff fc29 	bl	8000cd8 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001488:	e00e      	b.n	80014a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148a:	f7ff fc25 	bl	8000cd8 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d907      	bls.n	80014a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e150      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
 800149c:	40023800 	.word	0x40023800
 80014a0:	42470000 	.word	0x42470000
 80014a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a8:	4b88      	ldr	r3, [pc, #544]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80014aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1ea      	bne.n	800148a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 8097 	beq.w	80015f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c2:	2300      	movs	r3, #0
 80014c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014c6:	4b81      	ldr	r3, [pc, #516]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10f      	bne.n	80014f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	4b7d      	ldr	r3, [pc, #500]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	4a7c      	ldr	r2, [pc, #496]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
 80014e2:	4b7a      	ldr	r3, [pc, #488]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ee:	2301      	movs	r3, #1
 80014f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f2:	4b77      	ldr	r3, [pc, #476]	; (80016d0 <HAL_RCC_OscConfig+0x474>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d118      	bne.n	8001530 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014fe:	4b74      	ldr	r3, [pc, #464]	; (80016d0 <HAL_RCC_OscConfig+0x474>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a73      	ldr	r2, [pc, #460]	; (80016d0 <HAL_RCC_OscConfig+0x474>)
 8001504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800150a:	f7ff fbe5 	bl	8000cd8 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001512:	f7ff fbe1 	bl	8000cd8 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e10c      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001524:	4b6a      	ldr	r3, [pc, #424]	; (80016d0 <HAL_RCC_OscConfig+0x474>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d106      	bne.n	8001546 <HAL_RCC_OscConfig+0x2ea>
 8001538:	4b64      	ldr	r3, [pc, #400]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 800153a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153c:	4a63      	ldr	r2, [pc, #396]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6713      	str	r3, [r2, #112]	; 0x70
 8001544:	e01c      	b.n	8001580 <HAL_RCC_OscConfig+0x324>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b05      	cmp	r3, #5
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0x30c>
 800154e:	4b5f      	ldr	r3, [pc, #380]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	4a5e      	ldr	r2, [pc, #376]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6713      	str	r3, [r2, #112]	; 0x70
 800155a:	4b5c      	ldr	r3, [pc, #368]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 800155c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155e:	4a5b      	ldr	r2, [pc, #364]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6713      	str	r3, [r2, #112]	; 0x70
 8001566:	e00b      	b.n	8001580 <HAL_RCC_OscConfig+0x324>
 8001568:	4b58      	ldr	r3, [pc, #352]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 800156a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156c:	4a57      	ldr	r2, [pc, #348]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 800156e:	f023 0301 	bic.w	r3, r3, #1
 8001572:	6713      	str	r3, [r2, #112]	; 0x70
 8001574:	4b55      	ldr	r3, [pc, #340]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 8001576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001578:	4a54      	ldr	r2, [pc, #336]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 800157a:	f023 0304 	bic.w	r3, r3, #4
 800157e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d015      	beq.n	80015b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001588:	f7ff fba6 	bl	8000cd8 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158e:	e00a      	b.n	80015a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001590:	f7ff fba2 	bl	8000cd8 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f241 3288 	movw	r2, #5000	; 0x1388
 800159e:	4293      	cmp	r3, r2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e0cb      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a6:	4b49      	ldr	r3, [pc, #292]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0ee      	beq.n	8001590 <HAL_RCC_OscConfig+0x334>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b4:	f7ff fb90 	bl	8000cd8 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ba:	e00a      	b.n	80015d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015bc:	f7ff fb8c 	bl	8000cd8 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e0b5      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d2:	4b3e      	ldr	r3, [pc, #248]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1ee      	bne.n	80015bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015de:	7dfb      	ldrb	r3, [r7, #23]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d105      	bne.n	80015f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e4:	4b39      	ldr	r3, [pc, #228]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	4a38      	ldr	r2, [pc, #224]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80015ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80a1 	beq.w	800173c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015fa:	4b34      	ldr	r3, [pc, #208]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b08      	cmp	r3, #8
 8001604:	d05c      	beq.n	80016c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d141      	bne.n	8001692 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160e:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <HAL_RCC_OscConfig+0x478>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fb60 	bl	8000cd8 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff fb5c 	bl	8000cd8 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e087      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162e:	4b27      	ldr	r3, [pc, #156]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69da      	ldr	r2, [r3, #28]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	019b      	lsls	r3, r3, #6
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	085b      	lsrs	r3, r3, #1
 8001652:	3b01      	subs	r3, #1
 8001654:	041b      	lsls	r3, r3, #16
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	061b      	lsls	r3, r3, #24
 800165e:	491b      	ldr	r1, [pc, #108]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 8001660:	4313      	orrs	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <HAL_RCC_OscConfig+0x478>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff fb35 	bl	8000cd8 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001672:	f7ff fb31 	bl	8000cd8 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e05c      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x416>
 8001690:	e054      	b.n	800173c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <HAL_RCC_OscConfig+0x478>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fb1e 	bl	8000cd8 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a0:	f7ff fb1a 	bl	8000cd8 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e045      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x444>
 80016be:	e03d      	b.n	800173c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d107      	bne.n	80016d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e038      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40007000 	.word	0x40007000
 80016d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_RCC_OscConfig+0x4ec>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d028      	beq.n	8001738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d121      	bne.n	8001738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fe:	429a      	cmp	r2, r3
 8001700:	d11a      	bne.n	8001738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001708:	4013      	ands	r3, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800170e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001710:	4293      	cmp	r3, r2
 8001712:	d111      	bne.n	8001738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	085b      	lsrs	r3, r3, #1
 8001720:	3b01      	subs	r3, #1
 8001722:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d107      	bne.n	8001738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001734:	429a      	cmp	r2, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800

0800174c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0cc      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001760:	4b68      	ldr	r3, [pc, #416]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d90c      	bls.n	8001788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b65      	ldr	r3, [pc, #404]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b63      	ldr	r3, [pc, #396]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0b8      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d020      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a0:	4b59      	ldr	r3, [pc, #356]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4a58      	ldr	r2, [pc, #352]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b8:	4b53      	ldr	r3, [pc, #332]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c4:	4b50      	ldr	r3, [pc, #320]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	494d      	ldr	r1, [pc, #308]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d044      	beq.n	800186c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b47      	ldr	r3, [pc, #284]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d119      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e07f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d003      	beq.n	800180a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001806:	2b03      	cmp	r3, #3
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180a:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e06f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181a:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e067      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182a:	4b37      	ldr	r3, [pc, #220]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f023 0203 	bic.w	r2, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4934      	ldr	r1, [pc, #208]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	4313      	orrs	r3, r2
 800183a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800183c:	f7ff fa4c 	bl	8000cd8 <HAL_GetTick>
 8001840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	e00a      	b.n	800185a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001844:	f7ff fa48 	bl	8000cd8 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e04f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 020c 	and.w	r2, r3, #12
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	429a      	cmp	r2, r3
 800186a:	d1eb      	bne.n	8001844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800186c:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d20c      	bcs.n	8001894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b22      	ldr	r3, [pc, #136]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e032      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4916      	ldr	r1, [pc, #88]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d009      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	490e      	ldr	r1, [pc, #56]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018d2:	f000 f821 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 80018d6:	4602      	mov	r2, r0
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	490a      	ldr	r1, [pc, #40]	; (800190c <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	5ccb      	ldrb	r3, [r1, r3]
 80018e6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f904 	bl	8000b00 <HAL_InitTick>

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023c00 	.word	0x40023c00
 8001908:	40023800 	.word	0x40023800
 800190c:	0800599c 	.word	0x0800599c
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800191c:	b094      	sub	sp, #80	; 0x50
 800191e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	647b      	str	r3, [r7, #68]	; 0x44
 8001924:	2300      	movs	r3, #0
 8001926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001928:	2300      	movs	r3, #0
 800192a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001930:	4b79      	ldr	r3, [pc, #484]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	2b08      	cmp	r3, #8
 800193a:	d00d      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0x40>
 800193c:	2b08      	cmp	r3, #8
 800193e:	f200 80e1 	bhi.w	8001b04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0x34>
 8001946:	2b04      	cmp	r3, #4
 8001948:	d003      	beq.n	8001952 <HAL_RCC_GetSysClockFreq+0x3a>
 800194a:	e0db      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800194c:	4b73      	ldr	r3, [pc, #460]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x204>)
 800194e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001950:	e0db      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001952:	4b73      	ldr	r3, [pc, #460]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x208>)
 8001954:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001956:	e0d8      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001958:	4b6f      	ldr	r3, [pc, #444]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x200>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001960:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001962:	4b6d      	ldr	r3, [pc, #436]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d063      	beq.n	8001a36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800196e:	4b6a      	ldr	r3, [pc, #424]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	099b      	lsrs	r3, r3, #6
 8001974:	2200      	movs	r2, #0
 8001976:	63bb      	str	r3, [r7, #56]	; 0x38
 8001978:	63fa      	str	r2, [r7, #60]	; 0x3c
 800197a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800197c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
 8001982:	2300      	movs	r3, #0
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
 8001986:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800198a:	4622      	mov	r2, r4
 800198c:	462b      	mov	r3, r5
 800198e:	f04f 0000 	mov.w	r0, #0
 8001992:	f04f 0100 	mov.w	r1, #0
 8001996:	0159      	lsls	r1, r3, #5
 8001998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800199c:	0150      	lsls	r0, r2, #5
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4621      	mov	r1, r4
 80019a4:	1a51      	subs	r1, r2, r1
 80019a6:	6139      	str	r1, [r7, #16]
 80019a8:	4629      	mov	r1, r5
 80019aa:	eb63 0301 	sbc.w	r3, r3, r1
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019bc:	4659      	mov	r1, fp
 80019be:	018b      	lsls	r3, r1, #6
 80019c0:	4651      	mov	r1, sl
 80019c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019c6:	4651      	mov	r1, sl
 80019c8:	018a      	lsls	r2, r1, #6
 80019ca:	4651      	mov	r1, sl
 80019cc:	ebb2 0801 	subs.w	r8, r2, r1
 80019d0:	4659      	mov	r1, fp
 80019d2:	eb63 0901 	sbc.w	r9, r3, r1
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019ea:	4690      	mov	r8, r2
 80019ec:	4699      	mov	r9, r3
 80019ee:	4623      	mov	r3, r4
 80019f0:	eb18 0303 	adds.w	r3, r8, r3
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	462b      	mov	r3, r5
 80019f8:	eb49 0303 	adc.w	r3, r9, r3
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	024b      	lsls	r3, r1, #9
 8001a0e:	4621      	mov	r1, r4
 8001a10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a14:	4621      	mov	r1, r4
 8001a16:	024a      	lsls	r2, r1, #9
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a1e:	2200      	movs	r2, #0
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a28:	f7fe fc24 	bl	8000274 <__aeabi_uldivmod>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4613      	mov	r3, r2
 8001a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a34:	e058      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a36:	4b38      	ldr	r3, [pc, #224]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	099b      	lsrs	r3, r3, #6
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	4611      	mov	r1, r2
 8001a42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a46:	623b      	str	r3, [r7, #32]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a50:	4642      	mov	r2, r8
 8001a52:	464b      	mov	r3, r9
 8001a54:	f04f 0000 	mov.w	r0, #0
 8001a58:	f04f 0100 	mov.w	r1, #0
 8001a5c:	0159      	lsls	r1, r3, #5
 8001a5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a62:	0150      	lsls	r0, r2, #5
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4641      	mov	r1, r8
 8001a6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a6e:	4649      	mov	r1, r9
 8001a70:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a88:	ebb2 040a 	subs.w	r4, r2, sl
 8001a8c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	00eb      	lsls	r3, r5, #3
 8001a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a9e:	00e2      	lsls	r2, r4, #3
 8001aa0:	4614      	mov	r4, r2
 8001aa2:	461d      	mov	r5, r3
 8001aa4:	4643      	mov	r3, r8
 8001aa6:	18e3      	adds	r3, r4, r3
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	464b      	mov	r3, r9
 8001aac:	eb45 0303 	adc.w	r3, r5, r3
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001abe:	4629      	mov	r1, r5
 8001ac0:	028b      	lsls	r3, r1, #10
 8001ac2:	4621      	mov	r1, r4
 8001ac4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ac8:	4621      	mov	r1, r4
 8001aca:	028a      	lsls	r2, r1, #10
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
 8001ad6:	61fa      	str	r2, [r7, #28]
 8001ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001adc:	f7fe fbca 	bl	8000274 <__aeabi_uldivmod>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	0c1b      	lsrs	r3, r3, #16
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	3301      	adds	r3, #1
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001af8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b02:	e002      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3750      	adds	r7, #80	; 0x50
 8001b10:	46bd      	mov	sp, r7
 8001b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	00f42400 	.word	0x00f42400
 8001b20:	007a1200 	.word	0x007a1200

08001b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000000 	.word	0x20000000

08001b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b40:	f7ff fff0 	bl	8001b24 <HAL_RCC_GetHCLKFreq>
 8001b44:	4602      	mov	r2, r0
 8001b46:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	0b5b      	lsrs	r3, r3, #13
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	4903      	ldr	r1, [pc, #12]	; (8001b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b52:	5ccb      	ldrb	r3, [r1, r3]
 8001b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	080059ac 	.word	0x080059ac

08001b64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	220f      	movs	r2, #15
 8001b72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 0203 	and.w	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	08db      	lsrs	r3, r3, #3
 8001b9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_RCC_GetClockConfig+0x60>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0207 	and.w	r2, r3, #7
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	601a      	str	r2, [r3, #0]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40023c00 	.word	0x40023c00

08001bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e041      	b.n	8001c5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f839 	bl	8001c66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3304      	adds	r3, #4
 8001c04:	4619      	mov	r1, r3
 8001c06:	4610      	mov	r0, r2
 8001c08:	f000 f9ca 	bl	8001fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d001      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e044      	b.n	8001d1e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1e      	ldr	r2, [pc, #120]	; (8001d2c <HAL_TIM_Base_Start_IT+0xb0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d018      	beq.n	8001ce8 <HAL_TIM_Base_Start_IT+0x6c>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cbe:	d013      	beq.n	8001ce8 <HAL_TIM_Base_Start_IT+0x6c>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <HAL_TIM_Base_Start_IT+0xb4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00e      	beq.n	8001ce8 <HAL_TIM_Base_Start_IT+0x6c>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a19      	ldr	r2, [pc, #100]	; (8001d34 <HAL_TIM_Base_Start_IT+0xb8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d009      	beq.n	8001ce8 <HAL_TIM_Base_Start_IT+0x6c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a17      	ldr	r2, [pc, #92]	; (8001d38 <HAL_TIM_Base_Start_IT+0xbc>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d004      	beq.n	8001ce8 <HAL_TIM_Base_Start_IT+0x6c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a16      	ldr	r2, [pc, #88]	; (8001d3c <HAL_TIM_Base_Start_IT+0xc0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d111      	bne.n	8001d0c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d010      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f042 0201 	orr.w	r2, r2, #1
 8001d08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0a:	e007      	b.n	8001d1c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40010000 	.word	0x40010000
 8001d30:	40000400 	.word	0x40000400
 8001d34:	40000800 	.word	0x40000800
 8001d38:	40000c00 	.word	0x40000c00
 8001d3c:	40014000 	.word	0x40014000

08001d40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d122      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d11b      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0202 	mvn.w	r2, #2
 8001d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f8ee 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001d88:	e005      	b.n	8001d96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f8e0 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f8f1 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d122      	bne.n	8001df0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d11b      	bne.n	8001df0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0204 	mvn.w	r2, #4
 8001dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f8c4 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001ddc:	e005      	b.n	8001dea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f8b6 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f8c7 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d122      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d11b      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0208 	mvn.w	r2, #8
 8001e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2204      	movs	r2, #4
 8001e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f89a 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001e30:	e005      	b.n	8001e3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f88c 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f89d 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b10      	cmp	r3, #16
 8001e50:	d122      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0310 	and.w	r3, r3, #16
 8001e5c:	2b10      	cmp	r3, #16
 8001e5e:	d11b      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0210 	mvn.w	r2, #16
 8001e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f870 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001e84:	e005      	b.n	8001e92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f862 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f873 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d10e      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d107      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0201 	mvn.w	r2, #1
 8001ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe fdde 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ece:	2b80      	cmp	r3, #128	; 0x80
 8001ed0:	d10e      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001edc:	2b80      	cmp	r3, #128	; 0x80
 8001ede:	d107      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8e2 	bl	80020b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efa:	2b40      	cmp	r3, #64	; 0x40
 8001efc:	d10e      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f08:	2b40      	cmp	r3, #64	; 0x40
 8001f0a:	d107      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f838 	bl	8001f8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d10e      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d107      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0220 	mvn.w	r2, #32
 8001f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8ac 	bl	80020a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a34      	ldr	r2, [pc, #208]	; (8002084 <TIM_Base_SetConfig+0xe4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00f      	beq.n	8001fd8 <TIM_Base_SetConfig+0x38>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fbe:	d00b      	beq.n	8001fd8 <TIM_Base_SetConfig+0x38>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a31      	ldr	r2, [pc, #196]	; (8002088 <TIM_Base_SetConfig+0xe8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d007      	beq.n	8001fd8 <TIM_Base_SetConfig+0x38>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a30      	ldr	r2, [pc, #192]	; (800208c <TIM_Base_SetConfig+0xec>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d003      	beq.n	8001fd8 <TIM_Base_SetConfig+0x38>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a2f      	ldr	r2, [pc, #188]	; (8002090 <TIM_Base_SetConfig+0xf0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d108      	bne.n	8001fea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a25      	ldr	r2, [pc, #148]	; (8002084 <TIM_Base_SetConfig+0xe4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01b      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff8:	d017      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a22      	ldr	r2, [pc, #136]	; (8002088 <TIM_Base_SetConfig+0xe8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a21      	ldr	r2, [pc, #132]	; (800208c <TIM_Base_SetConfig+0xec>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00f      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a20      	ldr	r2, [pc, #128]	; (8002090 <TIM_Base_SetConfig+0xf0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00b      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <TIM_Base_SetConfig+0xf4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d007      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <TIM_Base_SetConfig+0xf8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d003      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a1d      	ldr	r2, [pc, #116]	; (800209c <TIM_Base_SetConfig+0xfc>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d108      	bne.n	800203c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4313      	orrs	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a08      	ldr	r2, [pc, #32]	; (8002084 <TIM_Base_SetConfig+0xe4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d103      	bne.n	8002070 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	615a      	str	r2, [r3, #20]
}
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40010000 	.word	0x40010000
 8002088:	40000400 	.word	0x40000400
 800208c:	40000800 	.word	0x40000800
 8002090:	40000c00 	.word	0x40000c00
 8002094:	40014000 	.word	0x40014000
 8002098:	40014400 	.word	0x40014400
 800209c:	40014800 	.word	0x40014800

080020a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f103 0208 	add.w	r2, r3, #8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f04f 32ff 	mov.w	r2, #4294967295
 80020e0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f103 0208 	add.w	r2, r3, #8
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f103 0208 	add.w	r2, r3, #8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002122:	b480      	push	{r7}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d103      	bne.n	8002142 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	e00c      	b.n	800215c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3308      	adds	r3, #8
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	e002      	b.n	8002150 <vListInsert+0x2e>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	429a      	cmp	r2, r3
 800215a:	d2f6      	bcs.n	800214a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	601a      	str	r2, [r3, #0]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6892      	ldr	r2, [r2, #8]
 80021aa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6852      	ldr	r2, [r2, #4]
 80021b4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d103      	bne.n	80021c8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	1e5a      	subs	r2, r3, #1
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08c      	sub	sp, #48	; 0x30
 80021ec:	af04      	add	r7, sp, #16
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f001 f8dd 	bl	80033bc <pvPortMalloc>
 8002202:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00e      	beq.n	8002228 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800220a:	2058      	movs	r0, #88	; 0x58
 800220c:	f001 f8d6 	bl	80033bc <pvPortMalloc>
 8002210:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	631a      	str	r2, [r3, #48]	; 0x30
 800221e:	e005      	b.n	800222c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002220:	6978      	ldr	r0, [r7, #20]
 8002222:	f001 f9ab 	bl	800357c <vPortFree>
 8002226:	e001      	b.n	800222c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d013      	beq.n	800225a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002232:	88fa      	ldrh	r2, [r7, #6]
 8002234:	2300      	movs	r3, #0
 8002236:	9303      	str	r3, [sp, #12]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	9302      	str	r3, [sp, #8]
 800223c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f80e 	bl	800226a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800224e:	69f8      	ldr	r0, [r7, #28]
 8002250:	f000 f8b0 	bl	80023b4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002254:	2301      	movs	r3, #1
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	e002      	b.n	8002260 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002260:	69bb      	ldr	r3, [r7, #24]
    }
 8002262:	4618      	mov	r0, r3
 8002264:	3720      	adds	r7, #32
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b088      	sub	sp, #32
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	461a      	mov	r2, r3
 8002282:	21a5      	movs	r1, #165	; 0xa5
 8002284:	f003 fae2 	bl	800584c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002292:	3b01      	subs	r3, #1
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	f023 0307 	bic.w	r3, r3, #7
 80022a0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00a      	beq.n	80022c2 <prvInitialiseNewTask+0x58>
        __asm volatile
 80022ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b0:	f383 8811 	msr	BASEPRI, r3
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	617b      	str	r3, [r7, #20]
    }
 80022be:	bf00      	nop
 80022c0:	e7fe      	b.n	80022c0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01f      	beq.n	8002308 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	e012      	b.n	80022f4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	4413      	add	r3, r2
 80022d4:	7819      	ldrb	r1, [r3, #0]
 80022d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	4413      	add	r3, r2
 80022dc:	3334      	adds	r3, #52	; 0x34
 80022de:	460a      	mov	r2, r1
 80022e0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	4413      	add	r3, r2
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d006      	beq.n	80022fc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3301      	adds	r3, #1
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	2b09      	cmp	r3, #9
 80022f8:	d9e9      	bls.n	80022ce <prvInitialiseNewTask+0x64>
 80022fa:	e000      	b.n	80022fe <prvInitialiseNewTask+0x94>
            {
                break;
 80022fc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002306:	e003      	b.n	8002310 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002312:	2b04      	cmp	r3, #4
 8002314:	d90a      	bls.n	800232c <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231a:	f383 8811 	msr	BASEPRI, r3
 800231e:	f3bf 8f6f 	isb	sy
 8002322:	f3bf 8f4f 	dsb	sy
 8002326:	613b      	str	r3, [r7, #16]
    }
 8002328:	bf00      	nop
 800232a:	e7fe      	b.n	800232a <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800232c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232e:	2b04      	cmp	r3, #4
 8002330:	d901      	bls.n	8002336 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002332:	2304      	movs	r3, #4
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800233a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002340:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002344:	2200      	movs	r2, #0
 8002346:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234a:	3304      	adds	r3, #4
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fedb 	bl	8002108 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002354:	3318      	adds	r3, #24
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fed6 	bl	8002108 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800235c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002360:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002364:	f1c3 0205 	rsb	r2, r3, #5
 8002368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800236c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002370:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002374:	3350      	adds	r3, #80	; 0x50
 8002376:	2204      	movs	r2, #4
 8002378:	2100      	movs	r1, #0
 800237a:	4618      	mov	r0, r3
 800237c:	f003 fa66 	bl	800584c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002382:	3354      	adds	r3, #84	; 0x54
 8002384:	2201      	movs	r2, #1
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f003 fa5f 	bl	800584c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	68f9      	ldr	r1, [r7, #12]
 8002392:	69b8      	ldr	r0, [r7, #24]
 8002394:	f000 fd3a 	bl	8002e0c <pxPortInitialiseStack>
 8002398:	4602      	mov	r2, r0
 800239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023a8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023aa:	bf00      	nop
 80023ac:	3720      	adds	r7, #32
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80023b4:	b5b0      	push	{r4, r5, r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80023bc:	f000 fed2 	bl	8003164 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80023c0:	4b4f      	ldr	r3, [pc, #316]	; (8002500 <prvAddNewTaskToReadyList+0x14c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	3301      	adds	r3, #1
 80023c6:	4a4e      	ldr	r2, [pc, #312]	; (8002500 <prvAddNewTaskToReadyList+0x14c>)
 80023c8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80023ca:	4b4e      	ldr	r3, [pc, #312]	; (8002504 <prvAddNewTaskToReadyList+0x150>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80023d2:	4a4c      	ldr	r2, [pc, #304]	; (8002504 <prvAddNewTaskToReadyList+0x150>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023d8:	4b49      	ldr	r3, [pc, #292]	; (8002500 <prvAddNewTaskToReadyList+0x14c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d110      	bne.n	8002402 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80023e0:	f000 fbee 	bl	8002bc0 <prvInitialiseTaskLists>
 80023e4:	e00d      	b.n	8002402 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80023e6:	4b48      	ldr	r3, [pc, #288]	; (8002508 <prvAddNewTaskToReadyList+0x154>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023ee:	4b45      	ldr	r3, [pc, #276]	; (8002504 <prvAddNewTaskToReadyList+0x150>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d802      	bhi.n	8002402 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023fc:	4a41      	ldr	r2, [pc, #260]	; (8002504 <prvAddNewTaskToReadyList+0x150>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002402:	4b42      	ldr	r3, [pc, #264]	; (800250c <prvAddNewTaskToReadyList+0x158>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3301      	adds	r3, #1
 8002408:	4a40      	ldr	r2, [pc, #256]	; (800250c <prvAddNewTaskToReadyList+0x158>)
 800240a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800240c:	4b3f      	ldr	r3, [pc, #252]	; (800250c <prvAddNewTaskToReadyList+0x158>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d016      	beq.n	8002448 <prvAddNewTaskToReadyList+0x94>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4618      	mov	r0, r3
 800241e:	f002 ff61 	bl	80052e4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	461d      	mov	r5, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	461c      	mov	r4, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	1ae3      	subs	r3, r4, r3
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	462b      	mov	r3, r5
 8002444:	f001 fa68 	bl	8003918 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4618      	mov	r0, r3
 800244c:	f002 ffce 	bl	80053ec <SEGGER_SYSVIEW_OnTaskStartReady>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	2201      	movs	r2, #1
 8002456:	409a      	lsls	r2, r3
 8002458:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <prvAddNewTaskToReadyList+0x15c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4313      	orrs	r3, r2
 800245e:	4a2c      	ldr	r2, [pc, #176]	; (8002510 <prvAddNewTaskToReadyList+0x15c>)
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002466:	492b      	ldr	r1, [pc, #172]	; (8002514 <prvAddNewTaskToReadyList+0x160>)
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	3304      	adds	r3, #4
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	3204      	adds	r2, #4
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	1d1a      	adds	r2, r3, #4
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4a1b      	ldr	r2, [pc, #108]	; (8002514 <prvAddNewTaskToReadyList+0x160>)
 80024a6:	441a      	add	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	615a      	str	r2, [r3, #20]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b0:	4918      	ldr	r1, [pc, #96]	; (8002514 <prvAddNewTaskToReadyList+0x160>)
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	1c59      	adds	r1, r3, #1
 80024c0:	4814      	ldr	r0, [pc, #80]	; (8002514 <prvAddNewTaskToReadyList+0x160>)
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4403      	add	r3, r0
 80024cc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80024ce:	f000 fe79 	bl	80031c4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80024d2:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <prvAddNewTaskToReadyList+0x154>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00e      	beq.n	80024f8 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024da:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <prvAddNewTaskToReadyList+0x150>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d207      	bcs.n	80024f8 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <prvAddNewTaskToReadyList+0x164>)
 80024ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002500:	20000154 	.word	0x20000154
 8002504:	2000007c 	.word	0x2000007c
 8002508:	20000160 	.word	0x20000160
 800250c:	20000170 	.word	0x20000170
 8002510:	2000015c 	.word	0x2000015c
 8002514:	20000080 	.word	0x20000080
 8002518:	e000ed04 	.word	0xe000ed04

0800251c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d01b      	beq.n	8002566 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <vTaskDelay+0x68>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <vTaskDelay+0x30>
        __asm volatile
 8002536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253a:	f383 8811 	msr	BASEPRI, r3
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	60bb      	str	r3, [r7, #8]
    }
 8002548:	bf00      	nop
 800254a:	e7fe      	b.n	800254a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800254c:	f000 f87a 	bl	8002644 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	2023      	movs	r0, #35	; 0x23
 8002554:	f002 fad2 	bl	8004afc <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002558:	2100      	movs	r1, #0
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fbca 	bl	8002cf4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002560:	f000 f87e 	bl	8002660 <xTaskResumeAll>
 8002564:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d107      	bne.n	800257c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <vTaskDelay+0x6c>)
 800256e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2000017c 	.word	0x2000017c
 8002588:	e000ed04 	.word	0xe000ed04

0800258c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002592:	4b24      	ldr	r3, [pc, #144]	; (8002624 <vTaskStartScheduler+0x98>)
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	2300      	movs	r3, #0
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2300      	movs	r3, #0
 800259c:	2282      	movs	r2, #130	; 0x82
 800259e:	4922      	ldr	r1, [pc, #136]	; (8002628 <vTaskStartScheduler+0x9c>)
 80025a0:	4822      	ldr	r0, [pc, #136]	; (800262c <vTaskStartScheduler+0xa0>)
 80025a2:	f7ff fe21 	bl	80021e8 <xTaskCreate>
 80025a6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d124      	bne.n	80025f8 <vTaskStartScheduler+0x6c>
        __asm volatile
 80025ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	60bb      	str	r3, [r7, #8]
    }
 80025c0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80025c2:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <vTaskStartScheduler+0xa4>)
 80025c4:	f04f 32ff 	mov.w	r2, #4294967295
 80025c8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80025ca:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <vTaskStartScheduler+0xa8>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025d0:	4b19      	ldr	r3, [pc, #100]	; (8002638 <vTaskStartScheduler+0xac>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80025d6:	4b19      	ldr	r3, [pc, #100]	; (800263c <vTaskStartScheduler+0xb0>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4b12      	ldr	r3, [pc, #72]	; (8002624 <vTaskStartScheduler+0x98>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d102      	bne.n	80025e8 <vTaskStartScheduler+0x5c>
 80025e2:	f002 fe63 	bl	80052ac <SEGGER_SYSVIEW_OnIdle>
 80025e6:	e004      	b.n	80025f2 <vTaskStartScheduler+0x66>
 80025e8:	4b14      	ldr	r3, [pc, #80]	; (800263c <vTaskStartScheduler+0xb0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f002 febb 	bl	8005368 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80025f2:	f000 fc97 	bl	8002f24 <xPortStartScheduler>
 80025f6:	e00e      	b.n	8002616 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fe:	d10a      	bne.n	8002616 <vTaskStartScheduler+0x8a>
        __asm volatile
 8002600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002604:	f383 8811 	msr	BASEPRI, r3
 8002608:	f3bf 8f6f 	isb	sy
 800260c:	f3bf 8f4f 	dsb	sy
 8002610:	607b      	str	r3, [r7, #4]
    }
 8002612:	bf00      	nop
 8002614:	e7fe      	b.n	8002614 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <vTaskStartScheduler+0xb4>)
 8002618:	681b      	ldr	r3, [r3, #0]
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000178 	.word	0x20000178
 8002628:	080058d4 	.word	0x080058d4
 800262c:	08002b8d 	.word	0x08002b8d
 8002630:	20000174 	.word	0x20000174
 8002634:	20000160 	.word	0x20000160
 8002638:	20000158 	.word	0x20000158
 800263c:	2000007c 	.word	0x2000007c
 8002640:	2000000c 	.word	0x2000000c

08002644 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <vTaskSuspendAll+0x18>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3301      	adds	r3, #1
 800264e:	4a03      	ldr	r2, [pc, #12]	; (800265c <vTaskSuspendAll+0x18>)
 8002650:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002652:	bf00      	nop
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	2000017c 	.word	0x2000017c

08002660 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800266a:	2300      	movs	r3, #0
 800266c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800266e:	4b73      	ldr	r3, [pc, #460]	; (800283c <xTaskResumeAll+0x1dc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10a      	bne.n	800268c <xTaskResumeAll+0x2c>
        __asm volatile
 8002676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267a:	f383 8811 	msr	BASEPRI, r3
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	607b      	str	r3, [r7, #4]
    }
 8002688:	bf00      	nop
 800268a:	e7fe      	b.n	800268a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800268c:	f000 fd6a 	bl	8003164 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002690:	4b6a      	ldr	r3, [pc, #424]	; (800283c <xTaskResumeAll+0x1dc>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	3b01      	subs	r3, #1
 8002696:	4a69      	ldr	r2, [pc, #420]	; (800283c <xTaskResumeAll+0x1dc>)
 8002698:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800269a:	4b68      	ldr	r3, [pc, #416]	; (800283c <xTaskResumeAll+0x1dc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f040 80c4 	bne.w	800282c <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80026a4:	4b66      	ldr	r3, [pc, #408]	; (8002840 <xTaskResumeAll+0x1e0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80bf 	beq.w	800282c <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026ae:	e08e      	b.n	80027ce <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026b0:	4b64      	ldr	r3, [pc, #400]	; (8002844 <xTaskResumeAll+0x1e4>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	6a12      	ldr	r2, [r2, #32]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	69d2      	ldr	r2, [r2, #28]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3318      	adds	r3, #24
 80026da:	429a      	cmp	r2, r3
 80026dc:	d103      	bne.n	80026e6 <xTaskResumeAll+0x86>
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	6a1a      	ldr	r2, [r3, #32]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	2200      	movs	r2, #0
 80026ea:	629a      	str	r2, [r3, #40]	; 0x28
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	1e5a      	subs	r2, r3, #1
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	69fa      	ldr	r2, [r7, #28]
 8002702:	68d2      	ldr	r2, [r2, #12]
 8002704:	609a      	str	r2, [r3, #8]
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	6892      	ldr	r2, [r2, #8]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	3304      	adds	r3, #4
 8002718:	429a      	cmp	r2, r3
 800271a:	d103      	bne.n	8002724 <xTaskResumeAll+0xc4>
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	2200      	movs	r2, #0
 8002728:	615a      	str	r2, [r3, #20]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	1e5a      	subs	r2, r3, #1
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	4618      	mov	r0, r3
 8002738:	f002 fe58 	bl	80053ec <SEGGER_SYSVIEW_OnTaskStartReady>
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	2201      	movs	r2, #1
 8002742:	409a      	lsls	r2, r3
 8002744:	4b40      	ldr	r3, [pc, #256]	; (8002848 <xTaskResumeAll+0x1e8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4313      	orrs	r3, r2
 800274a:	4a3f      	ldr	r2, [pc, #252]	; (8002848 <xTaskResumeAll+0x1e8>)
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002752:	493e      	ldr	r1, [pc, #248]	; (800284c <xTaskResumeAll+0x1ec>)
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	3304      	adds	r3, #4
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	3204      	adds	r2, #4
 800277a:	605a      	str	r2, [r3, #4]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	1d1a      	adds	r2, r3, #4
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4a2e      	ldr	r2, [pc, #184]	; (800284c <xTaskResumeAll+0x1ec>)
 8002792:	441a      	add	r2, r3
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	615a      	str	r2, [r3, #20]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279c:	492b      	ldr	r1, [pc, #172]	; (800284c <xTaskResumeAll+0x1ec>)
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	1c59      	adds	r1, r3, #1
 80027ac:	4827      	ldr	r0, [pc, #156]	; (800284c <xTaskResumeAll+0x1ec>)
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4403      	add	r3, r0
 80027b8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027be:	4b24      	ldr	r3, [pc, #144]	; (8002850 <xTaskResumeAll+0x1f0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d302      	bcc.n	80027ce <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80027c8:	4b22      	ldr	r3, [pc, #136]	; (8002854 <xTaskResumeAll+0x1f4>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027ce:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <xTaskResumeAll+0x1e4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f47f af6c 	bne.w	80026b0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80027de:	f000 fa6d 	bl	8002cbc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80027e2:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <xTaskResumeAll+0x1f8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d010      	beq.n	8002810 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80027ee:	f000 f849 	bl	8002884 <xTaskIncrementTick>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <xTaskResumeAll+0x1f4>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	3b01      	subs	r3, #1
 8002802:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f1      	bne.n	80027ee <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800280a:	4b13      	ldr	r3, [pc, #76]	; (8002858 <xTaskResumeAll+0x1f8>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <xTaskResumeAll+0x1f4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d009      	beq.n	800282c <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002818:	2301      	movs	r3, #1
 800281a:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <xTaskResumeAll+0x1fc>)
 800281e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800282c:	f000 fcca 	bl	80031c4 <vPortExitCritical>

    return xAlreadyYielded;
 8002830:	69bb      	ldr	r3, [r7, #24]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3720      	adds	r7, #32
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	2000017c 	.word	0x2000017c
 8002840:	20000154 	.word	0x20000154
 8002844:	20000114 	.word	0x20000114
 8002848:	2000015c 	.word	0x2000015c
 800284c:	20000080 	.word	0x20000080
 8002850:	2000007c 	.word	0x2000007c
 8002854:	20000168 	.word	0x20000168
 8002858:	20000164 	.word	0x20000164
 800285c:	e000ed04 	.word	0xe000ed04

08002860 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002866:	f000 fd69 	bl	800333c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800286a:	2300      	movs	r3, #0
 800286c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800286e:	4b04      	ldr	r3, [pc, #16]	; (8002880 <xTaskGetTickCountFromISR+0x20>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002874:	683b      	ldr	r3, [r7, #0]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000158 	.word	0x20000158

08002884 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08a      	sub	sp, #40	; 0x28
 8002888:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800288e:	4b7f      	ldr	r3, [pc, #508]	; (8002a8c <xTaskIncrementTick+0x208>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	f040 80f0 	bne.w	8002a78 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002898:	4b7d      	ldr	r3, [pc, #500]	; (8002a90 <xTaskIncrementTick+0x20c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80028a0:	4a7b      	ldr	r2, [pc, #492]	; (8002a90 <xTaskIncrementTick+0x20c>)
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d120      	bne.n	80028ee <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80028ac:	4b79      	ldr	r3, [pc, #484]	; (8002a94 <xTaskIncrementTick+0x210>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <xTaskIncrementTick+0x48>
        __asm volatile
 80028b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ba:	f383 8811 	msr	BASEPRI, r3
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	607b      	str	r3, [r7, #4]
    }
 80028c8:	bf00      	nop
 80028ca:	e7fe      	b.n	80028ca <xTaskIncrementTick+0x46>
 80028cc:	4b71      	ldr	r3, [pc, #452]	; (8002a94 <xTaskIncrementTick+0x210>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	61fb      	str	r3, [r7, #28]
 80028d2:	4b71      	ldr	r3, [pc, #452]	; (8002a98 <xTaskIncrementTick+0x214>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a6f      	ldr	r2, [pc, #444]	; (8002a94 <xTaskIncrementTick+0x210>)
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	4a6f      	ldr	r2, [pc, #444]	; (8002a98 <xTaskIncrementTick+0x214>)
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b6e      	ldr	r3, [pc, #440]	; (8002a9c <xTaskIncrementTick+0x218>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	4a6d      	ldr	r2, [pc, #436]	; (8002a9c <xTaskIncrementTick+0x218>)
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	f000 f9e7 	bl	8002cbc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80028ee:	4b6c      	ldr	r3, [pc, #432]	; (8002aa0 <xTaskIncrementTick+0x21c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6a3a      	ldr	r2, [r7, #32]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	f0c0 80aa 	bcc.w	8002a4e <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028fa:	4b66      	ldr	r3, [pc, #408]	; (8002a94 <xTaskIncrementTick+0x210>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d104      	bne.n	800290e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002904:	4b66      	ldr	r3, [pc, #408]	; (8002aa0 <xTaskIncrementTick+0x21c>)
 8002906:	f04f 32ff 	mov.w	r2, #4294967295
 800290a:	601a      	str	r2, [r3, #0]
                    break;
 800290c:	e09f      	b.n	8002a4e <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800290e:	4b61      	ldr	r3, [pc, #388]	; (8002a94 <xTaskIncrementTick+0x210>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800291e:	6a3a      	ldr	r2, [r7, #32]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	429a      	cmp	r2, r3
 8002924:	d203      	bcs.n	800292e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002926:	4a5e      	ldr	r2, [pc, #376]	; (8002aa0 <xTaskIncrementTick+0x21c>)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800292c:	e08f      	b.n	8002a4e <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	68d2      	ldr	r2, [r2, #12]
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	6892      	ldr	r2, [r2, #8]
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	3304      	adds	r3, #4
 8002950:	429a      	cmp	r2, r3
 8002952:	d103      	bne.n	800295c <xTaskIncrementTick+0xd8>
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2200      	movs	r2, #0
 8002960:	615a      	str	r2, [r3, #20]
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	1e5a      	subs	r2, r3, #1
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01e      	beq.n	80029b2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	6a12      	ldr	r2, [r2, #32]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	69d2      	ldr	r2, [r2, #28]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	3318      	adds	r3, #24
 8002996:	429a      	cmp	r2, r3
 8002998:	d103      	bne.n	80029a2 <xTaskIncrementTick+0x11e>
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	6a1a      	ldr	r2, [r3, #32]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	2200      	movs	r2, #0
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	1e5a      	subs	r2, r3, #1
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f002 fd19 	bl	80053ec <SEGGER_SYSVIEW_OnTaskStartReady>
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029be:	2201      	movs	r2, #1
 80029c0:	409a      	lsls	r2, r3
 80029c2:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <xTaskIncrementTick+0x220>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	4a36      	ldr	r2, [pc, #216]	; (8002aa4 <xTaskIncrementTick+0x220>)
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d0:	4935      	ldr	r1, [pc, #212]	; (8002aa8 <xTaskIncrementTick+0x224>)
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	3304      	adds	r3, #4
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	60da      	str	r2, [r3, #12]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	3204      	adds	r2, #4
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	1d1a      	adds	r2, r3, #4
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4a26      	ldr	r2, [pc, #152]	; (8002aa8 <xTaskIncrementTick+0x224>)
 8002a10:	441a      	add	r2, r3
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	615a      	str	r2, [r3, #20]
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1a:	4923      	ldr	r1, [pc, #140]	; (8002aa8 <xTaskIncrementTick+0x224>)
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	1c59      	adds	r1, r3, #1
 8002a2a:	481f      	ldr	r0, [pc, #124]	; (8002aa8 <xTaskIncrementTick+0x224>)
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4403      	add	r3, r0
 8002a36:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <xTaskIncrementTick+0x228>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	429a      	cmp	r2, r3
 8002a44:	f4ff af59 	bcc.w	80028fa <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a4c:	e755      	b.n	80028fa <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a4e:	4b17      	ldr	r3, [pc, #92]	; (8002aac <xTaskIncrementTick+0x228>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a54:	4914      	ldr	r1, [pc, #80]	; (8002aa8 <xTaskIncrementTick+0x224>)
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d901      	bls.n	8002a6a <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 8002a66:	2301      	movs	r3, #1
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002a6a:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <xTaskIncrementTick+0x22c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d007      	beq.n	8002a82 <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 8002a72:	2301      	movs	r3, #1
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
 8002a76:	e004      	b.n	8002a82 <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002a78:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <xTaskIncrementTick+0x230>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	4a0d      	ldr	r2, [pc, #52]	; (8002ab4 <xTaskIncrementTick+0x230>)
 8002a80:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3728      	adds	r7, #40	; 0x28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	2000017c 	.word	0x2000017c
 8002a90:	20000158 	.word	0x20000158
 8002a94:	2000010c 	.word	0x2000010c
 8002a98:	20000110 	.word	0x20000110
 8002a9c:	2000016c 	.word	0x2000016c
 8002aa0:	20000174 	.word	0x20000174
 8002aa4:	2000015c 	.word	0x2000015c
 8002aa8:	20000080 	.word	0x20000080
 8002aac:	2000007c 	.word	0x2000007c
 8002ab0:	20000168 	.word	0x20000168
 8002ab4:	20000164 	.word	0x20000164

08002ab8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002abe:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <vTaskSwitchContext+0xbc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002ac6:	4b2c      	ldr	r3, [pc, #176]	; (8002b78 <vTaskSwitchContext+0xc0>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002acc:	e04d      	b.n	8002b6a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002ace:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <vTaskSwitchContext+0xc0>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ad4:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <vTaskSwitchContext+0xc4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002ae2:	7afb      	ldrb	r3, [r7, #11]
 8002ae4:	f1c3 031f 	rsb	r3, r3, #31
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	4925      	ldr	r1, [pc, #148]	; (8002b80 <vTaskSwitchContext+0xc8>)
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10a      	bne.n	8002b14 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	607b      	str	r3, [r7, #4]
    }
 8002b10:	bf00      	nop
 8002b12:	e7fe      	b.n	8002b12 <vTaskSwitchContext+0x5a>
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4a18      	ldr	r2, [pc, #96]	; (8002b80 <vTaskSwitchContext+0xc8>)
 8002b20:	4413      	add	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	3308      	adds	r3, #8
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d104      	bne.n	8002b44 <vTaskSwitchContext+0x8c>
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	4a0e      	ldr	r2, [pc, #56]	; (8002b84 <vTaskSwitchContext+0xcc>)
 8002b4c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <vTaskSwitchContext+0xcc>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <vTaskSwitchContext+0xd0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d102      	bne.n	8002b60 <vTaskSwitchContext+0xa8>
 8002b5a:	f002 fba7 	bl	80052ac <SEGGER_SYSVIEW_OnIdle>
}
 8002b5e:	e004      	b.n	8002b6a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <vTaskSwitchContext+0xcc>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f002 fbff 	bl	8005368 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002b6a:	bf00      	nop
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000017c 	.word	0x2000017c
 8002b78:	20000168 	.word	0x20000168
 8002b7c:	2000015c 	.word	0x2000015c
 8002b80:	20000080 	.word	0x20000080
 8002b84:	2000007c 	.word	0x2000007c
 8002b88:	20000178 	.word	0x20000178

08002b8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002b94:	f000 f854 	bl	8002c40 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b98:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <prvIdleTask+0x2c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d907      	bls.n	8002bb0 <prvIdleTask+0x24>
                {
                    taskYIELD();
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <prvIdleTask+0x30>)
 8002ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8002bb0:	f7fd fd96 	bl	80006e0 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8002bb4:	e7ee      	b.n	8002b94 <prvIdleTask+0x8>
 8002bb6:	bf00      	nop
 8002bb8:	20000080 	.word	0x20000080
 8002bbc:	e000ed04 	.word	0xe000ed04

08002bc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	e00c      	b.n	8002be6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4a12      	ldr	r2, [pc, #72]	; (8002c20 <prvInitialiseTaskLists+0x60>)
 8002bd8:	4413      	add	r3, r2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fa74 	bl	80020c8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3301      	adds	r3, #1
 8002be4:	607b      	str	r3, [r7, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d9ef      	bls.n	8002bcc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002bec:	480d      	ldr	r0, [pc, #52]	; (8002c24 <prvInitialiseTaskLists+0x64>)
 8002bee:	f7ff fa6b 	bl	80020c8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002bf2:	480d      	ldr	r0, [pc, #52]	; (8002c28 <prvInitialiseTaskLists+0x68>)
 8002bf4:	f7ff fa68 	bl	80020c8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002bf8:	480c      	ldr	r0, [pc, #48]	; (8002c2c <prvInitialiseTaskLists+0x6c>)
 8002bfa:	f7ff fa65 	bl	80020c8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002bfe:	480c      	ldr	r0, [pc, #48]	; (8002c30 <prvInitialiseTaskLists+0x70>)
 8002c00:	f7ff fa62 	bl	80020c8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002c04:	480b      	ldr	r0, [pc, #44]	; (8002c34 <prvInitialiseTaskLists+0x74>)
 8002c06:	f7ff fa5f 	bl	80020c8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <prvInitialiseTaskLists+0x78>)
 8002c0c:	4a05      	ldr	r2, [pc, #20]	; (8002c24 <prvInitialiseTaskLists+0x64>)
 8002c0e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c10:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <prvInitialiseTaskLists+0x7c>)
 8002c12:	4a05      	ldr	r2, [pc, #20]	; (8002c28 <prvInitialiseTaskLists+0x68>)
 8002c14:	601a      	str	r2, [r3, #0]
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000080 	.word	0x20000080
 8002c24:	200000e4 	.word	0x200000e4
 8002c28:	200000f8 	.word	0x200000f8
 8002c2c:	20000114 	.word	0x20000114
 8002c30:	20000128 	.word	0x20000128
 8002c34:	20000140 	.word	0x20000140
 8002c38:	2000010c 	.word	0x2000010c
 8002c3c:	20000110 	.word	0x20000110

08002c40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c46:	e019      	b.n	8002c7c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002c48:	f000 fa8c 	bl	8003164 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c4c:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <prvCheckTasksWaitingTermination+0x50>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3304      	adds	r3, #4
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fa9b 	bl	8002194 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <prvCheckTasksWaitingTermination+0x54>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	4a0b      	ldr	r2, [pc, #44]	; (8002c94 <prvCheckTasksWaitingTermination+0x54>)
 8002c66:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <prvCheckTasksWaitingTermination+0x58>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <prvCheckTasksWaitingTermination+0x58>)
 8002c70:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002c72:	f000 faa7 	bl	80031c4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f810 	bl	8002c9c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <prvCheckTasksWaitingTermination+0x58>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e1      	bne.n	8002c48 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000128 	.word	0x20000128
 8002c94:	20000154 	.word	0x20000154
 8002c98:	2000013c 	.word	0x2000013c

08002c9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fc67 	bl	800357c <vPortFree>
                vPortFree( pxTCB );
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fc64 	bl	800357c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <prvResetNextTaskUnblockTime+0x30>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d104      	bne.n	8002cd4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <prvResetNextTaskUnblockTime+0x34>)
 8002ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002cd2:	e005      	b.n	8002ce0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <prvResetNextTaskUnblockTime+0x30>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <prvResetNextTaskUnblockTime+0x34>)
 8002cde:	6013      	str	r3, [r2, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	2000010c 	.word	0x2000010c
 8002cf0:	20000174 	.word	0x20000174

08002cf4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002cfe:	4b3c      	ldr	r3, [pc, #240]	; (8002df0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d04:	4b3b      	ldr	r3, [pc, #236]	; (8002df4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fa42 	bl	8002194 <uxListRemove>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10b      	bne.n	8002d2e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002d16:	4b37      	ldr	r3, [pc, #220]	; (8002df4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43da      	mvns	r2, r3
 8002d24:	4b34      	ldr	r3, [pc, #208]	; (8002df8 <prvAddCurrentTaskToDelayedList+0x104>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	4a33      	ldr	r2, [pc, #204]	; (8002df8 <prvAddCurrentTaskToDelayedList+0x104>)
 8002d2c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d124      	bne.n	8002d80 <prvAddCurrentTaskToDelayedList+0x8c>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d021      	beq.n	8002d80 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d3c:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <prvAddCurrentTaskToDelayedList+0x108>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	4b2c      	ldr	r3, [pc, #176]	; (8002df4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	609a      	str	r2, [r3, #8]
 8002d4a:	4b2a      	ldr	r3, [pc, #168]	; (8002df4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	6892      	ldr	r2, [r2, #8]
 8002d52:	60da      	str	r2, [r3, #12]
 8002d54:	4b27      	ldr	r3, [pc, #156]	; (8002df4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	3204      	adds	r2, #4
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	4b24      	ldr	r3, [pc, #144]	; (8002df4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	1d1a      	adds	r2, r3, #4
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	609a      	str	r2, [r3, #8]
 8002d6a:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a23      	ldr	r2, [pc, #140]	; (8002dfc <prvAddCurrentTaskToDelayedList+0x108>)
 8002d70:	615a      	str	r2, [r3, #20]
 8002d72:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <prvAddCurrentTaskToDelayedList+0x108>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3301      	adds	r3, #1
 8002d78:	4a20      	ldr	r2, [pc, #128]	; (8002dfc <prvAddCurrentTaskToDelayedList+0x108>)
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002d7e:	e032      	b.n	8002de6 <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4413      	add	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d88:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d20f      	bcs.n	8002db8 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002d98:	4b16      	ldr	r3, [pc, #88]	; (8002df4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2104      	movs	r1, #4
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f002 fb66 	bl	8005470 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002da4:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3304      	adds	r3, #4
 8002dae:	4619      	mov	r1, r3
 8002db0:	4610      	mov	r0, r2
 8002db2:	f7ff f9b6 	bl	8002122 <vListInsert>
}
 8002db6:	e016      	b.n	8002de6 <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002db8:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2104      	movs	r1, #4
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f002 fb56 	bl	8005470 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dc4:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <prvAddCurrentTaskToDelayedList+0x110>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	f7ff f9a6 	bl	8002122 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <prvAddCurrentTaskToDelayedList+0x114>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d202      	bcs.n	8002de6 <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8002de0:	4a09      	ldr	r2, [pc, #36]	; (8002e08 <prvAddCurrentTaskToDelayedList+0x114>)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6013      	str	r3, [r2, #0]
}
 8002de6:	bf00      	nop
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000158 	.word	0x20000158
 8002df4:	2000007c 	.word	0x2000007c
 8002df8:	2000015c 	.word	0x2000015c
 8002dfc:	20000140 	.word	0x20000140
 8002e00:	20000110 	.word	0x20000110
 8002e04:	2000010c 	.word	0x2000010c
 8002e08:	20000174 	.word	0x20000174

08002e0c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e24:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3b04      	subs	r3, #4
 8002e2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f023 0201 	bic.w	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3b04      	subs	r3, #4
 8002e3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002e3c:	4a0c      	ldr	r2, [pc, #48]	; (8002e70 <pxPortInitialiseStack+0x64>)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3b14      	subs	r3, #20
 8002e46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3b04      	subs	r3, #4
 8002e52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f06f 0202 	mvn.w	r2, #2
 8002e5a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	3b20      	subs	r3, #32
 8002e60:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002e62:	68fb      	ldr	r3, [r7, #12]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	08002e75 	.word	0x08002e75

08002e74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <prvTaskExitError+0x54>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e86:	d00a      	beq.n	8002e9e <prvTaskExitError+0x2a>
        __asm volatile
 8002e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	60fb      	str	r3, [r7, #12]
    }
 8002e9a:	bf00      	nop
 8002e9c:	e7fe      	b.n	8002e9c <prvTaskExitError+0x28>
        __asm volatile
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	60bb      	str	r3, [r7, #8]
    }
 8002eb0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002eb2:	bf00      	nop
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0fc      	beq.n	8002eb4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002eba:	bf00      	nop
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	20000010 	.word	0x20000010
 8002ecc:	00000000 	.word	0x00000000

08002ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002ed0:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <pxCurrentTCBConst2>)
 8002ed2:	6819      	ldr	r1, [r3, #0]
 8002ed4:	6808      	ldr	r0, [r1, #0]
 8002ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eda:	f380 8809 	msr	PSP, r0
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f04f 0000 	mov.w	r0, #0
 8002ee6:	f380 8811 	msr	BASEPRI, r0
 8002eea:	4770      	bx	lr
 8002eec:	f3af 8000 	nop.w

08002ef0 <pxCurrentTCBConst2>:
 8002ef0:	2000007c 	.word	0x2000007c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop

08002ef8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002ef8:	4808      	ldr	r0, [pc, #32]	; (8002f1c <prvPortStartFirstTask+0x24>)
 8002efa:	6800      	ldr	r0, [r0, #0]
 8002efc:	6800      	ldr	r0, [r0, #0]
 8002efe:	f380 8808 	msr	MSP, r0
 8002f02:	f04f 0000 	mov.w	r0, #0
 8002f06:	f380 8814 	msr	CONTROL, r0
 8002f0a:	b662      	cpsie	i
 8002f0c:	b661      	cpsie	f
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	df00      	svc	0
 8002f18:	bf00      	nop
 8002f1a:	0000      	.short	0x0000
 8002f1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop

08002f24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f2a:	4b46      	ldr	r3, [pc, #280]	; (8003044 <xPortStartScheduler+0x120>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a46      	ldr	r2, [pc, #280]	; (8003048 <xPortStartScheduler+0x124>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d10a      	bne.n	8002f4a <xPortStartScheduler+0x26>
        __asm volatile
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	613b      	str	r3, [r7, #16]
    }
 8002f46:	bf00      	nop
 8002f48:	e7fe      	b.n	8002f48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f4a:	4b3e      	ldr	r3, [pc, #248]	; (8003044 <xPortStartScheduler+0x120>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a3f      	ldr	r2, [pc, #252]	; (800304c <xPortStartScheduler+0x128>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d10a      	bne.n	8002f6a <xPortStartScheduler+0x46>
        __asm volatile
 8002f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	60fb      	str	r3, [r7, #12]
    }
 8002f66:	bf00      	nop
 8002f68:	e7fe      	b.n	8002f68 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f6a:	4b39      	ldr	r3, [pc, #228]	; (8003050 <xPortStartScheduler+0x12c>)
 8002f6c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	22ff      	movs	r2, #255	; 0xff
 8002f7a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4b31      	ldr	r3, [pc, #196]	; (8003054 <xPortStartScheduler+0x130>)
 8002f90:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f92:	4b31      	ldr	r3, [pc, #196]	; (8003058 <xPortStartScheduler+0x134>)
 8002f94:	2207      	movs	r2, #7
 8002f96:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f98:	e009      	b.n	8002fae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002f9a:	4b2f      	ldr	r3, [pc, #188]	; (8003058 <xPortStartScheduler+0x134>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	4a2d      	ldr	r2, [pc, #180]	; (8003058 <xPortStartScheduler+0x134>)
 8002fa2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb6:	2b80      	cmp	r3, #128	; 0x80
 8002fb8:	d0ef      	beq.n	8002f9a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002fba:	4b27      	ldr	r3, [pc, #156]	; (8003058 <xPortStartScheduler+0x134>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f1c3 0307 	rsb	r3, r3, #7
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d00a      	beq.n	8002fdc <xPortStartScheduler+0xb8>
        __asm volatile
 8002fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fca:	f383 8811 	msr	BASEPRI, r3
 8002fce:	f3bf 8f6f 	isb	sy
 8002fd2:	f3bf 8f4f 	dsb	sy
 8002fd6:	60bb      	str	r3, [r7, #8]
    }
 8002fd8:	bf00      	nop
 8002fda:	e7fe      	b.n	8002fda <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002fdc:	4b1e      	ldr	r3, [pc, #120]	; (8003058 <xPortStartScheduler+0x134>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	021b      	lsls	r3, r3, #8
 8002fe2:	4a1d      	ldr	r2, [pc, #116]	; (8003058 <xPortStartScheduler+0x134>)
 8002fe4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002fe6:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <xPortStartScheduler+0x134>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fee:	4a1a      	ldr	r2, [pc, #104]	; (8003058 <xPortStartScheduler+0x134>)
 8002ff0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002ffa:	4b18      	ldr	r3, [pc, #96]	; (800305c <xPortStartScheduler+0x138>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a17      	ldr	r2, [pc, #92]	; (800305c <xPortStartScheduler+0x138>)
 8003000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003004:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <xPortStartScheduler+0x138>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a14      	ldr	r2, [pc, #80]	; (800305c <xPortStartScheduler+0x138>)
 800300c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003010:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003012:	f000 f963 	bl	80032dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003016:	4b12      	ldr	r3, [pc, #72]	; (8003060 <xPortStartScheduler+0x13c>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800301c:	f000 f982 	bl	8003324 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003020:	4b10      	ldr	r3, [pc, #64]	; (8003064 <xPortStartScheduler+0x140>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a0f      	ldr	r2, [pc, #60]	; (8003064 <xPortStartScheduler+0x140>)
 8003026:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800302a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800302c:	f7ff ff64 	bl	8002ef8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003030:	f7ff fd42 	bl	8002ab8 <vTaskSwitchContext>
    prvTaskExitError();
 8003034:	f7ff ff1e 	bl	8002e74 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	e000ed00 	.word	0xe000ed00
 8003048:	410fc271 	.word	0x410fc271
 800304c:	410fc270 	.word	0x410fc270
 8003050:	e000e400 	.word	0xe000e400
 8003054:	20000180 	.word	0x20000180
 8003058:	20000184 	.word	0x20000184
 800305c:	e000ed20 	.word	0xe000ed20
 8003060:	20000010 	.word	0x20000010
 8003064:	e000ef34 	.word	0xe000ef34

08003068 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800306e:	4b37      	ldr	r3, [pc, #220]	; (800314c <vInitPrioGroupValue+0xe4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a37      	ldr	r2, [pc, #220]	; (8003150 <vInitPrioGroupValue+0xe8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d10a      	bne.n	800308e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	613b      	str	r3, [r7, #16]
    }
 800308a:	bf00      	nop
 800308c:	e7fe      	b.n	800308c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800308e:	4b2f      	ldr	r3, [pc, #188]	; (800314c <vInitPrioGroupValue+0xe4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a30      	ldr	r2, [pc, #192]	; (8003154 <vInitPrioGroupValue+0xec>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d10a      	bne.n	80030ae <vInitPrioGroupValue+0x46>
        __asm volatile
 8003098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	60fb      	str	r3, [r7, #12]
    }
 80030aa:	bf00      	nop
 80030ac:	e7fe      	b.n	80030ac <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80030ae:	4b2a      	ldr	r3, [pc, #168]	; (8003158 <vInitPrioGroupValue+0xf0>)
 80030b0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	22ff      	movs	r2, #255	; 0xff
 80030be:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	4b22      	ldr	r3, [pc, #136]	; (800315c <vInitPrioGroupValue+0xf4>)
 80030d4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80030d6:	4b22      	ldr	r3, [pc, #136]	; (8003160 <vInitPrioGroupValue+0xf8>)
 80030d8:	2207      	movs	r2, #7
 80030da:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030dc:	e009      	b.n	80030f2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80030de:	4b20      	ldr	r3, [pc, #128]	; (8003160 <vInitPrioGroupValue+0xf8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	4a1e      	ldr	r2, [pc, #120]	; (8003160 <vInitPrioGroupValue+0xf8>)
 80030e6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fa:	2b80      	cmp	r3, #128	; 0x80
 80030fc:	d0ef      	beq.n	80030de <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80030fe:	4b18      	ldr	r3, [pc, #96]	; (8003160 <vInitPrioGroupValue+0xf8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f1c3 0307 	rsb	r3, r3, #7
 8003106:	2b04      	cmp	r3, #4
 8003108:	d00a      	beq.n	8003120 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800310a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310e:	f383 8811 	msr	BASEPRI, r3
 8003112:	f3bf 8f6f 	isb	sy
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	60bb      	str	r3, [r7, #8]
    }
 800311c:	bf00      	nop
 800311e:	e7fe      	b.n	800311e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003120:	4b0f      	ldr	r3, [pc, #60]	; (8003160 <vInitPrioGroupValue+0xf8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	4a0e      	ldr	r2, [pc, #56]	; (8003160 <vInitPrioGroupValue+0xf8>)
 8003128:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <vInitPrioGroupValue+0xf8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003132:	4a0b      	ldr	r2, [pc, #44]	; (8003160 <vInitPrioGroupValue+0xf8>)
 8003134:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	b2da      	uxtb	r2, r3
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800313e:	bf00      	nop
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	e000ed00 	.word	0xe000ed00
 8003150:	410fc271 	.word	0x410fc271
 8003154:	410fc270 	.word	0x410fc270
 8003158:	e000e400 	.word	0xe000e400
 800315c:	20000180 	.word	0x20000180
 8003160:	20000184 	.word	0x20000184

08003164 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
        __asm volatile
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	607b      	str	r3, [r7, #4]
    }
 800317c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800317e:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <vPortEnterCritical+0x58>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3301      	adds	r3, #1
 8003184:	4a0d      	ldr	r2, [pc, #52]	; (80031bc <vPortEnterCritical+0x58>)
 8003186:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <vPortEnterCritical+0x58>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d10f      	bne.n	80031b0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <vPortEnterCritical+0x5c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <vPortEnterCritical+0x4c>
        __asm volatile
 800319a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319e:	f383 8811 	msr	BASEPRI, r3
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	f3bf 8f4f 	dsb	sy
 80031aa:	603b      	str	r3, [r7, #0]
    }
 80031ac:	bf00      	nop
 80031ae:	e7fe      	b.n	80031ae <vPortEnterCritical+0x4a>
    }
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	20000010 	.word	0x20000010
 80031c0:	e000ed04 	.word	0xe000ed04

080031c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <vPortExitCritical+0x50>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10a      	bne.n	80031e8 <vPortExitCritical+0x24>
        __asm volatile
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	607b      	str	r3, [r7, #4]
    }
 80031e4:	bf00      	nop
 80031e6:	e7fe      	b.n	80031e6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <vPortExitCritical+0x50>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	4a09      	ldr	r2, [pc, #36]	; (8003214 <vPortExitCritical+0x50>)
 80031f0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80031f2:	4b08      	ldr	r3, [pc, #32]	; (8003214 <vPortExitCritical+0x50>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d105      	bne.n	8003206 <vPortExitCritical+0x42>
 80031fa:	2300      	movs	r3, #0
 80031fc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003204:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000010 	.word	0x20000010
	...

08003220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003220:	f3ef 8009 	mrs	r0, PSP
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	4b15      	ldr	r3, [pc, #84]	; (8003280 <pxCurrentTCBConst>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	f01e 0f10 	tst.w	lr, #16
 8003230:	bf08      	it	eq
 8003232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800323a:	6010      	str	r0, [r2, #0]
 800323c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003244:	f380 8811 	msr	BASEPRI, r0
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f7ff fc32 	bl	8002ab8 <vTaskSwitchContext>
 8003254:	f04f 0000 	mov.w	r0, #0
 8003258:	f380 8811 	msr	BASEPRI, r0
 800325c:	bc09      	pop	{r0, r3}
 800325e:	6819      	ldr	r1, [r3, #0]
 8003260:	6808      	ldr	r0, [r1, #0]
 8003262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003266:	f01e 0f10 	tst.w	lr, #16
 800326a:	bf08      	it	eq
 800326c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003270:	f380 8809 	msr	PSP, r0
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	f3af 8000 	nop.w

08003280 <pxCurrentTCBConst>:
 8003280:	2000007c 	.word	0x2000007c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003284:	bf00      	nop
 8003286:	bf00      	nop

08003288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
        __asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	607b      	str	r3, [r7, #4]
    }
 80032a0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80032a2:	f001 ff89 	bl	80051b8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80032a6:	f7ff faed 	bl	8002884 <xTaskIncrementTick>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d006      	beq.n	80032be <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80032b0:	f001 ffe0 	bl	8005274 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80032b4:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <SysTick_Handler+0x50>)
 80032b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	e001      	b.n	80032c2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80032be:	f001 ffbd 	bl	800523c <SEGGER_SYSVIEW_RecordExitISR>
 80032c2:	2300      	movs	r3, #0
 80032c4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	f383 8811 	msr	BASEPRI, r3
    }
 80032cc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	e000ed04 	.word	0xe000ed04

080032dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <vPortSetupTimerInterrupt+0x34>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <vPortSetupTimerInterrupt+0x38>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <vPortSetupTimerInterrupt+0x3c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a0a      	ldr	r2, [pc, #40]	; (800331c <vPortSetupTimerInterrupt+0x40>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	099b      	lsrs	r3, r3, #6
 80032f8:	4a09      	ldr	r2, [pc, #36]	; (8003320 <vPortSetupTimerInterrupt+0x44>)
 80032fa:	3b01      	subs	r3, #1
 80032fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80032fe:	4b04      	ldr	r3, [pc, #16]	; (8003310 <vPortSetupTimerInterrupt+0x34>)
 8003300:	2207      	movs	r2, #7
 8003302:	601a      	str	r2, [r3, #0]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	e000e010 	.word	0xe000e010
 8003314:	e000e018 	.word	0xe000e018
 8003318:	20000000 	.word	0x20000000
 800331c:	10624dd3 	.word	0x10624dd3
 8003320:	e000e014 	.word	0xe000e014

08003324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003324:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003334 <vPortEnableVFP+0x10>
 8003328:	6801      	ldr	r1, [r0, #0]
 800332a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800332e:	6001      	str	r1, [r0, #0]
 8003330:	4770      	bx	lr
 8003332:	0000      	.short	0x0000
 8003334:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003338:	bf00      	nop
 800333a:	bf00      	nop

0800333c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003342:	f3ef 8305 	mrs	r3, IPSR
 8003346:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b0f      	cmp	r3, #15
 800334c:	d914      	bls.n	8003378 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800334e:	4a17      	ldr	r2, [pc, #92]	; (80033ac <vPortValidateInterruptPriority+0x70>)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4413      	add	r3, r2
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003358:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <vPortValidateInterruptPriority+0x74>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	7afa      	ldrb	r2, [r7, #11]
 800335e:	429a      	cmp	r2, r3
 8003360:	d20a      	bcs.n	8003378 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	607b      	str	r3, [r7, #4]
    }
 8003374:	bf00      	nop
 8003376:	e7fe      	b.n	8003376 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003378:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <vPortValidateInterruptPriority+0x78>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003380:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <vPortValidateInterruptPriority+0x7c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d90a      	bls.n	800339e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	603b      	str	r3, [r7, #0]
    }
 800339a:	bf00      	nop
 800339c:	e7fe      	b.n	800339c <vPortValidateInterruptPriority+0x60>
    }
 800339e:	bf00      	nop
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	e000e3f0 	.word	0xe000e3f0
 80033b0:	20000180 	.word	0x20000180
 80033b4:	e000ed0c 	.word	0xe000ed0c
 80033b8:	20000184 	.word	0x20000184

080033bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	; 0x28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80033c8:	f7ff f93c 	bl	8002644 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80033cc:	4b65      	ldr	r3, [pc, #404]	; (8003564 <pvPortMalloc+0x1a8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80033d4:	f000 f934 	bl	8003640 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80033d8:	4b63      	ldr	r3, [pc, #396]	; (8003568 <pvPortMalloc+0x1ac>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4013      	ands	r3, r2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 80a7 	bne.w	8003534 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d02d      	beq.n	8003448 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80033ec:	2208      	movs	r2, #8
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d227      	bcs.n	8003448 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80033f8:	2208      	movs	r2, #8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4413      	add	r3, r2
 80033fe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	2b00      	cmp	r3, #0
 8003408:	d021      	beq.n	800344e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f023 0307 	bic.w	r3, r3, #7
 8003410:	3308      	adds	r3, #8
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	429a      	cmp	r2, r3
 8003416:	d214      	bcs.n	8003442 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f023 0307 	bic.w	r3, r3, #7
 800341e:	3308      	adds	r3, #8
 8003420:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	2b00      	cmp	r3, #0
 800342a:	d010      	beq.n	800344e <pvPortMalloc+0x92>
        __asm volatile
 800342c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	617b      	str	r3, [r7, #20]
    }
 800343e:	bf00      	nop
 8003440:	e7fe      	b.n	8003440 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003446:	e002      	b.n	800344e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	607b      	str	r3, [r7, #4]
 800344c:	e000      	b.n	8003450 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800344e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d06e      	beq.n	8003534 <pvPortMalloc+0x178>
 8003456:	4b45      	ldr	r3, [pc, #276]	; (800356c <pvPortMalloc+0x1b0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	429a      	cmp	r2, r3
 800345e:	d869      	bhi.n	8003534 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003460:	4b43      	ldr	r3, [pc, #268]	; (8003570 <pvPortMalloc+0x1b4>)
 8003462:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003464:	4b42      	ldr	r3, [pc, #264]	; (8003570 <pvPortMalloc+0x1b4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800346a:	e004      	b.n	8003476 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	429a      	cmp	r2, r3
 800347e:	d903      	bls.n	8003488 <pvPortMalloc+0xcc>
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1f1      	bne.n	800346c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003488:	4b36      	ldr	r3, [pc, #216]	; (8003564 <pvPortMalloc+0x1a8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348e:	429a      	cmp	r2, r3
 8003490:	d050      	beq.n	8003534 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2208      	movs	r2, #8
 8003498:	4413      	add	r3, r2
 800349a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	1ad2      	subs	r2, r2, r3
 80034ac:	2308      	movs	r3, #8
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d91f      	bls.n	80034f4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80034b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <pvPortMalloc+0x120>
        __asm volatile
 80034c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	613b      	str	r3, [r7, #16]
    }
 80034d8:	bf00      	nop
 80034da:	e7fe      	b.n	80034da <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	1ad2      	subs	r2, r2, r3
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80034ee:	69b8      	ldr	r0, [r7, #24]
 80034f0:	f000 f908 	bl	8003704 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80034f4:	4b1d      	ldr	r3, [pc, #116]	; (800356c <pvPortMalloc+0x1b0>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	4a1b      	ldr	r2, [pc, #108]	; (800356c <pvPortMalloc+0x1b0>)
 8003500:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003502:	4b1a      	ldr	r3, [pc, #104]	; (800356c <pvPortMalloc+0x1b0>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <pvPortMalloc+0x1b8>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d203      	bcs.n	8003516 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800350e:	4b17      	ldr	r3, [pc, #92]	; (800356c <pvPortMalloc+0x1b0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a18      	ldr	r2, [pc, #96]	; (8003574 <pvPortMalloc+0x1b8>)
 8003514:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <pvPortMalloc+0x1ac>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	431a      	orrs	r2, r3
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800352a:	4b13      	ldr	r3, [pc, #76]	; (8003578 <pvPortMalloc+0x1bc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	3301      	adds	r3, #1
 8003530:	4a11      	ldr	r2, [pc, #68]	; (8003578 <pvPortMalloc+0x1bc>)
 8003532:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003534:	f7ff f894 	bl	8002660 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <pvPortMalloc+0x19c>
        __asm volatile
 8003542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	60fb      	str	r3, [r7, #12]
    }
 8003554:	bf00      	nop
 8003556:	e7fe      	b.n	8003556 <pvPortMalloc+0x19a>
    return pvReturn;
 8003558:	69fb      	ldr	r3, [r7, #28]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3728      	adds	r7, #40	; 0x28
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20012d90 	.word	0x20012d90
 8003568:	20012da4 	.word	0x20012da4
 800356c:	20012d94 	.word	0x20012d94
 8003570:	20012d88 	.word	0x20012d88
 8003574:	20012d98 	.word	0x20012d98
 8003578:	20012d9c 	.word	0x20012d9c

0800357c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d04d      	beq.n	800362a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800358e:	2308      	movs	r3, #8
 8003590:	425b      	negs	r3, r3
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	4413      	add	r3, r2
 8003596:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	4b24      	ldr	r3, [pc, #144]	; (8003634 <vPortFree+0xb8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10a      	bne.n	80035c0 <vPortFree+0x44>
        __asm volatile
 80035aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	60fb      	str	r3, [r7, #12]
    }
 80035bc:	bf00      	nop
 80035be:	e7fe      	b.n	80035be <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <vPortFree+0x62>
        __asm volatile
 80035c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035cc:	f383 8811 	msr	BASEPRI, r3
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	60bb      	str	r3, [r7, #8]
    }
 80035da:	bf00      	nop
 80035dc:	e7fe      	b.n	80035dc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	4b14      	ldr	r3, [pc, #80]	; (8003634 <vPortFree+0xb8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4013      	ands	r3, r2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01e      	beq.n	800362a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11a      	bne.n	800362a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <vPortFree+0xb8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	401a      	ands	r2, r3
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003604:	f7ff f81e 	bl	8002644 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <vPortFree+0xbc>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4413      	add	r3, r2
 8003612:	4a09      	ldr	r2, [pc, #36]	; (8003638 <vPortFree+0xbc>)
 8003614:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003616:	6938      	ldr	r0, [r7, #16]
 8003618:	f000 f874 	bl	8003704 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800361c:	4b07      	ldr	r3, [pc, #28]	; (800363c <vPortFree+0xc0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	4a06      	ldr	r2, [pc, #24]	; (800363c <vPortFree+0xc0>)
 8003624:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003626:	f7ff f81b 	bl	8002660 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800362a:	bf00      	nop
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20012da4 	.word	0x20012da4
 8003638:	20012d94 	.word	0x20012d94
 800363c:	20012da0 	.word	0x20012da0

08003640 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003646:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800364a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800364c:	4b27      	ldr	r3, [pc, #156]	; (80036ec <prvHeapInit+0xac>)
 800364e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00c      	beq.n	8003674 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3307      	adds	r3, #7
 800365e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0307 	bic.w	r3, r3, #7
 8003666:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <prvHeapInit+0xac>)
 8003670:	4413      	add	r3, r2
 8003672:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003678:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <prvHeapInit+0xb0>)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800367e:	4b1c      	ldr	r3, [pc, #112]	; (80036f0 <prvHeapInit+0xb0>)
 8003680:	2200      	movs	r2, #0
 8003682:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	4413      	add	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800368c:	2208      	movs	r2, #8
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0307 	bic.w	r3, r3, #7
 800369a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4a15      	ldr	r2, [pc, #84]	; (80036f4 <prvHeapInit+0xb4>)
 80036a0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80036a2:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <prvHeapInit+0xb4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2200      	movs	r2, #0
 80036a8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80036aa:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <prvHeapInit+0xb4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	1ad2      	subs	r2, r2, r3
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <prvHeapInit+0xb4>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <prvHeapInit+0xb8>)
 80036ce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	4a09      	ldr	r2, [pc, #36]	; (80036fc <prvHeapInit+0xbc>)
 80036d6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80036d8:	4b09      	ldr	r3, [pc, #36]	; (8003700 <prvHeapInit+0xc0>)
 80036da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80036de:	601a      	str	r2, [r3, #0]
}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	20000188 	.word	0x20000188
 80036f0:	20012d88 	.word	0x20012d88
 80036f4:	20012d90 	.word	0x20012d90
 80036f8:	20012d98 	.word	0x20012d98
 80036fc:	20012d94 	.word	0x20012d94
 8003700:	20012da4 	.word	0x20012da4

08003704 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800370c:	4b28      	ldr	r3, [pc, #160]	; (80037b0 <prvInsertBlockIntoFreeList+0xac>)
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	e002      	b.n	8003718 <prvInsertBlockIntoFreeList+0x14>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	429a      	cmp	r2, r3
 8003720:	d8f7      	bhi.n	8003712 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	4413      	add	r3, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	429a      	cmp	r2, r3
 8003732:	d108      	bne.n	8003746 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	441a      	add	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	441a      	add	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d118      	bne.n	800378c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	4b15      	ldr	r3, [pc, #84]	; (80037b4 <prvInsertBlockIntoFreeList+0xb0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d00d      	beq.n	8003782 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	441a      	add	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	e008      	b.n	8003794 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003782:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <prvInsertBlockIntoFreeList+0xb0>)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	e003      	b.n	8003794 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	429a      	cmp	r2, r3
 800379a:	d002      	beq.n	80037a2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20012d88 	.word	0x20012d88
 80037b4:	20012d90 	.word	0x20012d90

080037b8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80037bc:	4803      	ldr	r0, [pc, #12]	; (80037cc <_cbSendSystemDesc+0x14>)
 80037be:	f001 fca5 	bl	800510c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80037c2:	4803      	ldr	r0, [pc, #12]	; (80037d0 <_cbSendSystemDesc+0x18>)
 80037c4:	f001 fca2 	bl	800510c <SEGGER_SYSVIEW_SendSysDesc>
}
 80037c8:	bf00      	nop
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	080058dc 	.word	0x080058dc
 80037d0:	08005920 	.word	0x08005920

080037d4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80037d8:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <SEGGER_SYSVIEW_Conf+0x20>)
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <SEGGER_SYSVIEW_Conf+0x20>)
 80037de:	6819      	ldr	r1, [r3, #0]
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <SEGGER_SYSVIEW_Conf+0x24>)
 80037e2:	4a06      	ldr	r2, [pc, #24]	; (80037fc <SEGGER_SYSVIEW_Conf+0x28>)
 80037e4:	f001 f918 	bl	8004a18 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80037e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80037ec:	f001 f958 	bl	8004aa0 <SEGGER_SYSVIEW_SetRAMBase>
}
 80037f0:	bf00      	nop
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20000000 	.word	0x20000000
 80037f8:	080037b9 	.word	0x080037b9
 80037fc:	080059b4 	.word	0x080059b4

08003800 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003802:	b085      	sub	sp, #20
 8003804:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003806:	2300      	movs	r3, #0
 8003808:	607b      	str	r3, [r7, #4]
 800380a:	e033      	b.n	8003874 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800380c:	491e      	ldr	r1, [pc, #120]	; (8003888 <_cbSendTaskList+0x88>)
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	6818      	ldr	r0, [r3, #0]
 800381c:	491a      	ldr	r1, [pc, #104]	; (8003888 <_cbSendTaskList+0x88>)
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	3304      	adds	r3, #4
 800382c:	6819      	ldr	r1, [r3, #0]
 800382e:	4c16      	ldr	r4, [pc, #88]	; (8003888 <_cbSendTaskList+0x88>)
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4423      	add	r3, r4
 800383c:	3308      	adds	r3, #8
 800383e:	681c      	ldr	r4, [r3, #0]
 8003840:	4d11      	ldr	r5, [pc, #68]	; (8003888 <_cbSendTaskList+0x88>)
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	442b      	add	r3, r5
 800384e:	330c      	adds	r3, #12
 8003850:	681d      	ldr	r5, [r3, #0]
 8003852:	4e0d      	ldr	r6, [pc, #52]	; (8003888 <_cbSendTaskList+0x88>)
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4433      	add	r3, r6
 8003860:	3310      	adds	r3, #16
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	462b      	mov	r3, r5
 8003868:	4622      	mov	r2, r4
 800386a:	f000 f8bd 	bl	80039e8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3301      	adds	r3, #1
 8003872:	607b      	str	r3, [r7, #4]
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <_cbSendTaskList+0x8c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	429a      	cmp	r2, r3
 800387c:	d3c6      	bcc.n	800380c <_cbSendTaskList+0xc>
  }
}
 800387e:	bf00      	nop
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003888:	20012da8 	.word	0x20012da8
 800388c:	20012e48 	.word	0x20012e48

08003890 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003898:	f7fe ffe2 	bl	8002860 <xTaskGetTickCountFromISR>
 800389c:	4603      	mov	r3, r0
 800389e:	2200      	movs	r2, #0
 80038a0:	469a      	mov	sl, r3
 80038a2:	4693      	mov	fp, r2
 80038a4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80038a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	f04f 0a00 	mov.w	sl, #0
 80038b4:	f04f 0b00 	mov.w	fp, #0
 80038b8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80038bc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80038c0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80038c4:	4652      	mov	r2, sl
 80038c6:	465b      	mov	r3, fp
 80038c8:	1a14      	subs	r4, r2, r0
 80038ca:	eb63 0501 	sbc.w	r5, r3, r1
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	00ab      	lsls	r3, r5, #2
 80038d8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80038dc:	00a2      	lsls	r2, r4, #2
 80038de:	4614      	mov	r4, r2
 80038e0:	461d      	mov	r5, r3
 80038e2:	eb14 0800 	adds.w	r8, r4, r0
 80038e6:	eb45 0901 	adc.w	r9, r5, r1
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038fe:	4690      	mov	r8, r2
 8003900:	4699      	mov	r9, r3
 8003902:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003906:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800390a:	4610      	mov	r0, r2
 800390c:	4619      	mov	r1, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003918 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003926:	2205      	movs	r2, #5
 8003928:	492b      	ldr	r1, [pc, #172]	; (80039d8 <SYSVIEW_AddTask+0xc0>)
 800392a:	68b8      	ldr	r0, [r7, #8]
 800392c:	f001 ff70 	bl	8005810 <memcmp>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d04b      	beq.n	80039ce <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003936:	4b29      	ldr	r3, [pc, #164]	; (80039dc <SYSVIEW_AddTask+0xc4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b07      	cmp	r3, #7
 800393c:	d903      	bls.n	8003946 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800393e:	4828      	ldr	r0, [pc, #160]	; (80039e0 <SYSVIEW_AddTask+0xc8>)
 8003940:	f001 fee6 	bl	8005710 <SEGGER_SYSVIEW_Warn>
    return;
 8003944:	e044      	b.n	80039d0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003946:	4b25      	ldr	r3, [pc, #148]	; (80039dc <SYSVIEW_AddTask+0xc4>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4926      	ldr	r1, [pc, #152]	; (80039e4 <SYSVIEW_AddTask+0xcc>)
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800395a:	4b20      	ldr	r3, [pc, #128]	; (80039dc <SYSVIEW_AddTask+0xc4>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	4921      	ldr	r1, [pc, #132]	; (80039e4 <SYSVIEW_AddTask+0xcc>)
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	3304      	adds	r3, #4
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003970:	4b1a      	ldr	r3, [pc, #104]	; (80039dc <SYSVIEW_AddTask+0xc4>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	491b      	ldr	r1, [pc, #108]	; (80039e4 <SYSVIEW_AddTask+0xcc>)
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	3308      	adds	r3, #8
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003986:	4b15      	ldr	r3, [pc, #84]	; (80039dc <SYSVIEW_AddTask+0xc4>)
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	4916      	ldr	r1, [pc, #88]	; (80039e4 <SYSVIEW_AddTask+0xcc>)
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	330c      	adds	r3, #12
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800399c:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <SYSVIEW_AddTask+0xc4>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4910      	ldr	r1, [pc, #64]	; (80039e4 <SYSVIEW_AddTask+0xcc>)
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	3310      	adds	r3, #16
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80039b2:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <SYSVIEW_AddTask+0xc4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3301      	adds	r3, #1
 80039b8:	4a08      	ldr	r2, [pc, #32]	; (80039dc <SYSVIEW_AddTask+0xc4>)
 80039ba:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f80e 	bl	80039e8 <SYSVIEW_SendTaskInfo>
 80039cc:	e000      	b.n	80039d0 <SYSVIEW_AddTask+0xb8>
    return;
 80039ce:	bf00      	nop

}
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	08005930 	.word	0x08005930
 80039dc:	20012e48 	.word	0x20012e48
 80039e0:	08005938 	.word	0x08005938
 80039e4:	20012da8 	.word	0x20012da8

080039e8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	; 0x28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80039f6:	f107 0314 	add.w	r3, r7, #20
 80039fa:	2214      	movs	r2, #20
 80039fc:	2100      	movs	r1, #0
 80039fe:	4618      	mov	r0, r3
 8003a00:	f001 ff24 	bl	800584c <memset>
  TaskInfo.TaskID     = TaskID;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003a18:	f107 0314 	add.w	r3, r7, #20
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 fa7d 	bl	8004f1c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003a22:	bf00      	nop
 8003a24:	3728      	adds	r7, #40	; 0x28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003a32:	4b26      	ldr	r3, [pc, #152]	; (8003acc <_DoInit+0xa0>)
 8003a34:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003a36:	22a8      	movs	r2, #168	; 0xa8
 8003a38:	2100      	movs	r1, #0
 8003a3a:	6838      	ldr	r0, [r7, #0]
 8003a3c:	f001 ff06 	bl	800584c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2203      	movs	r2, #3
 8003a44:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2203      	movs	r2, #3
 8003a4a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	4a20      	ldr	r2, [pc, #128]	; (8003ad0 <_DoInit+0xa4>)
 8003a50:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	4a1f      	ldr	r2, [pc, #124]	; (8003ad4 <_DoInit+0xa8>)
 8003a56:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a5e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2200      	movs	r2, #0
 8003a64:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	4a16      	ldr	r2, [pc, #88]	; (8003ad0 <_DoInit+0xa4>)
 8003a76:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	4a17      	ldr	r2, [pc, #92]	; (8003ad8 <_DoInit+0xac>)
 8003a7c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2210      	movs	r2, #16
 8003a82:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2200      	movs	r2, #0
 8003a88:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2200      	movs	r2, #0
 8003a94:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003a96:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	607b      	str	r3, [r7, #4]
 8003a9e:	e00c      	b.n	8003aba <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f1c3 030f 	rsb	r3, r3, #15
 8003aa6:	4a0d      	ldr	r2, [pc, #52]	; (8003adc <_DoInit+0xb0>)
 8003aa8:	5cd1      	ldrb	r1, [r2, r3]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4413      	add	r3, r2
 8003ab0:	460a      	mov	r2, r1
 8003ab2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b0f      	cmp	r3, #15
 8003abe:	d9ef      	bls.n	8003aa0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003ac0:	f3bf 8f5f 	dmb	sy
}
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20012e4c 	.word	0x20012e4c
 8003ad0:	08005988 	.word	0x08005988
 8003ad4:	20012ef4 	.word	0x20012ef4
 8003ad8:	200132f4 	.word	0x200132f4
 8003adc:	080059bc 	.word	0x080059bc

08003ae0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08c      	sub	sp, #48	; 0x30
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003aec:	4b3e      	ldr	r3, [pc, #248]	; (8003be8 <SEGGER_RTT_ReadNoLock+0x108>)
 8003aee:	623b      	str	r3, [r7, #32]
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <SEGGER_RTT_ReadNoLock+0x1e>
 8003afa:	f7ff ff97 	bl	8003a2c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4613      	mov	r3, r2
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	4413      	add	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	3360      	adds	r3, #96	; 0x60
 8003b0a:	4a37      	ldr	r2, [pc, #220]	; (8003be8 <SEGGER_RTT_ReadNoLock+0x108>)
 8003b0c:	4413      	add	r3, r2
 8003b0e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003b20:	2300      	movs	r3, #0
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d92b      	bls.n	8003b84 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	bf28      	it	cs
 8003b3e:	4613      	movcs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	4413      	add	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	6939      	ldr	r1, [r7, #16]
 8003b50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b52:	f001 fe6d 	bl	8005830 <memcpy>
    NumBytesRead += NumBytesRem;
 8003b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	4413      	add	r3, r2
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	4413      	add	r3, r2
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d101      	bne.n	8003b84 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003b80:	2300      	movs	r3, #0
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4293      	cmp	r3, r2
 8003b92:	bf28      	it	cs
 8003b94:	4613      	movcs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d019      	beq.n	8003bd2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba4:	4413      	add	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	6939      	ldr	r1, [r7, #16]
 8003bac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bae:	f001 fe3f 	bl	8005830 <memcpy>
    NumBytesRead += NumBytesRem;
 8003bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	4413      	add	r3, r2
 8003bd0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bdc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3730      	adds	r7, #48	; 0x30
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	20012e4c 	.word	0x20012e4c

08003bec <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003bfa:	4b3d      	ldr	r3, [pc, #244]	; (8003cf0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <SEGGER_RTT_AllocUpBuffer+0x20>
 8003c08:	f7ff ff10 	bl	8003a2c <_DoInit>
  SEGGER_RTT_LOCK();
 8003c0c:	f3ef 8311 	mrs	r3, BASEPRI
 8003c10:	f04f 0120 	mov.w	r1, #32
 8003c14:	f381 8811 	msr	BASEPRI, r1
 8003c18:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c1a:	4b35      	ldr	r3, [pc, #212]	; (8003cf0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003c1c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003c22:	6939      	ldr	r1, [r7, #16]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	4613      	mov	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4413      	add	r3, r2
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	440b      	add	r3, r1
 8003c32:	3304      	adds	r3, #4
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	dbeb      	blt.n	8003c22 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003c4a:	e000      	b.n	8003c4e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003c4c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	da3f      	bge.n	8003cd8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003c58:	6939      	ldr	r1, [r7, #16]
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	4613      	mov	r3, r2
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4413      	add	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	440b      	add	r3, r1
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003c6c:	6939      	ldr	r1, [r7, #16]
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	4613      	mov	r3, r2
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	4413      	add	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	440b      	add	r3, r1
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003c82:	6939      	ldr	r1, [r7, #16]
 8003c84:	69fa      	ldr	r2, [r7, #28]
 8003c86:	4613      	mov	r3, r2
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	4413      	add	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	440b      	add	r3, r1
 8003c90:	3320      	adds	r3, #32
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003c96:	6939      	ldr	r1, [r7, #16]
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	4413      	add	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	440b      	add	r3, r1
 8003ca4:	3328      	adds	r3, #40	; 0x28
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003caa:	6939      	ldr	r1, [r7, #16]
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4413      	add	r3, r2
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	440b      	add	r3, r1
 8003cb8:	3324      	adds	r3, #36	; 0x24
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003cbe:	6939      	ldr	r1, [r7, #16]
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	4413      	add	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	440b      	add	r3, r1
 8003ccc:	332c      	adds	r3, #44	; 0x2c
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003cd2:	f3bf 8f5f 	dmb	sy
 8003cd6:	e002      	b.n	8003cde <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cdc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20012e4c 	.word	0x20012e4c

08003cf4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	; 0x28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003d02:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003d04:	623b      	str	r3, [r7, #32]
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003d10:	f7ff fe8c 	bl	8003a2c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d14:	4b1c      	ldr	r3, [pc, #112]	; (8003d88 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003d16:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d82c      	bhi.n	8003d78 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003d1e:	f3ef 8311 	mrs	r3, BASEPRI
 8003d22:	f04f 0120 	mov.w	r1, #32
 8003d26:	f381 8811 	msr	BASEPRI, r1
 8003d2a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	4413      	add	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	3360      	adds	r3, #96	; 0x60
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00e      	beq.n	8003d62 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d66:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d68:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
 8003d76:	e002      	b.n	8003d7e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003d78:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3728      	adds	r7, #40	; 0x28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	20012e4c 	.word	0x20012e4c

08003d8c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00f      	beq.n	8003dc2 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8003da2:	e002      	b.n	8003daa <_EncodeStr+0x1e>
      Len++;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	3301      	adds	r3, #1
 8003da8:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4413      	add	r3, r2
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f6      	bne.n	8003da4 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d901      	bls.n	8003dc2 <_EncodeStr+0x36>
      Len = Limit;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2bfe      	cmp	r3, #254	; 0xfe
 8003dc6:	d806      	bhi.n	8003dd6 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	60fa      	str	r2, [r7, #12]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	701a      	strb	r2, [r3, #0]
 8003dd4:	e011      	b.n	8003dfa <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	60fa      	str	r2, [r7, #12]
 8003ddc:	22ff      	movs	r2, #255	; 0xff
 8003dde:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	60fa      	str	r2, [r7, #12]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	0a19      	lsrs	r1, r3, #8
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	60fa      	str	r2, [r7, #12]
 8003df6:	b2ca      	uxtb	r2, r1
 8003df8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003dfe:	e00a      	b.n	8003e16 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	1c53      	adds	r3, r2, #1
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1c59      	adds	r1, r3, #1
 8003e0a:	60f9      	str	r1, [r7, #12]
 8003e0c:	7812      	ldrb	r2, [r2, #0]
 8003e0e:	701a      	strb	r2, [r3, #0]
    n++;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	3301      	adds	r3, #1
 8003e14:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d3f0      	bcc.n	8003e00 <_EncodeStr+0x74>
  }
  return pPayload;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3307      	adds	r3, #7
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003e4a:	4b35      	ldr	r3, [pc, #212]	; (8003f20 <_HandleIncomingPacket+0xdc>)
 8003e4c:	7e1b      	ldrb	r3, [r3, #24]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	1cfb      	adds	r3, r7, #3
 8003e52:	2201      	movs	r2, #1
 8003e54:	4619      	mov	r1, r3
 8003e56:	f7ff fe43 	bl	8003ae0 <SEGGER_RTT_ReadNoLock>
 8003e5a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d052      	beq.n	8003f08 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	2b80      	cmp	r3, #128	; 0x80
 8003e66:	d031      	beq.n	8003ecc <_HandleIncomingPacket+0x88>
 8003e68:	2b80      	cmp	r3, #128	; 0x80
 8003e6a:	dc40      	bgt.n	8003eee <_HandleIncomingPacket+0xaa>
 8003e6c:	2b07      	cmp	r3, #7
 8003e6e:	dc15      	bgt.n	8003e9c <_HandleIncomingPacket+0x58>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	dd3c      	ble.n	8003eee <_HandleIncomingPacket+0xaa>
 8003e74:	3b01      	subs	r3, #1
 8003e76:	2b06      	cmp	r3, #6
 8003e78:	d839      	bhi.n	8003eee <_HandleIncomingPacket+0xaa>
 8003e7a:	a201      	add	r2, pc, #4	; (adr r2, 8003e80 <_HandleIncomingPacket+0x3c>)
 8003e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e80:	08003ea3 	.word	0x08003ea3
 8003e84:	08003ea9 	.word	0x08003ea9
 8003e88:	08003eaf 	.word	0x08003eaf
 8003e8c:	08003eb5 	.word	0x08003eb5
 8003e90:	08003ebb 	.word	0x08003ebb
 8003e94:	08003ec1 	.word	0x08003ec1
 8003e98:	08003ec7 	.word	0x08003ec7
 8003e9c:	2b7f      	cmp	r3, #127	; 0x7f
 8003e9e:	d035      	beq.n	8003f0c <_HandleIncomingPacket+0xc8>
 8003ea0:	e025      	b.n	8003eee <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003ea2:	f000 fec1 	bl	8004c28 <SEGGER_SYSVIEW_Start>
      break;
 8003ea6:	e036      	b.n	8003f16 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003ea8:	f000 ff78 	bl	8004d9c <SEGGER_SYSVIEW_Stop>
      break;
 8003eac:	e033      	b.n	8003f16 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003eae:	f001 f951 	bl	8005154 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003eb2:	e030      	b.n	8003f16 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003eb4:	f001 f916 	bl	80050e4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003eb8:	e02d      	b.n	8003f16 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003eba:	f000 ff95 	bl	8004de8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003ebe:	e02a      	b.n	8003f16 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003ec0:	f001 fbd4 	bl	800566c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003ec4:	e027      	b.n	8003f16 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003ec6:	f001 fbb3 	bl	8005630 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003eca:	e024      	b.n	8003f16 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003ecc:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <_HandleIncomingPacket+0xdc>)
 8003ece:	7e1b      	ldrb	r3, [r3, #24]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	1cfb      	adds	r3, r7, #3
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	f7ff fe02 	bl	8003ae0 <SEGGER_RTT_ReadNoLock>
 8003edc:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d015      	beq.n	8003f10 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f001 fb22 	bl	8005530 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003eec:	e010      	b.n	8003f10 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	b25b      	sxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	da0e      	bge.n	8003f14 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <_HandleIncomingPacket+0xdc>)
 8003ef8:	7e1b      	ldrb	r3, [r3, #24]
 8003efa:	4618      	mov	r0, r3
 8003efc:	1cfb      	adds	r3, r7, #3
 8003efe:	2201      	movs	r2, #1
 8003f00:	4619      	mov	r1, r3
 8003f02:	f7ff fded 	bl	8003ae0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003f06:	e005      	b.n	8003f14 <_HandleIncomingPacket+0xd0>
    }
  }
 8003f08:	bf00      	nop
 8003f0a:	e004      	b.n	8003f16 <_HandleIncomingPacket+0xd2>
      break;
 8003f0c:	bf00      	nop
 8003f0e:	e002      	b.n	8003f16 <_HandleIncomingPacket+0xd2>
      break;
 8003f10:	bf00      	nop
 8003f12:	e000      	b.n	8003f16 <_HandleIncomingPacket+0xd2>
      break;
 8003f14:	bf00      	nop
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	2001430c 	.word	0x2001430c

08003f24 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08c      	sub	sp, #48	; 0x30
 8003f28:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003f2e:	1d3b      	adds	r3, r7, #4
 8003f30:	3301      	adds	r3, #1
 8003f32:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f38:	4b31      	ldr	r3, [pc, #196]	; (8004000 <_TrySendOverflowPacket+0xdc>)
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f3e:	e00b      	b.n	8003f58 <_TrySendOverflowPacket+0x34>
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f46:	1c59      	adds	r1, r3, #1
 8003f48:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003f4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	09db      	lsrs	r3, r3, #7
 8003f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5a:	2b7f      	cmp	r3, #127	; 0x7f
 8003f5c:	d8f0      	bhi.n	8003f40 <_TrySendOverflowPacket+0x1c>
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003f6e:	4b25      	ldr	r3, [pc, #148]	; (8004004 <_TrySendOverflowPacket+0xe0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003f74:	4b22      	ldr	r3, [pc, #136]	; (8004000 <_TrySendOverflowPacket+0xdc>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	623b      	str	r3, [r7, #32]
 8003f86:	e00b      	b.n	8003fa0 <_TrySendOverflowPacket+0x7c>
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	1c59      	adds	r1, r3, #1
 8003f90:	6279      	str	r1, [r7, #36]	; 0x24
 8003f92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	701a      	strb	r2, [r3, #0]
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	09db      	lsrs	r3, r3, #7
 8003f9e:	623b      	str	r3, [r7, #32]
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8003fa4:	d8f0      	bhi.n	8003f88 <_TrySendOverflowPacket+0x64>
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	627a      	str	r2, [r7, #36]	; 0x24
 8003fac:	6a3a      	ldr	r2, [r7, #32]
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003fb6:	4b12      	ldr	r3, [pc, #72]	; (8004000 <_TrySendOverflowPacket+0xdc>)
 8003fb8:	785b      	ldrb	r3, [r3, #1]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	1d3b      	adds	r3, r7, #4
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	1d3b      	adds	r3, r7, #4
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	f7fc f90a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003fd6:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <_TrySendOverflowPacket+0xdc>)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003fdc:	4b08      	ldr	r3, [pc, #32]	; (8004000 <_TrySendOverflowPacket+0xdc>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <_TrySendOverflowPacket+0xdc>)
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	e004      	b.n	8003ff4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <_TrySendOverflowPacket+0xdc>)
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	4a03      	ldr	r2, [pc, #12]	; (8004000 <_TrySendOverflowPacket+0xdc>)
 8003ff2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003ff4:	693b      	ldr	r3, [r7, #16]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3730      	adds	r7, #48	; 0x30
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	2001430c 	.word	0x2001430c
 8004004:	e0001004 	.word	0xe0001004

08004008 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004008:	b580      	push	{r7, lr}
 800400a:	b08a      	sub	sp, #40	; 0x28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004014:	4b98      	ldr	r3, [pc, #608]	; (8004278 <_SendPacket+0x270>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d010      	beq.n	800403e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800401c:	4b96      	ldr	r3, [pc, #600]	; (8004278 <_SendPacket+0x270>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 812d 	beq.w	8004280 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004026:	4b94      	ldr	r3, [pc, #592]	; (8004278 <_SendPacket+0x270>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d109      	bne.n	8004042 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800402e:	f7ff ff79 	bl	8003f24 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004032:	4b91      	ldr	r3, [pc, #580]	; (8004278 <_SendPacket+0x270>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b01      	cmp	r3, #1
 8004038:	f040 8124 	bne.w	8004284 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800403c:	e001      	b.n	8004042 <_SendPacket+0x3a>
    goto Send;
 800403e:	bf00      	nop
 8004040:	e000      	b.n	8004044 <_SendPacket+0x3c>
Send:
 8004042:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b1f      	cmp	r3, #31
 8004048:	d809      	bhi.n	800405e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800404a:	4b8b      	ldr	r3, [pc, #556]	; (8004278 <_SendPacket+0x270>)
 800404c:	69da      	ldr	r2, [r3, #28]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	f040 8115 	bne.w	8004288 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b17      	cmp	r3, #23
 8004062:	d807      	bhi.n	8004074 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3b01      	subs	r3, #1
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	b2da      	uxtb	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	e0c4      	b.n	80041fe <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	2b7f      	cmp	r3, #127	; 0x7f
 8004080:	d912      	bls.n	80040a8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	09da      	lsrs	r2, r3, #7
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3b01      	subs	r3, #1
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	3a01      	subs	r2, #1
 800409a:	60fa      	str	r2, [r7, #12]
 800409c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	701a      	strb	r2, [r3, #0]
 80040a6:	e006      	b.n	80040b6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b7e      	cmp	r3, #126	; 0x7e
 80040ba:	d807      	bhi.n	80040cc <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3b01      	subs	r3, #1
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	e098      	b.n	80041fe <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040d2:	d212      	bcs.n	80040fa <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	09da      	lsrs	r2, r3, #7
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3b01      	subs	r3, #1
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	3a01      	subs	r2, #1
 80040ec:	60fa      	str	r2, [r7, #12]
 80040ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	e081      	b.n	80041fe <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004100:	d21d      	bcs.n	800413e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	0b9a      	lsrs	r2, r3, #14
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3b01      	subs	r3, #1
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	09db      	lsrs	r3, r3, #7
 8004116:	b2db      	uxtb	r3, r3
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	3a01      	subs	r2, #1
 800411c:	60fa      	str	r2, [r7, #12]
 800411e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004122:	b2da      	uxtb	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	3a01      	subs	r2, #1
 8004130:	60fa      	str	r2, [r7, #12]
 8004132:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004136:	b2da      	uxtb	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	701a      	strb	r2, [r3, #0]
 800413c:	e05f      	b.n	80041fe <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004144:	d228      	bcs.n	8004198 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	0d5a      	lsrs	r2, r3, #21
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3b01      	subs	r3, #1
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	0b9b      	lsrs	r3, r3, #14
 800415a:	b2db      	uxtb	r3, r3
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	3a01      	subs	r2, #1
 8004160:	60fa      	str	r2, [r7, #12]
 8004162:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004166:	b2da      	uxtb	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	09db      	lsrs	r3, r3, #7
 8004170:	b2db      	uxtb	r3, r3
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	3a01      	subs	r2, #1
 8004176:	60fa      	str	r2, [r7, #12]
 8004178:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800417c:	b2da      	uxtb	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	b2db      	uxtb	r3, r3
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	3a01      	subs	r2, #1
 800418a:	60fa      	str	r2, [r7, #12]
 800418c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004190:	b2da      	uxtb	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	e032      	b.n	80041fe <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	0f1a      	lsrs	r2, r3, #28
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3b01      	subs	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	0d5b      	lsrs	r3, r3, #21
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	3a01      	subs	r2, #1
 80041b2:	60fa      	str	r2, [r7, #12]
 80041b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	0b9b      	lsrs	r3, r3, #14
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	3a01      	subs	r2, #1
 80041c8:	60fa      	str	r2, [r7, #12]
 80041ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	09db      	lsrs	r3, r3, #7
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	3a01      	subs	r2, #1
 80041de:	60fa      	str	r2, [r7, #12]
 80041e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	3a01      	subs	r2, #1
 80041f2:	60fa      	str	r2, [r7, #12]
 80041f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80041fe:	4b1f      	ldr	r3, [pc, #124]	; (800427c <_SendPacket+0x274>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004204:	4b1c      	ldr	r3, [pc, #112]	; (8004278 <_SendPacket+0x270>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	623b      	str	r3, [r7, #32]
 8004216:	e00b      	b.n	8004230 <_SendPacket+0x228>
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	b2da      	uxtb	r2, r3
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	1c59      	adds	r1, r3, #1
 8004220:	6279      	str	r1, [r7, #36]	; 0x24
 8004222:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	09db      	lsrs	r3, r3, #7
 800422e:	623b      	str	r3, [r7, #32]
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	2b7f      	cmp	r3, #127	; 0x7f
 8004234:	d8f0      	bhi.n	8004218 <_SendPacket+0x210>
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	627a      	str	r2, [r7, #36]	; 0x24
 800423c:	6a3a      	ldr	r2, [r7, #32]
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004246:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <_SendPacket+0x270>)
 8004248:	785b      	ldrb	r3, [r3, #1]
 800424a:	4618      	mov	r0, r3
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	461a      	mov	r2, r3
 8004254:	68f9      	ldr	r1, [r7, #12]
 8004256:	f7fb ffc3 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800425a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004262:	4a05      	ldr	r2, [pc, #20]	; (8004278 <_SendPacket+0x270>)
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	60d3      	str	r3, [r2, #12]
 8004268:	e00f      	b.n	800428a <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800426a:	4b03      	ldr	r3, [pc, #12]	; (8004278 <_SendPacket+0x270>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	3301      	adds	r3, #1
 8004270:	b2da      	uxtb	r2, r3
 8004272:	4b01      	ldr	r3, [pc, #4]	; (8004278 <_SendPacket+0x270>)
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	e008      	b.n	800428a <_SendPacket+0x282>
 8004278:	2001430c 	.word	0x2001430c
 800427c:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004280:	bf00      	nop
 8004282:	e002      	b.n	800428a <_SendPacket+0x282>
      goto SendDone;
 8004284:	bf00      	nop
 8004286:	e000      	b.n	800428a <_SendPacket+0x282>
      goto SendDone;
 8004288:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800428a:	4b14      	ldr	r3, [pc, #80]	; (80042dc <_SendPacket+0x2d4>)
 800428c:	7e1b      	ldrb	r3, [r3, #24]
 800428e:	4619      	mov	r1, r3
 8004290:	4a13      	ldr	r2, [pc, #76]	; (80042e0 <_SendPacket+0x2d8>)
 8004292:	460b      	mov	r3, r1
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	440b      	add	r3, r1
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4413      	add	r3, r2
 800429c:	336c      	adds	r3, #108	; 0x6c
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <_SendPacket+0x2d4>)
 80042a2:	7e1b      	ldrb	r3, [r3, #24]
 80042a4:	4618      	mov	r0, r3
 80042a6:	490e      	ldr	r1, [pc, #56]	; (80042e0 <_SendPacket+0x2d8>)
 80042a8:	4603      	mov	r3, r0
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	4403      	add	r3, r0
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	440b      	add	r3, r1
 80042b2:	3370      	adds	r3, #112	; 0x70
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d00b      	beq.n	80042d2 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80042ba:	4b08      	ldr	r3, [pc, #32]	; (80042dc <_SendPacket+0x2d4>)
 80042bc:	789b      	ldrb	r3, [r3, #2]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d107      	bne.n	80042d2 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80042c2:	4b06      	ldr	r3, [pc, #24]	; (80042dc <_SendPacket+0x2d4>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80042c8:	f7ff fdbc 	bl	8003e44 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <_SendPacket+0x2d4>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80042d2:	bf00      	nop
 80042d4:	3728      	adds	r7, #40	; 0x28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	2001430c 	.word	0x2001430c
 80042e0:	20012e4c 	.word	0x20012e4c

080042e4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08a      	sub	sp, #40	; 0x28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	3301      	adds	r3, #1
 80042fa:	2b80      	cmp	r3, #128	; 0x80
 80042fc:	d80a      	bhi.n	8004314 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	1c59      	adds	r1, r3, #1
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6051      	str	r1, [r2, #4]
 8004308:	78fa      	ldrb	r2, [r7, #3]
 800430a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	2b80      	cmp	r3, #128	; 0x80
 800431a:	d15a      	bne.n	80043d2 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	623b      	str	r3, [r7, #32]
 800433c:	e00b      	b.n	8004356 <_StoreChar+0x72>
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	b2da      	uxtb	r2, r3
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	1c59      	adds	r1, r3, #1
 8004346:	6279      	str	r1, [r7, #36]	; 0x24
 8004348:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	701a      	strb	r2, [r3, #0]
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	09db      	lsrs	r3, r3, #7
 8004354:	623b      	str	r3, [r7, #32]
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	2b7f      	cmp	r3, #127	; 0x7f
 800435a:	d8f0      	bhi.n	800433e <_StoreChar+0x5a>
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	627a      	str	r2, [r7, #36]	; 0x24
 8004362:	6a3a      	ldr	r2, [r7, #32]
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	61fb      	str	r3, [r7, #28]
 8004370:	2300      	movs	r3, #0
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	e00b      	b.n	800438e <_StoreChar+0xaa>
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	b2da      	uxtb	r2, r3
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	1c59      	adds	r1, r3, #1
 800437e:	61f9      	str	r1, [r7, #28]
 8004380:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	09db      	lsrs	r3, r3, #7
 800438c:	61bb      	str	r3, [r7, #24]
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	2b7f      	cmp	r3, #127	; 0x7f
 8004392:	d8f0      	bhi.n	8004376 <_StoreChar+0x92>
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	61fa      	str	r2, [r7, #28]
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	221a      	movs	r2, #26
 80043aa:	6939      	ldr	r1, [r7, #16]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff fe2b 	bl	8004008 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fd38 	bl	8003e2c <_PreparePacket>
 80043bc:	4602      	mov	r2, r0
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	611a      	str	r2, [r3, #16]
  }
}
 80043d2:	bf00      	nop
 80043d4:	3728      	adds	r7, #40	; 0x28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08a      	sub	sp, #40	; 0x28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80043ee:	2301      	movs	r3, #1
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80043f2:	2301      	movs	r3, #1
 80043f4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80043f6:	e007      	b.n	8004408 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80043f8:	6a3a      	ldr	r2, [r7, #32]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004400:	623b      	str	r3, [r7, #32]
    Width++;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	3301      	adds	r3, #1
 8004406:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004408:	6a3a      	ldr	r2, [r7, #32]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	429a      	cmp	r2, r3
 800440e:	d2f3      	bcs.n	80043f8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	429a      	cmp	r2, r3
 8004416:	d901      	bls.n	800441c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800441c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d11f      	bne.n	8004466 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01c      	beq.n	8004466 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800442c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <_PrintUnsigned+0x66>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <_PrintUnsigned+0x66>
        c = '0';
 800443c:	2330      	movs	r3, #48	; 0x30
 800443e:	76fb      	strb	r3, [r7, #27]
 8004440:	e001      	b.n	8004446 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004442:	2320      	movs	r3, #32
 8004444:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004446:	e007      	b.n	8004458 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	3b01      	subs	r3, #1
 800444c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800444e:	7efb      	ldrb	r3, [r7, #27]
 8004450:	4619      	mov	r1, r3
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f7ff ff46 	bl	80042e4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <_PrintUnsigned+0x8a>
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004462:	429a      	cmp	r2, r3
 8004464:	d3f0      	bcc.n	8004448 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d903      	bls.n	8004474 <_PrintUnsigned+0x98>
      NumDigits--;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	3b01      	subs	r3, #1
 8004470:	603b      	str	r3, [r7, #0]
 8004472:	e009      	b.n	8004488 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	429a      	cmp	r2, r3
 8004484:	d200      	bcs.n	8004488 <_PrintUnsigned+0xac>
        break;
 8004486:	e005      	b.n	8004494 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	fb02 f303 	mul.w	r3, r2, r3
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004492:	e7e8      	b.n	8004466 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	fbb2 f3f3 	udiv	r3, r2, r3
 800449c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80044ac:	4a15      	ldr	r2, [pc, #84]	; (8004504 <_PrintUnsigned+0x128>)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	4413      	add	r3, r2
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	4619      	mov	r1, r3
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f7ff ff14 	bl	80042e4 <_StoreChar>
    Digit /= Base;
 80044bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e3      	bne.n	8004494 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80044cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d011      	beq.n	80044fa <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00e      	beq.n	80044fa <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044dc:	e006      	b.n	80044ec <_PrintUnsigned+0x110>
        FieldWidth--;
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	3b01      	subs	r3, #1
 80044e2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80044e4:	2120      	movs	r1, #32
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f7ff fefc 	bl	80042e4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <_PrintUnsigned+0x11e>
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d3f1      	bcc.n	80044de <_PrintUnsigned+0x102>
      }
    }
  }
}
 80044fa:	bf00      	nop
 80044fc:	3728      	adds	r7, #40	; 0x28
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	080059dc 	.word	0x080059dc

08004508 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	bfb8      	it	lt
 800451c:	425b      	neglt	r3, r3
 800451e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004520:	2301      	movs	r3, #1
 8004522:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004524:	e007      	b.n	8004536 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	fb92 f3f3 	sdiv	r3, r2, r3
 800452e:	613b      	str	r3, [r7, #16]
    Width++;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	3301      	adds	r3, #1
 8004534:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	429a      	cmp	r2, r3
 800453c:	daf3      	bge.n	8004526 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	429a      	cmp	r2, r3
 8004544:	d901      	bls.n	800454a <_PrintInt+0x42>
    Width = NumDigits;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <_PrintInt+0x5e>
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	db04      	blt.n	8004560 <_PrintInt+0x58>
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <_PrintInt+0x5e>
    FieldWidth--;
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	3b01      	subs	r3, #1
 8004564:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <_PrintInt+0x6e>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d016      	beq.n	80045a4 <_PrintInt+0x9c>
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d111      	bne.n	80045a4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00e      	beq.n	80045a4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004586:	e006      	b.n	8004596 <_PrintInt+0x8e>
        FieldWidth--;
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	3b01      	subs	r3, #1
 800458c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800458e:	2120      	movs	r1, #32
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f7ff fea7 	bl	80042e4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <_PrintInt+0x9c>
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d3f1      	bcc.n	8004588 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	da07      	bge.n	80045ba <_PrintInt+0xb2>
    v = -v;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	425b      	negs	r3, r3
 80045ae:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80045b0:	212d      	movs	r1, #45	; 0x2d
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f7ff fe96 	bl	80042e4 <_StoreChar>
 80045b8:	e008      	b.n	80045cc <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80045c4:	212b      	movs	r1, #43	; 0x2b
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f7ff fe8c 	bl	80042e4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d019      	beq.n	800460a <_PrintInt+0x102>
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d114      	bne.n	800460a <_PrintInt+0x102>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d111      	bne.n	800460a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00e      	beq.n	800460a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045ec:	e006      	b.n	80045fc <_PrintInt+0xf4>
        FieldWidth--;
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80045f4:	2130      	movs	r1, #48	; 0x30
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f7ff fe74 	bl	80042e4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <_PrintInt+0x102>
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	429a      	cmp	r2, r3
 8004608:	d3f1      	bcc.n	80045ee <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	9301      	str	r3, [sp, #4]
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f7ff fedf 	bl	80043dc <_PrintUnsigned>
}
 800461e:	bf00      	nop
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004628:	b580      	push	{r7, lr}
 800462a:	b098      	sub	sp, #96	; 0x60
 800462c:	af02      	add	r7, sp, #8
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004634:	f3ef 8311 	mrs	r3, BASEPRI
 8004638:	f04f 0120 	mov.w	r1, #32
 800463c:	f381 8811 	msr	BASEPRI, r1
 8004640:	633b      	str	r3, [r7, #48]	; 0x30
 8004642:	48b7      	ldr	r0, [pc, #732]	; (8004920 <_VPrintTarget+0x2f8>)
 8004644:	f7ff fbf2 	bl	8003e2c <_PreparePacket>
 8004648:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800464a:	4bb5      	ldr	r3, [pc, #724]	; (8004920 <_VPrintTarget+0x2f8>)
 800464c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800464e:	2300      	movs	r3, #0
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004654:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	3301      	adds	r3, #1
 800465a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3301      	adds	r3, #1
 800466c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800466e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 8183 	beq.w	800497e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004678:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800467c:	2b25      	cmp	r3, #37	; 0x25
 800467e:	f040 8170 	bne.w	8004962 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004682:	2300      	movs	r3, #0
 8004684:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004686:	2301      	movs	r3, #1
 8004688:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004692:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004696:	3b23      	subs	r3, #35	; 0x23
 8004698:	2b0d      	cmp	r3, #13
 800469a:	d83f      	bhi.n	800471c <_VPrintTarget+0xf4>
 800469c:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <_VPrintTarget+0x7c>)
 800469e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a2:	bf00      	nop
 80046a4:	0800470d 	.word	0x0800470d
 80046a8:	0800471d 	.word	0x0800471d
 80046ac:	0800471d 	.word	0x0800471d
 80046b0:	0800471d 	.word	0x0800471d
 80046b4:	0800471d 	.word	0x0800471d
 80046b8:	0800471d 	.word	0x0800471d
 80046bc:	0800471d 	.word	0x0800471d
 80046c0:	0800471d 	.word	0x0800471d
 80046c4:	080046fd 	.word	0x080046fd
 80046c8:	0800471d 	.word	0x0800471d
 80046cc:	080046dd 	.word	0x080046dd
 80046d0:	0800471d 	.word	0x0800471d
 80046d4:	0800471d 	.word	0x0800471d
 80046d8:	080046ed 	.word	0x080046ed
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80046dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3301      	adds	r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	e01a      	b.n	8004722 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80046ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ee:	f043 0302 	orr.w	r3, r3, #2
 80046f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	3301      	adds	r3, #1
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	e012      	b.n	8004722 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80046fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046fe:	f043 0304 	orr.w	r3, r3, #4
 8004702:	64bb      	str	r3, [r7, #72]	; 0x48
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3301      	adds	r3, #1
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	e00a      	b.n	8004722 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800470c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800470e:	f043 0308 	orr.w	r3, r3, #8
 8004712:	64bb      	str	r3, [r7, #72]	; 0x48
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3301      	adds	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	e002      	b.n	8004722 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800471c:	2300      	movs	r3, #0
 800471e:	653b      	str	r3, [r7, #80]	; 0x50
 8004720:	bf00      	nop
        }
      } while (v);
 8004722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1b0      	bne.n	800468a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004728:	2300      	movs	r3, #0
 800472a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004734:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004738:	2b2f      	cmp	r3, #47	; 0x2f
 800473a:	d912      	bls.n	8004762 <_VPrintTarget+0x13a>
 800473c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004740:	2b39      	cmp	r3, #57	; 0x39
 8004742:	d80e      	bhi.n	8004762 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3301      	adds	r3, #1
 8004748:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800474a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800474c:	4613      	mov	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	461a      	mov	r2, r3
 8004756:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800475a:	4413      	add	r3, r2
 800475c:	3b30      	subs	r3, #48	; 0x30
 800475e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004760:	e7e4      	b.n	800472c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004762:	2300      	movs	r3, #0
 8004764:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800476e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004772:	2b2e      	cmp	r3, #46	; 0x2e
 8004774:	d11d      	bne.n	80047b2 <_VPrintTarget+0x18a>
        sFormat++;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3301      	adds	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004784:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004788:	2b2f      	cmp	r3, #47	; 0x2f
 800478a:	d912      	bls.n	80047b2 <_VPrintTarget+0x18a>
 800478c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004790:	2b39      	cmp	r3, #57	; 0x39
 8004792:	d80e      	bhi.n	80047b2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3301      	adds	r3, #1
 8004798:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800479a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	461a      	mov	r2, r3
 80047a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047aa:	4413      	add	r3, r2
 80047ac:	3b30      	subs	r3, #48	; 0x30
 80047ae:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80047b0:	e7e4      	b.n	800477c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80047ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047be:	2b6c      	cmp	r3, #108	; 0x6c
 80047c0:	d003      	beq.n	80047ca <_VPrintTarget+0x1a2>
 80047c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047c6:	2b68      	cmp	r3, #104	; 0x68
 80047c8:	d107      	bne.n	80047da <_VPrintTarget+0x1b2>
          c = *sFormat;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3301      	adds	r3, #1
 80047d6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80047d8:	e7ef      	b.n	80047ba <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80047da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047de:	2b25      	cmp	r3, #37	; 0x25
 80047e0:	f000 80b3 	beq.w	800494a <_VPrintTarget+0x322>
 80047e4:	2b25      	cmp	r3, #37	; 0x25
 80047e6:	f2c0 80b7 	blt.w	8004958 <_VPrintTarget+0x330>
 80047ea:	2b78      	cmp	r3, #120	; 0x78
 80047ec:	f300 80b4 	bgt.w	8004958 <_VPrintTarget+0x330>
 80047f0:	2b58      	cmp	r3, #88	; 0x58
 80047f2:	f2c0 80b1 	blt.w	8004958 <_VPrintTarget+0x330>
 80047f6:	3b58      	subs	r3, #88	; 0x58
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	f200 80ad 	bhi.w	8004958 <_VPrintTarget+0x330>
 80047fe:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <_VPrintTarget+0x1dc>)
 8004800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004804:	080048fb 	.word	0x080048fb
 8004808:	08004959 	.word	0x08004959
 800480c:	08004959 	.word	0x08004959
 8004810:	08004959 	.word	0x08004959
 8004814:	08004959 	.word	0x08004959
 8004818:	08004959 	.word	0x08004959
 800481c:	08004959 	.word	0x08004959
 8004820:	08004959 	.word	0x08004959
 8004824:	08004959 	.word	0x08004959
 8004828:	08004959 	.word	0x08004959
 800482c:	08004959 	.word	0x08004959
 8004830:	08004889 	.word	0x08004889
 8004834:	080048af 	.word	0x080048af
 8004838:	08004959 	.word	0x08004959
 800483c:	08004959 	.word	0x08004959
 8004840:	08004959 	.word	0x08004959
 8004844:	08004959 	.word	0x08004959
 8004848:	08004959 	.word	0x08004959
 800484c:	08004959 	.word	0x08004959
 8004850:	08004959 	.word	0x08004959
 8004854:	08004959 	.word	0x08004959
 8004858:	08004959 	.word	0x08004959
 800485c:	08004959 	.word	0x08004959
 8004860:	08004959 	.word	0x08004959
 8004864:	08004925 	.word	0x08004925
 8004868:	08004959 	.word	0x08004959
 800486c:	08004959 	.word	0x08004959
 8004870:	08004959 	.word	0x08004959
 8004874:	08004959 	.word	0x08004959
 8004878:	080048d5 	.word	0x080048d5
 800487c:	08004959 	.word	0x08004959
 8004880:	08004959 	.word	0x08004959
 8004884:	080048fb 	.word	0x080048fb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	1d19      	adds	r1, r3, #4
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6011      	str	r1, [r2, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800489c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80048a0:	f107 0314 	add.w	r3, r7, #20
 80048a4:	4611      	mov	r1, r2
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fd1c 	bl	80042e4 <_StoreChar>
        break;
 80048ac:	e055      	b.n	800495a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	1d19      	adds	r1, r3, #4
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6011      	str	r1, [r2, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80048bc:	f107 0014 	add.w	r0, r7, #20
 80048c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ca:	220a      	movs	r2, #10
 80048cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80048ce:	f7ff fe1b 	bl	8004508 <_PrintInt>
        break;
 80048d2:	e042      	b.n	800495a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	1d19      	adds	r1, r3, #4
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6011      	str	r1, [r2, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80048e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80048e4:	f107 0014 	add.w	r0, r7, #20
 80048e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ea:	9301      	str	r3, [sp, #4]
 80048ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f2:	220a      	movs	r2, #10
 80048f4:	f7ff fd72 	bl	80043dc <_PrintUnsigned>
        break;
 80048f8:	e02f      	b.n	800495a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	1d19      	adds	r1, r3, #4
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6011      	str	r1, [r2, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004908:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800490a:	f107 0014 	add.w	r0, r7, #20
 800490e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004910:	9301      	str	r3, [sp, #4]
 8004912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004918:	2210      	movs	r2, #16
 800491a:	f7ff fd5f 	bl	80043dc <_PrintUnsigned>
        break;
 800491e:	e01c      	b.n	800495a <_VPrintTarget+0x332>
 8004920:	2001433c 	.word	0x2001433c
      case 'p':
        v = va_arg(*pParamList, int);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	1d19      	adds	r1, r3, #4
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6011      	str	r1, [r2, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004932:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004934:	f107 0014 	add.w	r0, r7, #20
 8004938:	2300      	movs	r3, #0
 800493a:	9301      	str	r3, [sp, #4]
 800493c:	2308      	movs	r3, #8
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	2308      	movs	r3, #8
 8004942:	2210      	movs	r2, #16
 8004944:	f7ff fd4a 	bl	80043dc <_PrintUnsigned>
        break;
 8004948:	e007      	b.n	800495a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800494a:	f107 0314 	add.w	r3, r7, #20
 800494e:	2125      	movs	r1, #37	; 0x25
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff fcc7 	bl	80042e4 <_StoreChar>
        break;
 8004956:	e000      	b.n	800495a <_VPrintTarget+0x332>
      default:
        break;
 8004958:	bf00      	nop
      }
      sFormat++;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3301      	adds	r3, #1
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	e007      	b.n	8004972 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004962:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004966:	f107 0314 	add.w	r3, r7, #20
 800496a:	4611      	mov	r1, r2
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff fcb9 	bl	80042e4 <_StoreChar>
    }
  } while (*sFormat);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	f47f ae72 	bne.w	8004660 <_VPrintTarget+0x38>
 800497c:	e000      	b.n	8004980 <_VPrintTarget+0x358>
      break;
 800497e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	2b00      	cmp	r3, #0
 8004984:	d041      	beq.n	8004a0a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	643b      	str	r3, [r7, #64]	; 0x40
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004996:	e00b      	b.n	80049b0 <_VPrintTarget+0x388>
 8004998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499a:	b2da      	uxtb	r2, r3
 800499c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800499e:	1c59      	adds	r1, r3, #1
 80049a0:	6439      	str	r1, [r7, #64]	; 0x40
 80049a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]
 80049aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ac:	09db      	lsrs	r3, r3, #7
 80049ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b2:	2b7f      	cmp	r3, #127	; 0x7f
 80049b4:	d8f0      	bhi.n	8004998 <_VPrintTarget+0x370>
 80049b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	643a      	str	r2, [r7, #64]	; 0x40
 80049bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049c4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80049ca:	2300      	movs	r3, #0
 80049cc:	637b      	str	r3, [r7, #52]	; 0x34
 80049ce:	e00b      	b.n	80049e8 <_VPrintTarget+0x3c0>
 80049d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d6:	1c59      	adds	r1, r3, #1
 80049d8:	63b9      	str	r1, [r7, #56]	; 0x38
 80049da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	701a      	strb	r2, [r3, #0]
 80049e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e4:	09db      	lsrs	r3, r3, #7
 80049e6:	637b      	str	r3, [r7, #52]	; 0x34
 80049e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ea:	2b7f      	cmp	r3, #127	; 0x7f
 80049ec:	d8f0      	bhi.n	80049d0 <_VPrintTarget+0x3a8>
 80049ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80049f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	69b9      	ldr	r1, [r7, #24]
 8004a02:	221a      	movs	r2, #26
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff faff 	bl	8004008 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004a10:	bf00      	nop
 8004a12:	3758      	adds	r7, #88	; 0x58
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004a26:	2300      	movs	r3, #0
 8004a28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a2c:	4917      	ldr	r1, [pc, #92]	; (8004a8c <SEGGER_SYSVIEW_Init+0x74>)
 8004a2e:	4818      	ldr	r0, [pc, #96]	; (8004a90 <SEGGER_SYSVIEW_Init+0x78>)
 8004a30:	f7ff f8dc 	bl	8003bec <SEGGER_RTT_AllocUpBuffer>
 8004a34:	4603      	mov	r3, r0
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	4b16      	ldr	r3, [pc, #88]	; (8004a94 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a3a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004a3c:	4b15      	ldr	r3, [pc, #84]	; (8004a94 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a3e:	785a      	ldrb	r2, [r3, #1]
 8004a40:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a42:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004a44:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a46:	7e1b      	ldrb	r3, [r3, #24]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	2308      	movs	r3, #8
 8004a50:	4a11      	ldr	r2, [pc, #68]	; (8004a98 <SEGGER_SYSVIEW_Init+0x80>)
 8004a52:	490f      	ldr	r1, [pc, #60]	; (8004a90 <SEGGER_SYSVIEW_Init+0x78>)
 8004a54:	f7ff f94e 	bl	8003cf4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004a58:	4b0e      	ldr	r3, [pc, #56]	; (8004a94 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004a5e:	4b0f      	ldr	r3, [pc, #60]	; (8004a9c <SEGGER_SYSVIEW_Init+0x84>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a0c      	ldr	r2, [pc, #48]	; (8004a94 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a64:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004a66:	4a0b      	ldr	r2, [pc, #44]	; (8004a94 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004a6c:	4a09      	ldr	r2, [pc, #36]	; (8004a94 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004a72:	4a08      	ldr	r2, [pc, #32]	; (8004a94 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004a78:	4a06      	ldr	r2, [pc, #24]	; (8004a94 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004a84:	bf00      	nop
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	20013304 	.word	0x20013304
 8004a90:	08005994 	.word	0x08005994
 8004a94:	2001430c 	.word	0x2001430c
 8004a98:	20014304 	.word	0x20014304
 8004a9c:	e0001004 	.word	0xe0001004

08004aa0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004aa8:	4a04      	ldr	r2, [pc, #16]	; (8004abc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6113      	str	r3, [r2, #16]
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	2001430c 	.word	0x2001430c

08004ac0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8004acc:	f04f 0120 	mov.w	r1, #32
 8004ad0:	f381 8811 	msr	BASEPRI, r1
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	4808      	ldr	r0, [pc, #32]	; (8004af8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004ad8:	f7ff f9a8 	bl	8003e2c <_PreparePacket>
 8004adc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	68b8      	ldr	r0, [r7, #8]
 8004ae4:	f7ff fa90 	bl	8004008 <_SendPacket>
  RECORD_END();
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f383 8811 	msr	BASEPRI, r3
}
 8004aee:	bf00      	nop
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	2001433c 	.word	0x2001433c

08004afc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b06:	f3ef 8311 	mrs	r3, BASEPRI
 8004b0a:	f04f 0120 	mov.w	r1, #32
 8004b0e:	f381 8811 	msr	BASEPRI, r1
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	4816      	ldr	r0, [pc, #88]	; (8004b70 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004b16:	f7ff f989 	bl	8003e2c <_PreparePacket>
 8004b1a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	61fb      	str	r3, [r7, #28]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	61bb      	str	r3, [r7, #24]
 8004b28:	e00b      	b.n	8004b42 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	1c59      	adds	r1, r3, #1
 8004b32:	61f9      	str	r1, [r7, #28]
 8004b34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	701a      	strb	r2, [r3, #0]
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	09db      	lsrs	r3, r3, #7
 8004b40:	61bb      	str	r3, [r7, #24]
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	2b7f      	cmp	r3, #127	; 0x7f
 8004b46:	d8f0      	bhi.n	8004b2a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	61fa      	str	r2, [r7, #28]
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	701a      	strb	r2, [r3, #0]
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	68f9      	ldr	r1, [r7, #12]
 8004b5c:	6938      	ldr	r0, [r7, #16]
 8004b5e:	f7ff fa53 	bl	8004008 <_SendPacket>
  RECORD_END();
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f383 8811 	msr	BASEPRI, r3
}
 8004b68:	bf00      	nop
 8004b6a:	3720      	adds	r7, #32
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	2001433c 	.word	0x2001433c

08004b74 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08c      	sub	sp, #48	; 0x30
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b80:	f3ef 8311 	mrs	r3, BASEPRI
 8004b84:	f04f 0120 	mov.w	r1, #32
 8004b88:	f381 8811 	msr	BASEPRI, r1
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	4825      	ldr	r0, [pc, #148]	; (8004c24 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004b90:	f7ff f94c 	bl	8003e2c <_PreparePacket>
 8004b94:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ba2:	e00b      	b.n	8004bbc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004baa:	1c59      	adds	r1, r3, #1
 8004bac:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004bae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb8:	09db      	lsrs	r3, r3, #7
 8004bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	2b7f      	cmp	r3, #127	; 0x7f
 8004bc0:	d8f0      	bhi.n	8004ba4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	701a      	strb	r2, [r3, #0]
 8004bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	623b      	str	r3, [r7, #32]
 8004bda:	e00b      	b.n	8004bf4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	1c59      	adds	r1, r3, #1
 8004be4:	6279      	str	r1, [r7, #36]	; 0x24
 8004be6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	09db      	lsrs	r3, r3, #7
 8004bf2:	623b      	str	r3, [r7, #32]
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8004bf8:	d8f0      	bhi.n	8004bdc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	627a      	str	r2, [r7, #36]	; 0x24
 8004c00:	6a3a      	ldr	r2, [r7, #32]
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	6979      	ldr	r1, [r7, #20]
 8004c0e:	69b8      	ldr	r0, [r7, #24]
 8004c10:	f7ff f9fa 	bl	8004008 <_SendPacket>
  RECORD_END();
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	f383 8811 	msr	BASEPRI, r3
}
 8004c1a:	bf00      	nop
 8004c1c:	3730      	adds	r7, #48	; 0x30
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	2001433c 	.word	0x2001433c

08004c28 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08c      	sub	sp, #48	; 0x30
 8004c2c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004c2e:	4b58      	ldr	r3, [pc, #352]	; (8004d90 <SEGGER_SYSVIEW_Start+0x168>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004c34:	f3ef 8311 	mrs	r3, BASEPRI
 8004c38:	f04f 0120 	mov.w	r1, #32
 8004c3c:	f381 8811 	msr	BASEPRI, r1
 8004c40:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004c42:	4b53      	ldr	r3, [pc, #332]	; (8004d90 <SEGGER_SYSVIEW_Start+0x168>)
 8004c44:	785b      	ldrb	r3, [r3, #1]
 8004c46:	220a      	movs	r2, #10
 8004c48:	4952      	ldr	r1, [pc, #328]	; (8004d94 <SEGGER_SYSVIEW_Start+0x16c>)
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fb fac8 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004c56:	200a      	movs	r0, #10
 8004c58:	f7ff ff32 	bl	8004ac0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c5c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c60:	f04f 0120 	mov.w	r1, #32
 8004c64:	f381 8811 	msr	BASEPRI, r1
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	484b      	ldr	r0, [pc, #300]	; (8004d98 <SEGGER_SYSVIEW_Start+0x170>)
 8004c6c:	f7ff f8de 	bl	8003e2c <_PreparePacket>
 8004c70:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c7a:	4b45      	ldr	r3, [pc, #276]	; (8004d90 <SEGGER_SYSVIEW_Start+0x168>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c80:	e00b      	b.n	8004c9a <SEGGER_SYSVIEW_Start+0x72>
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c88:	1c59      	adds	r1, r3, #1
 8004c8a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	701a      	strb	r2, [r3, #0]
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	09db      	lsrs	r3, r3, #7
 8004c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8004c9e:	d8f0      	bhi.n	8004c82 <SEGGER_SYSVIEW_Start+0x5a>
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	701a      	strb	r2, [r3, #0]
 8004cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb4:	4b36      	ldr	r3, [pc, #216]	; (8004d90 <SEGGER_SYSVIEW_Start+0x168>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	623b      	str	r3, [r7, #32]
 8004cba:	e00b      	b.n	8004cd4 <SEGGER_SYSVIEW_Start+0xac>
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	1c59      	adds	r1, r3, #1
 8004cc4:	6279      	str	r1, [r7, #36]	; 0x24
 8004cc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	09db      	lsrs	r3, r3, #7
 8004cd2:	623b      	str	r3, [r7, #32]
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd8:	d8f0      	bhi.n	8004cbc <SEGGER_SYSVIEW_Start+0x94>
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	627a      	str	r2, [r7, #36]	; 0x24
 8004ce0:	6a3a      	ldr	r2, [r7, #32]
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	61fb      	str	r3, [r7, #28]
 8004cee:	4b28      	ldr	r3, [pc, #160]	; (8004d90 <SEGGER_SYSVIEW_Start+0x168>)
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	61bb      	str	r3, [r7, #24]
 8004cf4:	e00b      	b.n	8004d0e <SEGGER_SYSVIEW_Start+0xe6>
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	1c59      	adds	r1, r3, #1
 8004cfe:	61f9      	str	r1, [r7, #28]
 8004d00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	09db      	lsrs	r3, r3, #7
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	2b7f      	cmp	r3, #127	; 0x7f
 8004d12:	d8f0      	bhi.n	8004cf6 <SEGGER_SYSVIEW_Start+0xce>
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	61fa      	str	r2, [r7, #28]
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	2300      	movs	r3, #0
 8004d2a:	613b      	str	r3, [r7, #16]
 8004d2c:	e00b      	b.n	8004d46 <SEGGER_SYSVIEW_Start+0x11e>
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	1c59      	adds	r1, r3, #1
 8004d36:	6179      	str	r1, [r7, #20]
 8004d38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	701a      	strb	r2, [r3, #0]
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	09db      	lsrs	r3, r3, #7
 8004d44:	613b      	str	r3, [r7, #16]
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	2b7f      	cmp	r3, #127	; 0x7f
 8004d4a:	d8f0      	bhi.n	8004d2e <SEGGER_SYSVIEW_Start+0x106>
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	617a      	str	r2, [r7, #20]
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004d5c:	2218      	movs	r2, #24
 8004d5e:	6839      	ldr	r1, [r7, #0]
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff f951 	bl	8004008 <_SendPacket>
      RECORD_END();
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004d6c:	4b08      	ldr	r3, [pc, #32]	; (8004d90 <SEGGER_SYSVIEW_Start+0x168>)
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004d74:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <SEGGER_SYSVIEW_Start+0x168>)
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004d7a:	f000 f9eb 	bl	8005154 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004d7e:	f000 f9b1 	bl	80050e4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004d82:	f000 fc73 	bl	800566c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004d86:	bf00      	nop
 8004d88:	3730      	adds	r7, #48	; 0x30
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	2001430c 	.word	0x2001430c
 8004d94:	080059d0 	.word	0x080059d0
 8004d98:	2001433c 	.word	0x2001433c

08004d9c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004da2:	f3ef 8311 	mrs	r3, BASEPRI
 8004da6:	f04f 0120 	mov.w	r1, #32
 8004daa:	f381 8811 	msr	BASEPRI, r1
 8004dae:	607b      	str	r3, [r7, #4]
 8004db0:	480b      	ldr	r0, [pc, #44]	; (8004de0 <SEGGER_SYSVIEW_Stop+0x44>)
 8004db2:	f7ff f83b 	bl	8003e2c <_PreparePacket>
 8004db6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004db8:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <SEGGER_SYSVIEW_Stop+0x48>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d007      	beq.n	8004dd0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004dc0:	220b      	movs	r2, #11
 8004dc2:	6839      	ldr	r1, [r7, #0]
 8004dc4:	6838      	ldr	r0, [r7, #0]
 8004dc6:	f7ff f91f 	bl	8004008 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <SEGGER_SYSVIEW_Stop+0x48>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f383 8811 	msr	BASEPRI, r3
}
 8004dd6:	bf00      	nop
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	2001433c 	.word	0x2001433c
 8004de4:	2001430c 	.word	0x2001430c

08004de8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08c      	sub	sp, #48	; 0x30
 8004dec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004dee:	f3ef 8311 	mrs	r3, BASEPRI
 8004df2:	f04f 0120 	mov.w	r1, #32
 8004df6:	f381 8811 	msr	BASEPRI, r1
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	4845      	ldr	r0, [pc, #276]	; (8004f14 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004dfe:	f7ff f815 	bl	8003e2c <_PreparePacket>
 8004e02:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e0c:	4b42      	ldr	r3, [pc, #264]	; (8004f18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e12:	e00b      	b.n	8004e2c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1a:	1c59      	adds	r1, r3, #1
 8004e1c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	09db      	lsrs	r3, r3, #7
 8004e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e30:	d8f0      	bhi.n	8004e14 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
 8004e46:	4b34      	ldr	r3, [pc, #208]	; (8004f18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	623b      	str	r3, [r7, #32]
 8004e4c:	e00b      	b.n	8004e66 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	1c59      	adds	r1, r3, #1
 8004e56:	6279      	str	r1, [r7, #36]	; 0x24
 8004e58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	701a      	strb	r2, [r3, #0]
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	09db      	lsrs	r3, r3, #7
 8004e64:	623b      	str	r3, [r7, #32]
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	2b7f      	cmp	r3, #127	; 0x7f
 8004e6a:	d8f0      	bhi.n	8004e4e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	627a      	str	r2, [r7, #36]	; 0x24
 8004e72:	6a3a      	ldr	r2, [r7, #32]
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	701a      	strb	r2, [r3, #0]
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	4b25      	ldr	r3, [pc, #148]	; (8004f18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	e00b      	b.n	8004ea0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	1c59      	adds	r1, r3, #1
 8004e90:	61f9      	str	r1, [r7, #28]
 8004e92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	09db      	lsrs	r3, r3, #7
 8004e9e:	61bb      	str	r3, [r7, #24]
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ea4:	d8f0      	bhi.n	8004e88 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	61fa      	str	r2, [r7, #28]
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	e00b      	b.n	8004ed8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	1c59      	adds	r1, r3, #1
 8004ec8:	6179      	str	r1, [r7, #20]
 8004eca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	09db      	lsrs	r3, r3, #7
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	2b7f      	cmp	r3, #127	; 0x7f
 8004edc:	d8f0      	bhi.n	8004ec0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	617a      	str	r2, [r7, #20]
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	701a      	strb	r2, [r3, #0]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004eee:	2218      	movs	r2, #24
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	68b8      	ldr	r0, [r7, #8]
 8004ef4:	f7ff f888 	bl	8004008 <_SendPacket>
  RECORD_END();
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004efe:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004f06:	4b04      	ldr	r3, [pc, #16]	; (8004f18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	4798      	blx	r3
  }
}
 8004f0c:	bf00      	nop
 8004f0e:	3730      	adds	r7, #48	; 0x30
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	2001433c 	.word	0x2001433c
 8004f18:	2001430c 	.word	0x2001430c

08004f1c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b092      	sub	sp, #72	; 0x48
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004f24:	f3ef 8311 	mrs	r3, BASEPRI
 8004f28:	f04f 0120 	mov.w	r1, #32
 8004f2c:	f381 8811 	msr	BASEPRI, r1
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	486a      	ldr	r0, [pc, #424]	; (80050dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004f34:	f7fe ff7a 	bl	8003e2c <_PreparePacket>
 8004f38:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	647b      	str	r3, [r7, #68]	; 0x44
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	4b66      	ldr	r3, [pc, #408]	; (80050e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f4e:	e00b      	b.n	8004f68 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f56:	1c59      	adds	r1, r3, #1
 8004f58:	6479      	str	r1, [r7, #68]	; 0x44
 8004f5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f64:	09db      	lsrs	r3, r3, #7
 8004f66:	643b      	str	r3, [r7, #64]	; 0x40
 8004f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f6c:	d8f0      	bhi.n	8004f50 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	647a      	str	r2, [r7, #68]	; 0x44
 8004f74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f88:	e00b      	b.n	8004fa2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f90:	1c59      	adds	r1, r3, #1
 8004f92:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004f94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9e:	09db      	lsrs	r3, r3, #7
 8004fa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa6:	d8f0      	bhi.n	8004f8a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]
 8004fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f7fe fee3 	bl	8003d8c <_EncodeStr>
 8004fc6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004fc8:	2209      	movs	r2, #9
 8004fca:	68f9      	ldr	r1, [r7, #12]
 8004fcc:	6938      	ldr	r0, [r7, #16]
 8004fce:	f7ff f81b 	bl	8004008 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	4b40      	ldr	r3, [pc, #256]	; (80050e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	633b      	str	r3, [r7, #48]	; 0x30
 8004fe6:	e00b      	b.n	8005000 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fee:	1c59      	adds	r1, r3, #1
 8004ff0:	6379      	str	r1, [r7, #52]	; 0x34
 8004ff2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	09db      	lsrs	r3, r3, #7
 8004ffe:	633b      	str	r3, [r7, #48]	; 0x30
 8005000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005002:	2b7f      	cmp	r3, #127	; 0x7f
 8005004:	d8f0      	bhi.n	8004fe8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	637a      	str	r2, [r7, #52]	; 0x34
 800500c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005014:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005020:	e00b      	b.n	800503a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	b2da      	uxtb	r2, r3
 8005026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005028:	1c59      	adds	r1, r3, #1
 800502a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800502c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	701a      	strb	r2, [r3, #0]
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	09db      	lsrs	r3, r3, #7
 8005038:	62bb      	str	r3, [r7, #40]	; 0x28
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	2b7f      	cmp	r3, #127	; 0x7f
 800503e:	d8f0      	bhi.n	8005022 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	623b      	str	r3, [r7, #32]
 800505a:	e00b      	b.n	8005074 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	b2da      	uxtb	r2, r3
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	1c59      	adds	r1, r3, #1
 8005064:	6279      	str	r1, [r7, #36]	; 0x24
 8005066:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	701a      	strb	r2, [r3, #0]
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	09db      	lsrs	r3, r3, #7
 8005072:	623b      	str	r3, [r7, #32]
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	2b7f      	cmp	r3, #127	; 0x7f
 8005078:	d8f0      	bhi.n	800505c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	627a      	str	r2, [r7, #36]	; 0x24
 8005080:	6a3a      	ldr	r2, [r7, #32]
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	61fb      	str	r3, [r7, #28]
 800508e:	2300      	movs	r3, #0
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	e00b      	b.n	80050ac <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	b2da      	uxtb	r2, r3
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	1c59      	adds	r1, r3, #1
 800509c:	61f9      	str	r1, [r7, #28]
 800509e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	701a      	strb	r2, [r3, #0]
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	09db      	lsrs	r3, r3, #7
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	2b7f      	cmp	r3, #127	; 0x7f
 80050b0:	d8f0      	bhi.n	8005094 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	61fa      	str	r2, [r7, #28]
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80050c2:	2215      	movs	r2, #21
 80050c4:	68f9      	ldr	r1, [r7, #12]
 80050c6:	6938      	ldr	r0, [r7, #16]
 80050c8:	f7fe ff9e 	bl	8004008 <_SendPacket>
  RECORD_END();
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f383 8811 	msr	BASEPRI, r3
}
 80050d2:	bf00      	nop
 80050d4:	3748      	adds	r7, #72	; 0x48
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	2001433c 	.word	0x2001433c
 80050e0:	2001430c 	.word	0x2001430c

080050e4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80050e8:	4b07      	ldr	r3, [pc, #28]	; (8005108 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80050f0:	4b05      	ldr	r3, [pc, #20]	; (8005108 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80050fa:	4b03      	ldr	r3, [pc, #12]	; (8005108 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	4798      	blx	r3
  }
}
 8005102:	bf00      	nop
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	2001430c 	.word	0x2001430c

0800510c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005114:	f3ef 8311 	mrs	r3, BASEPRI
 8005118:	f04f 0120 	mov.w	r1, #32
 800511c:	f381 8811 	msr	BASEPRI, r1
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	480b      	ldr	r0, [pc, #44]	; (8005150 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005124:	f7fe fe82 	bl	8003e2c <_PreparePacket>
 8005128:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800512a:	2280      	movs	r2, #128	; 0x80
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	6938      	ldr	r0, [r7, #16]
 8005130:	f7fe fe2c 	bl	8003d8c <_EncodeStr>
 8005134:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005136:	220e      	movs	r2, #14
 8005138:	68f9      	ldr	r1, [r7, #12]
 800513a:	6938      	ldr	r0, [r7, #16]
 800513c:	f7fe ff64 	bl	8004008 <_SendPacket>
  RECORD_END();
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f383 8811 	msr	BASEPRI, r3
}
 8005146:	bf00      	nop
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	2001433c 	.word	0x2001433c

08005154 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005154:	b590      	push	{r4, r7, lr}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800515a:	4b15      	ldr	r3, [pc, #84]	; (80051b0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01a      	beq.n	8005198 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005162:	4b13      	ldr	r3, [pc, #76]	; (80051b0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d015      	beq.n	8005198 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800516c:	4b10      	ldr	r3, [pc, #64]	; (80051b0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4798      	blx	r3
 8005174:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005178:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800517a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	000a      	movs	r2, r1
 8005188:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800518a:	4613      	mov	r3, r2
 800518c:	461a      	mov	r2, r3
 800518e:	4621      	mov	r1, r4
 8005190:	200d      	movs	r0, #13
 8005192:	f7ff fcef 	bl	8004b74 <SEGGER_SYSVIEW_RecordU32x2>
 8005196:	e006      	b.n	80051a6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005198:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4619      	mov	r1, r3
 800519e:	200c      	movs	r0, #12
 80051a0:	f7ff fcac 	bl	8004afc <SEGGER_SYSVIEW_RecordU32>
  }
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd90      	pop	{r4, r7, pc}
 80051ae:	bf00      	nop
 80051b0:	2001430c 	.word	0x2001430c
 80051b4:	e0001004 	.word	0xe0001004

080051b8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80051be:	f3ef 8311 	mrs	r3, BASEPRI
 80051c2:	f04f 0120 	mov.w	r1, #32
 80051c6:	f381 8811 	msr	BASEPRI, r1
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	4819      	ldr	r0, [pc, #100]	; (8005234 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80051ce:	f7fe fe2d 	bl	8003e2c <_PreparePacket>
 80051d2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80051d8:	4b17      	ldr	r3, [pc, #92]	; (8005238 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	e00b      	b.n	8005204 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	1c59      	adds	r1, r3, #1
 80051f4:	6179      	str	r1, [r7, #20]
 80051f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	701a      	strb	r2, [r3, #0]
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	09db      	lsrs	r3, r3, #7
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	2b7f      	cmp	r3, #127	; 0x7f
 8005208:	d8f0      	bhi.n	80051ec <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	617a      	str	r2, [r7, #20]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	701a      	strb	r2, [r3, #0]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800521a:	2202      	movs	r2, #2
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	68b8      	ldr	r0, [r7, #8]
 8005220:	f7fe fef2 	bl	8004008 <_SendPacket>
  RECORD_END();
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f383 8811 	msr	BASEPRI, r3
}
 800522a:	bf00      	nop
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	2001433c 	.word	0x2001433c
 8005238:	e000ed04 	.word	0xe000ed04

0800523c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005242:	f3ef 8311 	mrs	r3, BASEPRI
 8005246:	f04f 0120 	mov.w	r1, #32
 800524a:	f381 8811 	msr	BASEPRI, r1
 800524e:	607b      	str	r3, [r7, #4]
 8005250:	4807      	ldr	r0, [pc, #28]	; (8005270 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005252:	f7fe fdeb 	bl	8003e2c <_PreparePacket>
 8005256:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005258:	2203      	movs	r2, #3
 800525a:	6839      	ldr	r1, [r7, #0]
 800525c:	6838      	ldr	r0, [r7, #0]
 800525e:	f7fe fed3 	bl	8004008 <_SendPacket>
  RECORD_END();
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f383 8811 	msr	BASEPRI, r3
}
 8005268:	bf00      	nop
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	2001433c 	.word	0x2001433c

08005274 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800527a:	f3ef 8311 	mrs	r3, BASEPRI
 800527e:	f04f 0120 	mov.w	r1, #32
 8005282:	f381 8811 	msr	BASEPRI, r1
 8005286:	607b      	str	r3, [r7, #4]
 8005288:	4807      	ldr	r0, [pc, #28]	; (80052a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800528a:	f7fe fdcf 	bl	8003e2c <_PreparePacket>
 800528e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005290:	2212      	movs	r2, #18
 8005292:	6839      	ldr	r1, [r7, #0]
 8005294:	6838      	ldr	r0, [r7, #0]
 8005296:	f7fe feb7 	bl	8004008 <_SendPacket>
  RECORD_END();
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f383 8811 	msr	BASEPRI, r3
}
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	2001433c 	.word	0x2001433c

080052ac <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80052b2:	f3ef 8311 	mrs	r3, BASEPRI
 80052b6:	f04f 0120 	mov.w	r1, #32
 80052ba:	f381 8811 	msr	BASEPRI, r1
 80052be:	607b      	str	r3, [r7, #4]
 80052c0:	4807      	ldr	r0, [pc, #28]	; (80052e0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80052c2:	f7fe fdb3 	bl	8003e2c <_PreparePacket>
 80052c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80052c8:	2211      	movs	r2, #17
 80052ca:	6839      	ldr	r1, [r7, #0]
 80052cc:	6838      	ldr	r0, [r7, #0]
 80052ce:	f7fe fe9b 	bl	8004008 <_SendPacket>
  RECORD_END();
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f383 8811 	msr	BASEPRI, r3
}
 80052d8:	bf00      	nop
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	2001433c 	.word	0x2001433c

080052e4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80052ec:	f3ef 8311 	mrs	r3, BASEPRI
 80052f0:	f04f 0120 	mov.w	r1, #32
 80052f4:	f381 8811 	msr	BASEPRI, r1
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	4819      	ldr	r0, [pc, #100]	; (8005360 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80052fc:	f7fe fd96 	bl	8003e2c <_PreparePacket>
 8005300:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005306:	4b17      	ldr	r3, [pc, #92]	; (8005364 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	61fb      	str	r3, [r7, #28]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	61bb      	str	r3, [r7, #24]
 8005318:	e00b      	b.n	8005332 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	b2da      	uxtb	r2, r3
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	1c59      	adds	r1, r3, #1
 8005322:	61f9      	str	r1, [r7, #28]
 8005324:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	701a      	strb	r2, [r3, #0]
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	09db      	lsrs	r3, r3, #7
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	2b7f      	cmp	r3, #127	; 0x7f
 8005336:	d8f0      	bhi.n	800531a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	61fa      	str	r2, [r7, #28]
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	701a      	strb	r2, [r3, #0]
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005348:	2208      	movs	r2, #8
 800534a:	68f9      	ldr	r1, [r7, #12]
 800534c:	6938      	ldr	r0, [r7, #16]
 800534e:	f7fe fe5b 	bl	8004008 <_SendPacket>
  RECORD_END();
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f383 8811 	msr	BASEPRI, r3
}
 8005358:	bf00      	nop
 800535a:	3720      	adds	r7, #32
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	2001433c 	.word	0x2001433c
 8005364:	2001430c 	.word	0x2001430c

08005368 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005370:	f3ef 8311 	mrs	r3, BASEPRI
 8005374:	f04f 0120 	mov.w	r1, #32
 8005378:	f381 8811 	msr	BASEPRI, r1
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	4819      	ldr	r0, [pc, #100]	; (80053e4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005380:	f7fe fd54 	bl	8003e2c <_PreparePacket>
 8005384:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800538a:	4b17      	ldr	r3, [pc, #92]	; (80053e8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	61fb      	str	r3, [r7, #28]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	e00b      	b.n	80053b6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	1c59      	adds	r1, r3, #1
 80053a6:	61f9      	str	r1, [r7, #28]
 80053a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	701a      	strb	r2, [r3, #0]
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	09db      	lsrs	r3, r3, #7
 80053b4:	61bb      	str	r3, [r7, #24]
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	2b7f      	cmp	r3, #127	; 0x7f
 80053ba:	d8f0      	bhi.n	800539e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	61fa      	str	r2, [r7, #28]
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	701a      	strb	r2, [r3, #0]
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80053cc:	2204      	movs	r2, #4
 80053ce:	68f9      	ldr	r1, [r7, #12]
 80053d0:	6938      	ldr	r0, [r7, #16]
 80053d2:	f7fe fe19 	bl	8004008 <_SendPacket>
  RECORD_END();
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f383 8811 	msr	BASEPRI, r3
}
 80053dc:	bf00      	nop
 80053de:	3720      	adds	r7, #32
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	2001433c 	.word	0x2001433c
 80053e8:	2001430c 	.word	0x2001430c

080053ec <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80053f4:	f3ef 8311 	mrs	r3, BASEPRI
 80053f8:	f04f 0120 	mov.w	r1, #32
 80053fc:	f381 8811 	msr	BASEPRI, r1
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	4819      	ldr	r0, [pc, #100]	; (8005468 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005404:	f7fe fd12 	bl	8003e2c <_PreparePacket>
 8005408:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800540e:	4b17      	ldr	r3, [pc, #92]	; (800546c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	61fb      	str	r3, [r7, #28]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	61bb      	str	r3, [r7, #24]
 8005420:	e00b      	b.n	800543a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	b2da      	uxtb	r2, r3
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	1c59      	adds	r1, r3, #1
 800542a:	61f9      	str	r1, [r7, #28]
 800542c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	701a      	strb	r2, [r3, #0]
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	09db      	lsrs	r3, r3, #7
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	2b7f      	cmp	r3, #127	; 0x7f
 800543e:	d8f0      	bhi.n	8005422 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	61fa      	str	r2, [r7, #28]
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	701a      	strb	r2, [r3, #0]
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005450:	2206      	movs	r2, #6
 8005452:	68f9      	ldr	r1, [r7, #12]
 8005454:	6938      	ldr	r0, [r7, #16]
 8005456:	f7fe fdd7 	bl	8004008 <_SendPacket>
  RECORD_END();
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f383 8811 	msr	BASEPRI, r3
}
 8005460:	bf00      	nop
 8005462:	3720      	adds	r7, #32
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	2001433c 	.word	0x2001433c
 800546c:	2001430c 	.word	0x2001430c

08005470 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005470:	b580      	push	{r7, lr}
 8005472:	b08a      	sub	sp, #40	; 0x28
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800547a:	f3ef 8311 	mrs	r3, BASEPRI
 800547e:	f04f 0120 	mov.w	r1, #32
 8005482:	f381 8811 	msr	BASEPRI, r1
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	4827      	ldr	r0, [pc, #156]	; (8005528 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800548a:	f7fe fccf 	bl	8003e2c <_PreparePacket>
 800548e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005494:	4b25      	ldr	r3, [pc, #148]	; (800552c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	623b      	str	r3, [r7, #32]
 80054a6:	e00b      	b.n	80054c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	1c59      	adds	r1, r3, #1
 80054b0:	6279      	str	r1, [r7, #36]	; 0x24
 80054b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	09db      	lsrs	r3, r3, #7
 80054be:	623b      	str	r3, [r7, #32]
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	2b7f      	cmp	r3, #127	; 0x7f
 80054c4:	d8f0      	bhi.n	80054a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	627a      	str	r2, [r7, #36]	; 0x24
 80054cc:	6a3a      	ldr	r2, [r7, #32]
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	61fb      	str	r3, [r7, #28]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	e00b      	b.n	80054f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	1c59      	adds	r1, r3, #1
 80054e8:	61f9      	str	r1, [r7, #28]
 80054ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	09db      	lsrs	r3, r3, #7
 80054f6:	61bb      	str	r3, [r7, #24]
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	2b7f      	cmp	r3, #127	; 0x7f
 80054fc:	d8f0      	bhi.n	80054e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	61fa      	str	r2, [r7, #28]
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	701a      	strb	r2, [r3, #0]
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800550e:	2207      	movs	r2, #7
 8005510:	68f9      	ldr	r1, [r7, #12]
 8005512:	6938      	ldr	r0, [r7, #16]
 8005514:	f7fe fd78 	bl	8004008 <_SendPacket>
  RECORD_END();
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f383 8811 	msr	BASEPRI, r3
}
 800551e:	bf00      	nop
 8005520:	3728      	adds	r7, #40	; 0x28
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	2001433c 	.word	0x2001433c
 800552c:	2001430c 	.word	0x2001430c

08005530 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005530:	b580      	push	{r7, lr}
 8005532:	b08c      	sub	sp, #48	; 0x30
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800553a:	4b3b      	ldr	r3, [pc, #236]	; (8005628 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d06d      	beq.n	800561e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005542:	4b39      	ldr	r3, [pc, #228]	; (8005628 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005548:	2300      	movs	r3, #0
 800554a:	62bb      	str	r3, [r7, #40]	; 0x28
 800554c:	e008      	b.n	8005560 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800554e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	2b00      	cmp	r3, #0
 8005558:	d007      	beq.n	800556a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	3301      	adds	r3, #1
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005560:	79fb      	ldrb	r3, [r7, #7]
 8005562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005564:	429a      	cmp	r2, r3
 8005566:	d3f2      	bcc.n	800554e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005568:	e000      	b.n	800556c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800556a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800556c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556e:	2b00      	cmp	r3, #0
 8005570:	d055      	beq.n	800561e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005572:	f3ef 8311 	mrs	r3, BASEPRI
 8005576:	f04f 0120 	mov.w	r1, #32
 800557a:	f381 8811 	msr	BASEPRI, r1
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	482a      	ldr	r0, [pc, #168]	; (800562c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005582:	f7fe fc53 	bl	8003e2c <_PreparePacket>
 8005586:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	627b      	str	r3, [r7, #36]	; 0x24
 8005590:	79fb      	ldrb	r3, [r7, #7]
 8005592:	623b      	str	r3, [r7, #32]
 8005594:	e00b      	b.n	80055ae <SEGGER_SYSVIEW_SendModule+0x7e>
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	b2da      	uxtb	r2, r3
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	1c59      	adds	r1, r3, #1
 800559e:	6279      	str	r1, [r7, #36]	; 0x24
 80055a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	09db      	lsrs	r3, r3, #7
 80055ac:	623b      	str	r3, [r7, #32]
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	2b7f      	cmp	r3, #127	; 0x7f
 80055b2:	d8f0      	bhi.n	8005596 <SEGGER_SYSVIEW_SendModule+0x66>
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	627a      	str	r2, [r7, #36]	; 0x24
 80055ba:	6a3a      	ldr	r2, [r7, #32]
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	701a      	strb	r2, [r3, #0]
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	61bb      	str	r3, [r7, #24]
 80055ce:	e00b      	b.n	80055e8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	1c59      	adds	r1, r3, #1
 80055d8:	61f9      	str	r1, [r7, #28]
 80055da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	09db      	lsrs	r3, r3, #7
 80055e6:	61bb      	str	r3, [r7, #24]
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	2b7f      	cmp	r3, #127	; 0x7f
 80055ec:	d8f0      	bhi.n	80055d0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	61fa      	str	r2, [r7, #28]
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80055fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2280      	movs	r2, #128	; 0x80
 8005604:	4619      	mov	r1, r3
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f7fe fbc0 	bl	8003d8c <_EncodeStr>
 800560c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800560e:	2216      	movs	r2, #22
 8005610:	68f9      	ldr	r1, [r7, #12]
 8005612:	6938      	ldr	r0, [r7, #16]
 8005614:	f7fe fcf8 	bl	8004008 <_SendPacket>
      RECORD_END();
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800561e:	bf00      	nop
 8005620:	3730      	adds	r7, #48	; 0x30
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20014334 	.word	0x20014334
 800562c:	2001433c 	.word	0x2001433c

08005630 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005636:	4b0c      	ldr	r3, [pc, #48]	; (8005668 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00f      	beq.n	800565e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800563e:	4b0a      	ldr	r3, [pc, #40]	; (8005668 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1f2      	bne.n	8005644 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800565e:	bf00      	nop
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20014334 	.word	0x20014334

0800566c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005672:	f3ef 8311 	mrs	r3, BASEPRI
 8005676:	f04f 0120 	mov.w	r1, #32
 800567a:	f381 8811 	msr	BASEPRI, r1
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	4817      	ldr	r0, [pc, #92]	; (80056e0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005682:	f7fe fbd3 	bl	8003e2c <_PreparePacket>
 8005686:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	4b14      	ldr	r3, [pc, #80]	; (80056e4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	e00b      	b.n	80056b0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	b2da      	uxtb	r2, r3
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	1c59      	adds	r1, r3, #1
 80056a0:	6179      	str	r1, [r7, #20]
 80056a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	09db      	lsrs	r3, r3, #7
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2b7f      	cmp	r3, #127	; 0x7f
 80056b4:	d8f0      	bhi.n	8005698 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	617a      	str	r2, [r7, #20]
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80056c6:	221b      	movs	r2, #27
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	68b8      	ldr	r0, [r7, #8]
 80056cc:	f7fe fc9c 	bl	8004008 <_SendPacket>
  RECORD_END();
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f383 8811 	msr	BASEPRI, r3
}
 80056d6:	bf00      	nop
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	2001433c 	.word	0x2001433c
 80056e4:	20014338 	.word	0x20014338

080056e8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80056e8:	b40f      	push	{r0, r1, r2, r3}
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b082      	sub	sp, #8
 80056ee:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80056f0:	f107 0314 	add.w	r3, r7, #20
 80056f4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80056f6:	1d3b      	adds	r3, r7, #4
 80056f8:	461a      	mov	r2, r3
 80056fa:	2100      	movs	r1, #0
 80056fc:	6938      	ldr	r0, [r7, #16]
 80056fe:	f7fe ff93 	bl	8004628 <_VPrintTarget>
  va_end(ParamList);
}
 8005702:	bf00      	nop
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800570c:	b004      	add	sp, #16
 800570e:	4770      	bx	lr

08005710 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005710:	b580      	push	{r7, lr}
 8005712:	b08a      	sub	sp, #40	; 0x28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005718:	f3ef 8311 	mrs	r3, BASEPRI
 800571c:	f04f 0120 	mov.w	r1, #32
 8005720:	f381 8811 	msr	BASEPRI, r1
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	4827      	ldr	r0, [pc, #156]	; (80057c4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005728:	f7fe fb80 	bl	8003e2c <_PreparePacket>
 800572c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800572e:	2280      	movs	r2, #128	; 0x80
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	6938      	ldr	r0, [r7, #16]
 8005734:	f7fe fb2a 	bl	8003d8c <_EncodeStr>
 8005738:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	627b      	str	r3, [r7, #36]	; 0x24
 800573e:	2301      	movs	r3, #1
 8005740:	623b      	str	r3, [r7, #32]
 8005742:	e00b      	b.n	800575c <SEGGER_SYSVIEW_Warn+0x4c>
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	b2da      	uxtb	r2, r3
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	1c59      	adds	r1, r3, #1
 800574c:	6279      	str	r1, [r7, #36]	; 0x24
 800574e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	09db      	lsrs	r3, r3, #7
 800575a:	623b      	str	r3, [r7, #32]
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	2b7f      	cmp	r3, #127	; 0x7f
 8005760:	d8f0      	bhi.n	8005744 <SEGGER_SYSVIEW_Warn+0x34>
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	627a      	str	r2, [r7, #36]	; 0x24
 8005768:	6a3a      	ldr	r2, [r7, #32]
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	61fb      	str	r3, [r7, #28]
 8005776:	2300      	movs	r3, #0
 8005778:	61bb      	str	r3, [r7, #24]
 800577a:	e00b      	b.n	8005794 <SEGGER_SYSVIEW_Warn+0x84>
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	b2da      	uxtb	r2, r3
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	1c59      	adds	r1, r3, #1
 8005784:	61f9      	str	r1, [r7, #28]
 8005786:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	09db      	lsrs	r3, r3, #7
 8005792:	61bb      	str	r3, [r7, #24]
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	2b7f      	cmp	r3, #127	; 0x7f
 8005798:	d8f0      	bhi.n	800577c <SEGGER_SYSVIEW_Warn+0x6c>
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	61fa      	str	r2, [r7, #28]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80057aa:	221a      	movs	r2, #26
 80057ac:	68f9      	ldr	r1, [r7, #12]
 80057ae:	6938      	ldr	r0, [r7, #16]
 80057b0:	f7fe fc2a 	bl	8004008 <_SendPacket>
  RECORD_END();
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f383 8811 	msr	BASEPRI, r3
}
 80057ba:	bf00      	nop
 80057bc:	3728      	adds	r7, #40	; 0x28
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	2001433c 	.word	0x2001433c

080057c8 <__libc_init_array>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	4d0d      	ldr	r5, [pc, #52]	; (8005800 <__libc_init_array+0x38>)
 80057cc:	4c0d      	ldr	r4, [pc, #52]	; (8005804 <__libc_init_array+0x3c>)
 80057ce:	1b64      	subs	r4, r4, r5
 80057d0:	10a4      	asrs	r4, r4, #2
 80057d2:	2600      	movs	r6, #0
 80057d4:	42a6      	cmp	r6, r4
 80057d6:	d109      	bne.n	80057ec <__libc_init_array+0x24>
 80057d8:	4d0b      	ldr	r5, [pc, #44]	; (8005808 <__libc_init_array+0x40>)
 80057da:	4c0c      	ldr	r4, [pc, #48]	; (800580c <__libc_init_array+0x44>)
 80057dc:	f000 f83e 	bl	800585c <_init>
 80057e0:	1b64      	subs	r4, r4, r5
 80057e2:	10a4      	asrs	r4, r4, #2
 80057e4:	2600      	movs	r6, #0
 80057e6:	42a6      	cmp	r6, r4
 80057e8:	d105      	bne.n	80057f6 <__libc_init_array+0x2e>
 80057ea:	bd70      	pop	{r4, r5, r6, pc}
 80057ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f0:	4798      	blx	r3
 80057f2:	3601      	adds	r6, #1
 80057f4:	e7ee      	b.n	80057d4 <__libc_init_array+0xc>
 80057f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fa:	4798      	blx	r3
 80057fc:	3601      	adds	r6, #1
 80057fe:	e7f2      	b.n	80057e6 <__libc_init_array+0x1e>
 8005800:	080059f4 	.word	0x080059f4
 8005804:	080059f4 	.word	0x080059f4
 8005808:	080059f4 	.word	0x080059f4
 800580c:	080059f8 	.word	0x080059f8

08005810 <memcmp>:
 8005810:	b510      	push	{r4, lr}
 8005812:	3901      	subs	r1, #1
 8005814:	4402      	add	r2, r0
 8005816:	4290      	cmp	r0, r2
 8005818:	d101      	bne.n	800581e <memcmp+0xe>
 800581a:	2000      	movs	r0, #0
 800581c:	e005      	b.n	800582a <memcmp+0x1a>
 800581e:	7803      	ldrb	r3, [r0, #0]
 8005820:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005824:	42a3      	cmp	r3, r4
 8005826:	d001      	beq.n	800582c <memcmp+0x1c>
 8005828:	1b18      	subs	r0, r3, r4
 800582a:	bd10      	pop	{r4, pc}
 800582c:	3001      	adds	r0, #1
 800582e:	e7f2      	b.n	8005816 <memcmp+0x6>

08005830 <memcpy>:
 8005830:	440a      	add	r2, r1
 8005832:	4291      	cmp	r1, r2
 8005834:	f100 33ff 	add.w	r3, r0, #4294967295
 8005838:	d100      	bne.n	800583c <memcpy+0xc>
 800583a:	4770      	bx	lr
 800583c:	b510      	push	{r4, lr}
 800583e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005846:	4291      	cmp	r1, r2
 8005848:	d1f9      	bne.n	800583e <memcpy+0xe>
 800584a:	bd10      	pop	{r4, pc}

0800584c <memset>:
 800584c:	4402      	add	r2, r0
 800584e:	4603      	mov	r3, r0
 8005850:	4293      	cmp	r3, r2
 8005852:	d100      	bne.n	8005856 <memset+0xa>
 8005854:	4770      	bx	lr
 8005856:	f803 1b01 	strb.w	r1, [r3], #1
 800585a:	e7f9      	b.n	8005850 <memset+0x4>

0800585c <_init>:
 800585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585e:	bf00      	nop
 8005860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005862:	bc08      	pop	{r3}
 8005864:	469e      	mov	lr, r3
 8005866:	4770      	bx	lr

08005868 <_fini>:
 8005868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586a:	bf00      	nop
 800586c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800586e:	bc08      	pop	{r3}
 8005870:	469e      	mov	lr, r3
 8005872:	4770      	bx	lr
