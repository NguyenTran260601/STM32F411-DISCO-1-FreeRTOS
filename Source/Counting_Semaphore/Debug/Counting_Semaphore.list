
Counting_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08005670  08005670  00015670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005780  08005780  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005780  08005780  00015780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005788  08005788  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005788  08005788  00015788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800578c  0800578c  0001578c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012eec  20000078  08005808  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012f64  08005808  00022f64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010158  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e0  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  000329e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00033960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e9e  00000000  00000000  000347b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ff4  00000000  00000000  0004c656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096df7  00000000  00000000  0005d64a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4441  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004460  00000000  00000000  000f4494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005658 	.word	0x08005658

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005658 	.word	0x08005658

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	db0b      	blt.n	80005be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	f003 021f 	and.w	r2, r3, #31
 80005ac:	4907      	ldr	r1, [pc, #28]	; (80005cc <__NVIC_EnableIRQ+0x38>)
 80005ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b2:	095b      	lsrs	r3, r3, #5
 80005b4:	2001      	movs	r0, #1
 80005b6:	fa00 f202 	lsl.w	r2, r0, r2
 80005ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000e100 	.word	0xe000e100

080005d0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db0c      	blt.n	80005fc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f003 021f 	and.w	r2, r3, #31
 80005e8:	4907      	ldr	r1, [pc, #28]	; (8000608 <__NVIC_SetPendingIRQ+0x38>)
 80005ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ee:	095b      	lsrs	r3, r3, #5
 80005f0:	2001      	movs	r0, #1
 80005f2:	fa00 f202 	lsl.w	r2, r0, r2
 80005f6:	3340      	adds	r3, #64	; 0x40
 80005f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	e000e100 	.word	0xe000e100

0800060c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	6039      	str	r1, [r7, #0]
 8000616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061c:	2b00      	cmp	r3, #0
 800061e:	db0a      	blt.n	8000636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	b2da      	uxtb	r2, r3
 8000624:	490c      	ldr	r1, [pc, #48]	; (8000658 <__NVIC_SetPriority+0x4c>)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	0112      	lsls	r2, r2, #4
 800062c:	b2d2      	uxtb	r2, r2
 800062e:	440b      	add	r3, r1
 8000630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000634:	e00a      	b.n	800064c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4908      	ldr	r1, [pc, #32]	; (800065c <__NVIC_SetPriority+0x50>)
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	f003 030f 	and.w	r3, r3, #15
 8000642:	3b04      	subs	r3, #4
 8000644:	0112      	lsls	r2, r2, #4
 8000646:	b2d2      	uxtb	r2, r2
 8000648:	440b      	add	r3, r1
 800064a:	761a      	strb	r2, [r3, #24]
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000e100 	.word	0xe000e100
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <prvReaddTaskToReadyList>:

static void prvSetupSoftwareInterrupt();
void vSoftwareInterruptHandler( void );

void prvReaddTaskToReadyList(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
	...

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 fc87 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f8fd 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 f991 	bl	80009a4 <MX_GPIO_Init>
  MX_USART2_Init();
 8000682:	f000 f963 	bl	800094c <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
	//enable CYCCNT register
	DWT_CTRL |= (1 << 0);
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <main+0x7c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a18      	ldr	r2, [pc, #96]	; (80006ec <main+0x7c>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6013      	str	r3, [r2, #0]


	sprintf(usr_msg,"Demo of usage of counting semaphore\r\n");
 8000692:	4917      	ldr	r1, [pc, #92]	; (80006f0 <main+0x80>)
 8000694:	4817      	ldr	r0, [pc, #92]	; (80006f4 <main+0x84>)
 8000696:	f004 fb7f 	bl	8004d98 <siprintf>
	printmsg(usr_msg);
 800069a:	4816      	ldr	r0, [pc, #88]	; (80006f4 <main+0x84>)
 800069c:	f000 f8c2 	bl	8000824 <printmsg>


    /* Create semaphore counting max count = 10 */
    xCountingSemaphore = xSemaphoreCreateCounting( 10, 0 );
 80006a0:	2100      	movs	r1, #0
 80006a2:	200a      	movs	r0, #10
 80006a4:	f002 fbcd 	bl	8002e42 <xQueueCreateCountingSemaphore>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <main+0x88>)
 80006ac:	6013      	str	r3, [r2, #0]

	/* Check the semaphore was created successfully. */
	if( xCountingSemaphore != NULL )
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <main+0x88>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d019      	beq.n	80006ea <main+0x7a>
	{
    	/* Enable the button interrupt and set its priority. */
    	prvSetupSoftwareInterrupt();
 80006b6:	f000 f863 	bl	8000780 <prvSetupSoftwareInterrupt>

		/* Create the 'handler' task.  This is the task that will be synchronized
		with the interrupt.  The handler task is created with a high priority to
		ensure it runs immediately after the interrupt exits.  In this case a
		priority of 3 is chosen. */
		xTaskCreate( vHandlerTask, "Handler", 500, NULL, 1, NULL );
 80006ba:	2300      	movs	r3, #0
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	2301      	movs	r3, #1
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	2300      	movs	r3, #0
 80006c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006c8:	490c      	ldr	r1, [pc, #48]	; (80006fc <main+0x8c>)
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <main+0x90>)
 80006cc:	f002 fdf8 	bl	80032c0 <xTaskCreate>

		/* Create the task that will periodically generate a software interrupt.
		This is created with a priority below the handler task to ensure it will
		get preempted each time the handler task exist the Blocked state. */
		xTaskCreate( vPeriodicTask, "Periodic", 500, NULL, 3, NULL );
 80006d0:	2300      	movs	r3, #0
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	2303      	movs	r3, #3
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2300      	movs	r3, #0
 80006da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006de:	4909      	ldr	r1, [pc, #36]	; (8000704 <main+0x94>)
 80006e0:	4809      	ldr	r0, [pc, #36]	; (8000708 <main+0x98>)
 80006e2:	f002 fded 	bl	80032c0 <xTaskCreate>

		/* Start the scheduler so the created tasks start executing. */
		vTaskStartScheduler();
 80006e6:	f002 ff9b 	bl	8003620 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <main+0x7a>
 80006ec:	e0001000 	.word	0xe0001000
 80006f0:	08005670 	.word	0x08005670
 80006f4:	200000d8 	.word	0x200000d8
 80006f8:	200001d4 	.word	0x200001d4
 80006fc:	08005698 	.word	0x08005698
 8000700:	0800070d 	.word	0x0800070d
 8000704:	080056a0 	.word	0x080056a0
 8000708:	08000741 	.word	0x08000741

0800070c <vHandlerTask>:




static void vHandlerTask( void *pvParameters )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
		/* Use the semaphore to wait for the event.  The semaphore was created
		before the scheduler was started so before this task ran for the first
		time.  The task blocks indefinitely meaning this function call will only
		return once the semaphore has been successfully obtained - so there is no
		need to check the returned value. */
		xSemaphoreTake( xCountingSemaphore, portMAX_DELAY );
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <vHandlerTask+0x28>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f04f 31ff 	mov.w	r1, #4294967295
 800071c:	4618      	mov	r0, r3
 800071e:	f002 fc5b 	bl	8002fd8 <xQueueSemaphoreTake>

		/* To get here the event must have occurred.  Process the event (in this
		case we just print out a message). */
		sprintf(usr_msg, "Handler task - Processing event.\r\n");
 8000722:	4905      	ldr	r1, [pc, #20]	; (8000738 <vHandlerTask+0x2c>)
 8000724:	4805      	ldr	r0, [pc, #20]	; (800073c <vHandlerTask+0x30>)
 8000726:	f004 fb37 	bl	8004d98 <siprintf>
		printmsg(usr_msg);
 800072a:	4804      	ldr	r0, [pc, #16]	; (800073c <vHandlerTask+0x30>)
 800072c:	f000 f87a 	bl	8000824 <printmsg>
		xSemaphoreTake( xCountingSemaphore, portMAX_DELAY );
 8000730:	e7f0      	b.n	8000714 <vHandlerTask+0x8>
 8000732:	bf00      	nop
 8000734:	200001d4 	.word	0x200001d4
 8000738:	080056ac 	.word	0x080056ac
 800073c:	200000d8 	.word	0x200000d8

08000740 <vPeriodicTask>:
	}
}


static void vPeriodicTask( void *pvParameters )
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	/* As per most tasks, this task is implemented within an infinite loop. */
	for( ;; )
	{
		/* This task is just used to 'simulate' an interrupt.  This is done by
		periodically generating a software interrupt. */
		vTaskDelay( pdMS_TO_TICKS(500) );
 8000748:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800074c:	f002 ff34 	bl	80035b8 <vTaskDelay>

		/* Generate the interrupt, printing a message both before hand and
		afterwards so the sequence of execution is evident from the output. */
        sprintf(usr_msg, "Periodic task - Pending the interrupt.\r\n" );
 8000750:	4908      	ldr	r1, [pc, #32]	; (8000774 <vPeriodicTask+0x34>)
 8000752:	4809      	ldr	r0, [pc, #36]	; (8000778 <vPeriodicTask+0x38>)
 8000754:	f004 fb20 	bl	8004d98 <siprintf>
    	printmsg(usr_msg);
 8000758:	4807      	ldr	r0, [pc, #28]	; (8000778 <vPeriodicTask+0x38>)
 800075a:	f000 f863 	bl	8000824 <printmsg>

        //pend the interrupt
        NVIC_SetPendingIRQ(EXTI15_10_IRQn);
 800075e:	2028      	movs	r0, #40	; 0x28
 8000760:	f7ff ff36 	bl	80005d0 <__NVIC_SetPendingIRQ>

        sprintf(usr_msg, "Periodic task - Resuming.\r\n" );
 8000764:	4905      	ldr	r1, [pc, #20]	; (800077c <vPeriodicTask+0x3c>)
 8000766:	4804      	ldr	r0, [pc, #16]	; (8000778 <vPeriodicTask+0x38>)
 8000768:	f004 fb16 	bl	8004d98 <siprintf>
        printmsg(usr_msg);
 800076c:	4802      	ldr	r0, [pc, #8]	; (8000778 <vPeriodicTask+0x38>)
 800076e:	f000 f859 	bl	8000824 <printmsg>
		vTaskDelay( pdMS_TO_TICKS(500) );
 8000772:	e7e9      	b.n	8000748 <vPeriodicTask+0x8>
 8000774:	080056d0 	.word	0x080056d0
 8000778:	200000d8 	.word	0x200000d8
 800077c:	080056fc 	.word	0x080056fc

08000780 <prvSetupSoftwareInterrupt>:
	}
}


static void prvSetupSoftwareInterrupt()
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

	/* The interrupt service routine uses an (interrupt safe) FreeRTOS API
	function so the interrupt priority must be at or below the priority defined
	by configSYSCALL_INTERRUPT_PRIORITY. */

	NVIC_SetPriority( EXTI15_10_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY );
 8000784:	2105      	movs	r1, #5
 8000786:	2028      	movs	r0, #40	; 0x28
 8000788:	f7ff ff40 	bl	800060c <__NVIC_SetPriority>

	/* Enable the interrupt. */
	NVIC_EnableIRQ( EXTI15_10_IRQn );
 800078c:	2028      	movs	r0, #40	; 0x28
 800078e:	f7ff ff01 	bl	8000594 <__NVIC_EnableIRQ>
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <EXTI15_10_IRQHandler>:
/*-----------------------------------------------------------*/

void EXTI15_10_IRQHandler( void )
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
	task, the following 'gives' are to demonstrate that the semaphore latches
	the events to allow the handler task to process them in turn without any
	events getting lost.  This simulates multiple interrupts being taken by the
	processor, even though in this case the events are simulated within a single
	interrupt occurrence.*/
	sprintf(usr_msg,"==>Button_Handler\r\n");
 80007a2:	491c      	ldr	r1, [pc, #112]	; (8000814 <EXTI15_10_IRQHandler+0x7c>)
 80007a4:	481c      	ldr	r0, [pc, #112]	; (8000818 <EXTI15_10_IRQHandler+0x80>)
 80007a6:	f004 faf7 	bl	8004d98 <siprintf>
	printmsg(usr_msg);
 80007aa:	481b      	ldr	r0, [pc, #108]	; (8000818 <EXTI15_10_IRQHandler+0x80>)
 80007ac:	f000 f83a 	bl	8000824 <printmsg>

	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <EXTI15_10_IRQHandler+0x84>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	1d3a      	adds	r2, r7, #4
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 fb70 	bl	8002e9e <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <EXTI15_10_IRQHandler+0x84>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	1d3a      	adds	r2, r7, #4
 80007c4:	4611      	mov	r1, r2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f002 fb69 	bl	8002e9e <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <EXTI15_10_IRQHandler+0x84>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	1d3a      	adds	r2, r7, #4
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 fb62 	bl	8002e9e <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <EXTI15_10_IRQHandler+0x84>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	1d3a      	adds	r2, r7, #4
 80007e0:	4611      	mov	r1, r2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fb5b 	bl	8002e9e <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <EXTI15_10_IRQHandler+0x84>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	1d3a      	adds	r2, r7, #4
 80007ee:	4611      	mov	r1, r2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 fb54 	bl	8002e9e <xQueueGiveFromISR>
    higher priority task.
    NOTE: The syntax for forcing a context switch within an ISR varies between
    FreeRTOS ports.  The portEND_SWITCHING_ISR() macro is provided as part of
    the Cortex M3 port layer for this purpose.  taskYIELD() must never be called
    from an ISR! */
    portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d007      	beq.n	800080c <EXTI15_10_IRQHandler+0x74>
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <EXTI15_10_IRQHandler+0x88>)
 80007fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	f3bf 8f4f 	dsb	sy
 8000808:	f3bf 8f6f 	isb	sy
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	08005718 	.word	0x08005718
 8000818:	200000d8 	.word	0x200000d8
 800081c:	200001d4 	.word	0x200001d4
 8000820:	e000ed04 	.word	0xe000ed04

08000824 <printmsg>:

void printmsg(char *msg)
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i < strlen(msg); i++)
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	e013      	b.n	800085a <printmsg+0x36>
	{
		HAL_USART_Transmit(&husart2, (uint8_t*)&msg[i], strlen(&msg[i]), HAL_MAX_DELAY);
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	18d4      	adds	r4, r2, r3
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	4413      	add	r3, r2
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fcce 	bl	80001e0 <strlen>
 8000844:	4603      	mov	r3, r0
 8000846:	b29a      	uxth	r2, r3
 8000848:	f04f 33ff 	mov.w	r3, #4294967295
 800084c:	4621      	mov	r1, r4
 800084e:	4809      	ldr	r0, [pc, #36]	; (8000874 <printmsg+0x50>)
 8000850:	f001 fde7 	bl	8002422 <HAL_USART_Transmit>
	for(uint32_t i=0; i < strlen(msg); i++)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	3301      	adds	r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff fcc0 	bl	80001e0 <strlen>
 8000860:	4602      	mov	r2, r0
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	4293      	cmp	r3, r2
 8000866:	d3e4      	bcc.n	8000832 <printmsg+0xe>
	}

}
 8000868:	bf00      	nop
 800086a:	bf00      	nop
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	bd90      	pop	{r4, r7, pc}
 8000872:	bf00      	nop
 8000874:	20000094 	.word	0x20000094

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b094      	sub	sp, #80	; 0x50
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	2230      	movs	r2, #48	; 0x30
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f004 fa7e 	bl	8004d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	4b28      	ldr	r3, [pc, #160]	; (8000944 <SystemClock_Config+0xcc>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	4a27      	ldr	r2, [pc, #156]	; (8000944 <SystemClock_Config+0xcc>)
 80008a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008aa:	6413      	str	r3, [r2, #64]	; 0x40
 80008ac:	4b25      	ldr	r3, [pc, #148]	; (8000944 <SystemClock_Config+0xcc>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <SystemClock_Config+0xd0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a21      	ldr	r2, [pc, #132]	; (8000948 <SystemClock_Config+0xd0>)
 80008c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <SystemClock_Config+0xd0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d8:	2301      	movs	r3, #1
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008dc:	2310      	movs	r3, #16
 80008de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e0:	2302      	movs	r3, #2
 80008e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e4:	2300      	movs	r3, #0
 80008e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008e8:	2308      	movs	r3, #8
 80008ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008ec:	23c0      	movs	r3, #192	; 0xc0
 80008ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008f0:	2304      	movs	r3, #4
 80008f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80008f4:	2308      	movs	r3, #8
 80008f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f8:	f107 0320 	add.w	r3, r7, #32
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 fe05 	bl	800150c <HAL_RCC_OscConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000908:	f000 f9bc 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090c:	230f      	movs	r3, #15
 800090e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000910:	2302      	movs	r3, #2
 8000912:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000918:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800091c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800091e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000922:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2103      	movs	r1, #3
 800092a:	4618      	mov	r0, r3
 800092c:	f001 f866 	bl	80019fc <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000936:	f000 f9a5 	bl	8000c84 <Error_Handler>
  }
}
 800093a:	bf00      	nop
 800093c:	3750      	adds	r7, #80	; 0x50
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40007000 	.word	0x40007000

0800094c <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_USART2_Init+0x50>)
 8000952:	4a13      	ldr	r2, [pc, #76]	; (80009a0 <MX_USART2_Init+0x54>)
 8000954:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_USART2_Init+0x50>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_USART2_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <MX_USART2_Init+0x50>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_USART2_Init+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_USART2_Init+0x50>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_USART2_Init+0x50>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_USART2_Init+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_USART2_Init+0x50>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_USART2_Init+0x50>)
 800098a:	f001 fd09 	bl	80023a0 <HAL_USART_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000994:	f000 f976 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000094 	.word	0x20000094
 80009a0:	40004400 	.word	0x40004400

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	; 0x30
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
 80009be:	4ba2      	ldr	r3, [pc, #648]	; (8000c48 <MX_GPIO_Init+0x2a4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4aa1      	ldr	r2, [pc, #644]	; (8000c48 <MX_GPIO_Init+0x2a4>)
 80009c4:	f043 0310 	orr.w	r3, r3, #16
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b9f      	ldr	r3, [pc, #636]	; (8000c48 <MX_GPIO_Init+0x2a4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0310 	and.w	r3, r3, #16
 80009d2:	61bb      	str	r3, [r7, #24]
 80009d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	4b9b      	ldr	r3, [pc, #620]	; (8000c48 <MX_GPIO_Init+0x2a4>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a9a      	ldr	r2, [pc, #616]	; (8000c48 <MX_GPIO_Init+0x2a4>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b98      	ldr	r3, [pc, #608]	; (8000c48 <MX_GPIO_Init+0x2a4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b94      	ldr	r3, [pc, #592]	; (8000c48 <MX_GPIO_Init+0x2a4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a93      	ldr	r2, [pc, #588]	; (8000c48 <MX_GPIO_Init+0x2a4>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b91      	ldr	r3, [pc, #580]	; (8000c48 <MX_GPIO_Init+0x2a4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b8d      	ldr	r3, [pc, #564]	; (8000c48 <MX_GPIO_Init+0x2a4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a8c      	ldr	r2, [pc, #560]	; (8000c48 <MX_GPIO_Init+0x2a4>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b8a      	ldr	r3, [pc, #552]	; (8000c48 <MX_GPIO_Init+0x2a4>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	4b86      	ldr	r3, [pc, #536]	; (8000c48 <MX_GPIO_Init+0x2a4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a85      	ldr	r2, [pc, #532]	; (8000c48 <MX_GPIO_Init+0x2a4>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b83      	ldr	r3, [pc, #524]	; (8000c48 <MX_GPIO_Init+0x2a4>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b7f      	ldr	r3, [pc, #508]	; (8000c48 <MX_GPIO_Init+0x2a4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a7e      	ldr	r2, [pc, #504]	; (8000c48 <MX_GPIO_Init+0x2a4>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b7c      	ldr	r3, [pc, #496]	; (8000c48 <MX_GPIO_Init+0x2a4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2108      	movs	r1, #8
 8000a66:	4879      	ldr	r0, [pc, #484]	; (8000c4c <MX_GPIO_Init+0x2a8>)
 8000a68:	f000 fd36 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2101      	movs	r1, #1
 8000a70:	4877      	ldr	r0, [pc, #476]	; (8000c50 <MX_GPIO_Init+0x2ac>)
 8000a72:	f000 fd31 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a76:	2200      	movs	r2, #0
 8000a78:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a7c:	4875      	ldr	r0, [pc, #468]	; (8000c54 <MX_GPIO_Init+0x2b0>)
 8000a7e:	f000 fd2b 	bl	80014d8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a82:	2304      	movs	r3, #4
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	486d      	ldr	r0, [pc, #436]	; (8000c4c <MX_GPIO_Init+0x2a8>)
 8000a96:	f000 fb9b 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4866      	ldr	r0, [pc, #408]	; (8000c4c <MX_GPIO_Init+0x2a8>)
 8000ab2:	f000 fb8d 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000ab6:	2332      	movs	r3, #50	; 0x32
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4860      	ldr	r0, [pc, #384]	; (8000c4c <MX_GPIO_Init+0x2a8>)
 8000acc:	f000 fb80 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	485a      	ldr	r0, [pc, #360]	; (8000c50 <MX_GPIO_Init+0x2ac>)
 8000ae8:	f000 fb72 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000aec:	2308      	movs	r3, #8
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000afc:	2305      	movs	r3, #5
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	4852      	ldr	r0, [pc, #328]	; (8000c50 <MX_GPIO_Init+0x2ac>)
 8000b08:	f000 fb62 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b10:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	484d      	ldr	r0, [pc, #308]	; (8000c58 <MX_GPIO_Init+0x2b4>)
 8000b22:	f000 fb55 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b26:	2310      	movs	r3, #16
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b36:	2306      	movs	r3, #6
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4845      	ldr	r0, [pc, #276]	; (8000c58 <MX_GPIO_Init+0x2b4>)
 8000b42:	f000 fb45 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b46:	23e0      	movs	r3, #224	; 0xe0
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b56:	2305      	movs	r3, #5
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	483d      	ldr	r0, [pc, #244]	; (8000c58 <MX_GPIO_Init+0x2b4>)
 8000b62:	f000 fb35 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000b66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b78:	2305      	movs	r3, #5
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	4836      	ldr	r0, [pc, #216]	; (8000c5c <MX_GPIO_Init+0x2b8>)
 8000b84:	f000 fb24 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b88:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b8c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	482c      	ldr	r0, [pc, #176]	; (8000c54 <MX_GPIO_Init+0x2b0>)
 8000ba2:	f000 fb15 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ba6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb8:	2306      	movs	r3, #6
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4823      	ldr	r0, [pc, #140]	; (8000c50 <MX_GPIO_Init+0x2ac>)
 8000bc4:	f000 fb04 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	481e      	ldr	r0, [pc, #120]	; (8000c58 <MX_GPIO_Init+0x2b4>)
 8000bde:	f000 faf7 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000be2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bf4:	230a      	movs	r3, #10
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4816      	ldr	r0, [pc, #88]	; (8000c58 <MX_GPIO_Init+0x2b4>)
 8000c00:	f000 fae6 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c04:	2320      	movs	r3, #32
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	480f      	ldr	r0, [pc, #60]	; (8000c54 <MX_GPIO_Init+0x2b0>)
 8000c18:	f000 fada 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c1c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c22:	2312      	movs	r3, #18
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <MX_GPIO_Init+0x2b8>)
 8000c3a:	f000 fac9 	bl	80011d0 <HAL_GPIO_Init>

}
 8000c3e:	bf00      	nop
 8000c40:	3730      	adds	r7, #48	; 0x30
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40020800 	.word	0x40020800
 8000c54:	40020c00 	.word	0x40020c00
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	40020400 	.word	0x40020400

08000c60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d101      	bne.n	8000c76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c72:	f000 f9ab 	bl	8000fcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40014400 	.word	0x40014400

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <Error_Handler+0x8>
	...

08000c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <HAL_MspInit+0x4c>)
 8000ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <HAL_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <HAL_MspInit+0x4c>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000cce:	f003 fc83 	bl	80045d8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a28      	ldr	r2, [pc, #160]	; (8000da0 <HAL_USART_MspInit+0xc0>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d149      	bne.n	8000d96 <HAL_USART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <HAL_USART_MspInit+0xc4>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a26      	ldr	r2, [pc, #152]	; (8000da4 <HAL_USART_MspInit+0xc4>)
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b24      	ldr	r3, [pc, #144]	; (8000da4 <HAL_USART_MspInit+0xc4>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <HAL_USART_MspInit+0xc4>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a1f      	ldr	r2, [pc, #124]	; (8000da4 <HAL_USART_MspInit+0xc4>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <HAL_USART_MspInit+0xc4>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <HAL_USART_MspInit+0xc4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a18      	ldr	r2, [pc, #96]	; (8000da4 <HAL_USART_MspInit+0xc4>)
 8000d44:	f043 0308 	orr.w	r3, r3, #8
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <HAL_USART_MspInit+0xc4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PD7     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d56:	230c      	movs	r3, #12
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d66:	2307      	movs	r3, #7
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <HAL_USART_MspInit+0xc8>)
 8000d72:	f000 fa2d 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d76:	2380      	movs	r3, #128	; 0x80
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d86:	2307      	movs	r3, #7
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4806      	ldr	r0, [pc, #24]	; (8000dac <HAL_USART_MspInit+0xcc>)
 8000d92:	f000 fa1d 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40004400 	.word	0x40004400
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020000 	.word	0x40020000
 8000dac:	40020c00 	.word	0x40020c00

08000db0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	; 0x30
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	2019      	movs	r0, #25
 8000dc6:	f000 f9d9 	bl	800117c <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000dca:	2019      	movs	r0, #25
 8000dcc:	f000 f9f2 	bl	80011b4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <HAL_InitTick+0xa4>)
 8000dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd8:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <HAL_InitTick+0xa4>)
 8000dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dde:	6453      	str	r3, [r2, #68]	; 0x44
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <HAL_InitTick+0xa4>)
 8000de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dec:	f107 0210 	add.w	r2, r7, #16
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f001 f820 	bl	8001e3c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000dfc:	f001 f80a 	bl	8001e14 <HAL_RCC_GetPCLK2Freq>
 8000e00:	4603      	mov	r3, r0
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e08:	4a13      	ldr	r2, [pc, #76]	; (8000e58 <HAL_InitTick+0xa8>)
 8000e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0e:	0c9b      	lsrs	r3, r3, #18
 8000e10:	3b01      	subs	r3, #1
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_InitTick+0xac>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <HAL_InitTick+0xb0>)
 8000e18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_InitTick+0xac>)
 8000e1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e20:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000e22:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <HAL_InitTick+0xac>)
 8000e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e26:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <HAL_InitTick+0xac>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_InitTick+0xac>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <HAL_InitTick+0xac>)
 8000e36:	f001 f833 	bl	8001ea0 <HAL_TIM_Base_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d104      	bne.n	8000e4a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000e40:	4806      	ldr	r0, [pc, #24]	; (8000e5c <HAL_InitTick+0xac>)
 8000e42:	f001 f887 	bl	8001f54 <HAL_TIM_Base_Start_IT>
 8000e46:	4603      	mov	r3, r0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3730      	adds	r7, #48	; 0x30
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800
 8000e58:	431bde83 	.word	0x431bde83
 8000e5c:	200001d8 	.word	0x200001d8
 8000e60:	40014400 	.word	0x40014400

08000e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <NMI_Handler+0x4>

08000e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <MemManage_Handler+0x4>

08000e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e96:	f001 f8bf 	bl	8002018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200001d8 	.word	0x200001d8

08000ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <_sbrk+0x5c>)
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <_sbrk+0x60>)
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <_sbrk+0x64>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <_sbrk+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d207      	bcs.n	8000ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed4:	f003 ff20 	bl	8004d18 <__errno>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	220c      	movs	r2, #12
 8000edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e009      	b.n	8000ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <_sbrk+0x64>)
 8000ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20020000 	.word	0x20020000
 8000f04:	00000400 	.word	0x00000400
 8000f08:	20000220 	.word	0x20000220
 8000f0c:	20012f68 	.word	0x20012f68

08000f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <SystemInit+0x20>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <SystemInit+0x20>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f38:	480d      	ldr	r0, [pc, #52]	; (8000f70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f3a:	490e      	ldr	r1, [pc, #56]	; (8000f74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f50:	4c0b      	ldr	r4, [pc, #44]	; (8000f80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f5e:	f7ff ffd7 	bl	8000f10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f62:	f003 fedf 	bl	8004d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f66:	f7ff fb83 	bl	8000670 <main>
  bx  lr    
 8000f6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f74:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f78:	08005790 	.word	0x08005790
  ldr r2, =_sbss
 8000f7c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f80:	20012f64 	.word	0x20012f64

08000f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC_IRQHandler>
	...

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 f8d8 	bl	8001166 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	200f      	movs	r0, #15
 8000fb8:	f7ff fefa 	bl	8000db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f7ff fe68 	bl	8000c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000224 	.word	0x20000224

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000224 	.word	0x20000224

0800100c <__NVIC_SetPriorityGrouping>:
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_EnableIRQ>:
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <__NVIC_EnableIRQ+0x38>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	; 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ff4c 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
 8001188:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800118e:	f7ff ff61 	bl	8001054 <__NVIC_GetPriorityGrouping>
 8001192:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	68b9      	ldr	r1, [r7, #8]
 8001198:	6978      	ldr	r0, [r7, #20]
 800119a:	f7ff ffb1 	bl	8001100 <NVIC_EncodePriority>
 800119e:	4602      	mov	r2, r0
 80011a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a4:	4611      	mov	r1, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff80 	bl	80010ac <__NVIC_SetPriority>
}
 80011ac:	bf00      	nop
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff54 	bl	8001070 <__NVIC_EnableIRQ>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	e159      	b.n	80014a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ec:	2201      	movs	r2, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	429a      	cmp	r2, r3
 8001206:	f040 8148 	bne.w	800149a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	2b01      	cmp	r3, #1
 8001214:	d005      	beq.n	8001222 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121e:	2b02      	cmp	r3, #2
 8001220:	d130      	bne.n	8001284 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001258:	2201      	movs	r2, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	f003 0201 	and.w	r2, r3, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b03      	cmp	r3, #3
 800128e:	d017      	beq.n	80012c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d123      	bne.n	8001314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	08da      	lsrs	r2, r3, #3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3208      	adds	r2, #8
 80012d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	691a      	ldr	r2, [r3, #16]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	08da      	lsrs	r2, r3, #3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3208      	adds	r2, #8
 800130e:	69b9      	ldr	r1, [r7, #24]
 8001310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0203 	and.w	r2, r3, #3
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 80a2 	beq.w	800149a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b57      	ldr	r3, [pc, #348]	; (80014b8 <HAL_GPIO_Init+0x2e8>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a56      	ldr	r2, [pc, #344]	; (80014b8 <HAL_GPIO_Init+0x2e8>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b54      	ldr	r3, [pc, #336]	; (80014b8 <HAL_GPIO_Init+0x2e8>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001372:	4a52      	ldr	r2, [pc, #328]	; (80014bc <HAL_GPIO_Init+0x2ec>)
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3302      	adds	r3, #2
 800137a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	220f      	movs	r2, #15
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a49      	ldr	r2, [pc, #292]	; (80014c0 <HAL_GPIO_Init+0x2f0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d019      	beq.n	80013d2 <HAL_GPIO_Init+0x202>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a48      	ldr	r2, [pc, #288]	; (80014c4 <HAL_GPIO_Init+0x2f4>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d013      	beq.n	80013ce <HAL_GPIO_Init+0x1fe>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a47      	ldr	r2, [pc, #284]	; (80014c8 <HAL_GPIO_Init+0x2f8>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d00d      	beq.n	80013ca <HAL_GPIO_Init+0x1fa>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a46      	ldr	r2, [pc, #280]	; (80014cc <HAL_GPIO_Init+0x2fc>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d007      	beq.n	80013c6 <HAL_GPIO_Init+0x1f6>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a45      	ldr	r2, [pc, #276]	; (80014d0 <HAL_GPIO_Init+0x300>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d101      	bne.n	80013c2 <HAL_GPIO_Init+0x1f2>
 80013be:	2304      	movs	r3, #4
 80013c0:	e008      	b.n	80013d4 <HAL_GPIO_Init+0x204>
 80013c2:	2307      	movs	r3, #7
 80013c4:	e006      	b.n	80013d4 <HAL_GPIO_Init+0x204>
 80013c6:	2303      	movs	r3, #3
 80013c8:	e004      	b.n	80013d4 <HAL_GPIO_Init+0x204>
 80013ca:	2302      	movs	r3, #2
 80013cc:	e002      	b.n	80013d4 <HAL_GPIO_Init+0x204>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <HAL_GPIO_Init+0x204>
 80013d2:	2300      	movs	r3, #0
 80013d4:	69fa      	ldr	r2, [r7, #28]
 80013d6:	f002 0203 	and.w	r2, r2, #3
 80013da:	0092      	lsls	r2, r2, #2
 80013dc:	4093      	lsls	r3, r2
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e4:	4935      	ldr	r1, [pc, #212]	; (80014bc <HAL_GPIO_Init+0x2ec>)
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3302      	adds	r3, #2
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f2:	4b38      	ldr	r3, [pc, #224]	; (80014d4 <HAL_GPIO_Init+0x304>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001416:	4a2f      	ldr	r2, [pc, #188]	; (80014d4 <HAL_GPIO_Init+0x304>)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800141c:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <HAL_GPIO_Init+0x304>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001440:	4a24      	ldr	r2, [pc, #144]	; (80014d4 <HAL_GPIO_Init+0x304>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001446:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <HAL_GPIO_Init+0x304>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800146a:	4a1a      	ldr	r2, [pc, #104]	; (80014d4 <HAL_GPIO_Init+0x304>)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_GPIO_Init+0x304>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001494:	4a0f      	ldr	r2, [pc, #60]	; (80014d4 <HAL_GPIO_Init+0x304>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3301      	adds	r3, #1
 800149e:	61fb      	str	r3, [r7, #28]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	2b0f      	cmp	r3, #15
 80014a4:	f67f aea2 	bls.w	80011ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3724      	adds	r7, #36	; 0x24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40013800 	.word	0x40013800
 80014c0:	40020000 	.word	0x40020000
 80014c4:	40020400 	.word	0x40020400
 80014c8:	40020800 	.word	0x40020800
 80014cc:	40020c00 	.word	0x40020c00
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40013c00 	.word	0x40013c00

080014d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	807b      	strh	r3, [r7, #2]
 80014e4:	4613      	mov	r3, r2
 80014e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014e8:	787b      	ldrb	r3, [r7, #1]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ee:	887a      	ldrh	r2, [r7, #2]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014f4:	e003      	b.n	80014fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014f6:	887b      	ldrh	r3, [r7, #2]
 80014f8:	041a      	lsls	r2, r3, #16
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	619a      	str	r2, [r3, #24]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e267      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d075      	beq.n	8001616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800152a:	4b88      	ldr	r3, [pc, #544]	; (800174c <HAL_RCC_OscConfig+0x240>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b04      	cmp	r3, #4
 8001534:	d00c      	beq.n	8001550 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001536:	4b85      	ldr	r3, [pc, #532]	; (800174c <HAL_RCC_OscConfig+0x240>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800153e:	2b08      	cmp	r3, #8
 8001540:	d112      	bne.n	8001568 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001542:	4b82      	ldr	r3, [pc, #520]	; (800174c <HAL_RCC_OscConfig+0x240>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800154a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800154e:	d10b      	bne.n	8001568 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001550:	4b7e      	ldr	r3, [pc, #504]	; (800174c <HAL_RCC_OscConfig+0x240>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d05b      	beq.n	8001614 <HAL_RCC_OscConfig+0x108>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d157      	bne.n	8001614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e242      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001570:	d106      	bne.n	8001580 <HAL_RCC_OscConfig+0x74>
 8001572:	4b76      	ldr	r3, [pc, #472]	; (800174c <HAL_RCC_OscConfig+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a75      	ldr	r2, [pc, #468]	; (800174c <HAL_RCC_OscConfig+0x240>)
 8001578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e01d      	b.n	80015bc <HAL_RCC_OscConfig+0xb0>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x98>
 800158a:	4b70      	ldr	r3, [pc, #448]	; (800174c <HAL_RCC_OscConfig+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a6f      	ldr	r2, [pc, #444]	; (800174c <HAL_RCC_OscConfig+0x240>)
 8001590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	4b6d      	ldr	r3, [pc, #436]	; (800174c <HAL_RCC_OscConfig+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a6c      	ldr	r2, [pc, #432]	; (800174c <HAL_RCC_OscConfig+0x240>)
 800159c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e00b      	b.n	80015bc <HAL_RCC_OscConfig+0xb0>
 80015a4:	4b69      	ldr	r3, [pc, #420]	; (800174c <HAL_RCC_OscConfig+0x240>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a68      	ldr	r2, [pc, #416]	; (800174c <HAL_RCC_OscConfig+0x240>)
 80015aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	4b66      	ldr	r3, [pc, #408]	; (800174c <HAL_RCC_OscConfig+0x240>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a65      	ldr	r2, [pc, #404]	; (800174c <HAL_RCC_OscConfig+0x240>)
 80015b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d013      	beq.n	80015ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff fd16 	bl	8000ff4 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015cc:	f7ff fd12 	bl	8000ff4 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b64      	cmp	r3, #100	; 0x64
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e207      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015de:	4b5b      	ldr	r3, [pc, #364]	; (800174c <HAL_RCC_OscConfig+0x240>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0xc0>
 80015ea:	e014      	b.n	8001616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fd02 	bl	8000ff4 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f4:	f7ff fcfe 	bl	8000ff4 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b64      	cmp	r3, #100	; 0x64
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e1f3      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001606:	4b51      	ldr	r3, [pc, #324]	; (800174c <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0xe8>
 8001612:	e000      	b.n	8001616 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d063      	beq.n	80016ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001622:	4b4a      	ldr	r3, [pc, #296]	; (800174c <HAL_RCC_OscConfig+0x240>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00b      	beq.n	8001646 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800162e:	4b47      	ldr	r3, [pc, #284]	; (800174c <HAL_RCC_OscConfig+0x240>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001636:	2b08      	cmp	r3, #8
 8001638:	d11c      	bne.n	8001674 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800163a:	4b44      	ldr	r3, [pc, #272]	; (800174c <HAL_RCC_OscConfig+0x240>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d116      	bne.n	8001674 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001646:	4b41      	ldr	r3, [pc, #260]	; (800174c <HAL_RCC_OscConfig+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d005      	beq.n	800165e <HAL_RCC_OscConfig+0x152>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d001      	beq.n	800165e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e1c7      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165e:	4b3b      	ldr	r3, [pc, #236]	; (800174c <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	4937      	ldr	r1, [pc, #220]	; (800174c <HAL_RCC_OscConfig+0x240>)
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001672:	e03a      	b.n	80016ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d020      	beq.n	80016be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800167c:	4b34      	ldr	r3, [pc, #208]	; (8001750 <HAL_RCC_OscConfig+0x244>)
 800167e:	2201      	movs	r2, #1
 8001680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001682:	f7ff fcb7 	bl	8000ff4 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800168a:	f7ff fcb3 	bl	8000ff4 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e1a8      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169c:	4b2b      	ldr	r3, [pc, #172]	; (800174c <HAL_RCC_OscConfig+0x240>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a8:	4b28      	ldr	r3, [pc, #160]	; (800174c <HAL_RCC_OscConfig+0x240>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4925      	ldr	r1, [pc, #148]	; (800174c <HAL_RCC_OscConfig+0x240>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	600b      	str	r3, [r1, #0]
 80016bc:	e015      	b.n	80016ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016be:	4b24      	ldr	r3, [pc, #144]	; (8001750 <HAL_RCC_OscConfig+0x244>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c4:	f7ff fc96 	bl	8000ff4 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016cc:	f7ff fc92 	bl	8000ff4 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e187      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_RCC_OscConfig+0x240>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d036      	beq.n	8001764 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d016      	beq.n	800172c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <HAL_RCC_OscConfig+0x248>)
 8001700:	2201      	movs	r2, #1
 8001702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001704:	f7ff fc76 	bl	8000ff4 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800170c:	f7ff fc72 	bl	8000ff4 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e167      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_RCC_OscConfig+0x240>)
 8001720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x200>
 800172a:	e01b      	b.n	8001764 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_RCC_OscConfig+0x248>)
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001732:	f7ff fc5f 	bl	8000ff4 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001738:	e00e      	b.n	8001758 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800173a:	f7ff fc5b 	bl	8000ff4 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d907      	bls.n	8001758 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e150      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
 800174c:	40023800 	.word	0x40023800
 8001750:	42470000 	.word	0x42470000
 8001754:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001758:	4b88      	ldr	r3, [pc, #544]	; (800197c <HAL_RCC_OscConfig+0x470>)
 800175a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1ea      	bne.n	800173a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 8097 	beq.w	80018a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001776:	4b81      	ldr	r3, [pc, #516]	; (800197c <HAL_RCC_OscConfig+0x470>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10f      	bne.n	80017a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	4b7d      	ldr	r3, [pc, #500]	; (800197c <HAL_RCC_OscConfig+0x470>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a7c      	ldr	r2, [pc, #496]	; (800197c <HAL_RCC_OscConfig+0x470>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b7a      	ldr	r3, [pc, #488]	; (800197c <HAL_RCC_OscConfig+0x470>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800179e:	2301      	movs	r3, #1
 80017a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a2:	4b77      	ldr	r3, [pc, #476]	; (8001980 <HAL_RCC_OscConfig+0x474>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d118      	bne.n	80017e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ae:	4b74      	ldr	r3, [pc, #464]	; (8001980 <HAL_RCC_OscConfig+0x474>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a73      	ldr	r2, [pc, #460]	; (8001980 <HAL_RCC_OscConfig+0x474>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ba:	f7ff fc1b 	bl	8000ff4 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c2:	f7ff fc17 	bl	8000ff4 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e10c      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d4:	4b6a      	ldr	r3, [pc, #424]	; (8001980 <HAL_RCC_OscConfig+0x474>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d106      	bne.n	80017f6 <HAL_RCC_OscConfig+0x2ea>
 80017e8:	4b64      	ldr	r3, [pc, #400]	; (800197c <HAL_RCC_OscConfig+0x470>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ec:	4a63      	ldr	r2, [pc, #396]	; (800197c <HAL_RCC_OscConfig+0x470>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6713      	str	r3, [r2, #112]	; 0x70
 80017f4:	e01c      	b.n	8001830 <HAL_RCC_OscConfig+0x324>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b05      	cmp	r3, #5
 80017fc:	d10c      	bne.n	8001818 <HAL_RCC_OscConfig+0x30c>
 80017fe:	4b5f      	ldr	r3, [pc, #380]	; (800197c <HAL_RCC_OscConfig+0x470>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	4a5e      	ldr	r2, [pc, #376]	; (800197c <HAL_RCC_OscConfig+0x470>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	6713      	str	r3, [r2, #112]	; 0x70
 800180a:	4b5c      	ldr	r3, [pc, #368]	; (800197c <HAL_RCC_OscConfig+0x470>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	4a5b      	ldr	r2, [pc, #364]	; (800197c <HAL_RCC_OscConfig+0x470>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6713      	str	r3, [r2, #112]	; 0x70
 8001816:	e00b      	b.n	8001830 <HAL_RCC_OscConfig+0x324>
 8001818:	4b58      	ldr	r3, [pc, #352]	; (800197c <HAL_RCC_OscConfig+0x470>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181c:	4a57      	ldr	r2, [pc, #348]	; (800197c <HAL_RCC_OscConfig+0x470>)
 800181e:	f023 0301 	bic.w	r3, r3, #1
 8001822:	6713      	str	r3, [r2, #112]	; 0x70
 8001824:	4b55      	ldr	r3, [pc, #340]	; (800197c <HAL_RCC_OscConfig+0x470>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001828:	4a54      	ldr	r2, [pc, #336]	; (800197c <HAL_RCC_OscConfig+0x470>)
 800182a:	f023 0304 	bic.w	r3, r3, #4
 800182e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d015      	beq.n	8001864 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001838:	f7ff fbdc 	bl	8000ff4 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183e:	e00a      	b.n	8001856 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001840:	f7ff fbd8 	bl	8000ff4 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f241 3288 	movw	r2, #5000	; 0x1388
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e0cb      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001856:	4b49      	ldr	r3, [pc, #292]	; (800197c <HAL_RCC_OscConfig+0x470>)
 8001858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0ee      	beq.n	8001840 <HAL_RCC_OscConfig+0x334>
 8001862:	e014      	b.n	800188e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001864:	f7ff fbc6 	bl	8000ff4 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186a:	e00a      	b.n	8001882 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186c:	f7ff fbc2 	bl	8000ff4 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	; 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e0b5      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001882:	4b3e      	ldr	r3, [pc, #248]	; (800197c <HAL_RCC_OscConfig+0x470>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1ee      	bne.n	800186c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800188e:	7dfb      	ldrb	r3, [r7, #23]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d105      	bne.n	80018a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001894:	4b39      	ldr	r3, [pc, #228]	; (800197c <HAL_RCC_OscConfig+0x470>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	4a38      	ldr	r2, [pc, #224]	; (800197c <HAL_RCC_OscConfig+0x470>)
 800189a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800189e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80a1 	beq.w	80019ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018aa:	4b34      	ldr	r3, [pc, #208]	; (800197c <HAL_RCC_OscConfig+0x470>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d05c      	beq.n	8001970 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d141      	bne.n	8001942 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018be:	4b31      	ldr	r3, [pc, #196]	; (8001984 <HAL_RCC_OscConfig+0x478>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fb96 	bl	8000ff4 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018cc:	f7ff fb92 	bl	8000ff4 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e087      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018de:	4b27      	ldr	r3, [pc, #156]	; (800197c <HAL_RCC_OscConfig+0x470>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69da      	ldr	r2, [r3, #28]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	019b      	lsls	r3, r3, #6
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001900:	085b      	lsrs	r3, r3, #1
 8001902:	3b01      	subs	r3, #1
 8001904:	041b      	lsls	r3, r3, #16
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	061b      	lsls	r3, r3, #24
 800190e:	491b      	ldr	r1, [pc, #108]	; (800197c <HAL_RCC_OscConfig+0x470>)
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_RCC_OscConfig+0x478>)
 8001916:	2201      	movs	r2, #1
 8001918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191a:	f7ff fb6b 	bl	8000ff4 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001922:	f7ff fb67 	bl	8000ff4 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e05c      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_RCC_OscConfig+0x470>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x416>
 8001940:	e054      	b.n	80019ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <HAL_RCC_OscConfig+0x478>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff fb54 	bl	8000ff4 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001950:	f7ff fb50 	bl	8000ff4 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e045      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_RCC_OscConfig+0x470>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x444>
 800196e:	e03d      	b.n	80019ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d107      	bne.n	8001988 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e038      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
 800197c:	40023800 	.word	0x40023800
 8001980:	40007000 	.word	0x40007000
 8001984:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001988:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_RCC_OscConfig+0x4ec>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d028      	beq.n	80019e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d121      	bne.n	80019e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d11a      	bne.n	80019e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019b8:	4013      	ands	r3, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d111      	bne.n	80019e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	085b      	lsrs	r3, r3, #1
 80019d0:	3b01      	subs	r3, #1
 80019d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d107      	bne.n	80019e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800

080019fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0cc      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a10:	4b68      	ldr	r3, [pc, #416]	; (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d90c      	bls.n	8001a38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	4b65      	ldr	r3, [pc, #404]	; (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b63      	ldr	r3, [pc, #396]	; (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0b8      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d020      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a50:	4b59      	ldr	r3, [pc, #356]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	4a58      	ldr	r2, [pc, #352]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a68:	4b53      	ldr	r3, [pc, #332]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4a52      	ldr	r2, [pc, #328]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a74:	4b50      	ldr	r3, [pc, #320]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	494d      	ldr	r1, [pc, #308]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d044      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	4b47      	ldr	r3, [pc, #284]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d119      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e07f      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d003      	beq.n	8001aba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d107      	bne.n	8001aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aba:	4b3f      	ldr	r3, [pc, #252]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e06f      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aca:	4b3b      	ldr	r3, [pc, #236]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e067      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ada:	4b37      	ldr	r3, [pc, #220]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f023 0203 	bic.w	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4934      	ldr	r1, [pc, #208]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aec:	f7ff fa82 	bl	8000ff4 <HAL_GetTick>
 8001af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af4:	f7ff fa7e 	bl	8000ff4 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e04f      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0a:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 020c 	and.w	r2, r3, #12
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d1eb      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b1c:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d20c      	bcs.n	8001b44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e032      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4916      	ldr	r1, [pc, #88]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d009      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	490e      	ldr	r1, [pc, #56]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b82:	f000 f821 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8001b86:	4602      	mov	r2, r0
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	490a      	ldr	r1, [pc, #40]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	5ccb      	ldrb	r3, [r1, r3]
 8001b96:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9a:	4a09      	ldr	r2, [pc, #36]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f904 	bl	8000db0 <HAL_InitTick>

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023c00 	.word	0x40023c00
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	08005734 	.word	0x08005734
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	20000004 	.word	0x20000004

08001bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bcc:	b094      	sub	sp, #80	; 0x50
 8001bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bd8:	2300      	movs	r3, #0
 8001bda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001be0:	4b79      	ldr	r3, [pc, #484]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d00d      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x40>
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	f200 80e1 	bhi.w	8001db4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x34>
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d003      	beq.n	8001c02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bfa:	e0db      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bfc:	4b73      	ldr	r3, [pc, #460]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x204>)
 8001bfe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c00:	e0db      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c02:	4b73      	ldr	r3, [pc, #460]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c06:	e0d8      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c08:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c12:	4b6d      	ldr	r3, [pc, #436]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d063      	beq.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1e:	4b6a      	ldr	r3, [pc, #424]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	099b      	lsrs	r3, r3, #6
 8001c24:	2200      	movs	r2, #0
 8001c26:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c30:	633b      	str	r3, [r7, #48]	; 0x30
 8001c32:	2300      	movs	r3, #0
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
 8001c36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c3a:	4622      	mov	r2, r4
 8001c3c:	462b      	mov	r3, r5
 8001c3e:	f04f 0000 	mov.w	r0, #0
 8001c42:	f04f 0100 	mov.w	r1, #0
 8001c46:	0159      	lsls	r1, r3, #5
 8001c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c4c:	0150      	lsls	r0, r2, #5
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4621      	mov	r1, r4
 8001c54:	1a51      	subs	r1, r2, r1
 8001c56:	6139      	str	r1, [r7, #16]
 8001c58:	4629      	mov	r1, r5
 8001c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c6c:	4659      	mov	r1, fp
 8001c6e:	018b      	lsls	r3, r1, #6
 8001c70:	4651      	mov	r1, sl
 8001c72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c76:	4651      	mov	r1, sl
 8001c78:	018a      	lsls	r2, r1, #6
 8001c7a:	4651      	mov	r1, sl
 8001c7c:	ebb2 0801 	subs.w	r8, r2, r1
 8001c80:	4659      	mov	r1, fp
 8001c82:	eb63 0901 	sbc.w	r9, r3, r1
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c9a:	4690      	mov	r8, r2
 8001c9c:	4699      	mov	r9, r3
 8001c9e:	4623      	mov	r3, r4
 8001ca0:	eb18 0303 	adds.w	r3, r8, r3
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	462b      	mov	r3, r5
 8001ca8:	eb49 0303 	adc.w	r3, r9, r3
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cba:	4629      	mov	r1, r5
 8001cbc:	024b      	lsls	r3, r1, #9
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cc4:	4621      	mov	r1, r4
 8001cc6:	024a      	lsls	r2, r1, #9
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cce:	2200      	movs	r2, #0
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cd8:	f7fe fada 	bl	8000290 <__aeabi_uldivmod>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ce4:	e058      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce6:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	099b      	lsrs	r3, r3, #6
 8001cec:	2200      	movs	r2, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cf6:	623b      	str	r3, [r7, #32]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d00:	4642      	mov	r2, r8
 8001d02:	464b      	mov	r3, r9
 8001d04:	f04f 0000 	mov.w	r0, #0
 8001d08:	f04f 0100 	mov.w	r1, #0
 8001d0c:	0159      	lsls	r1, r3, #5
 8001d0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d12:	0150      	lsls	r0, r2, #5
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4641      	mov	r1, r8
 8001d1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d1e:	4649      	mov	r1, r9
 8001d20:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d38:	ebb2 040a 	subs.w	r4, r2, sl
 8001d3c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	00eb      	lsls	r3, r5, #3
 8001d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d4e:	00e2      	lsls	r2, r4, #3
 8001d50:	4614      	mov	r4, r2
 8001d52:	461d      	mov	r5, r3
 8001d54:	4643      	mov	r3, r8
 8001d56:	18e3      	adds	r3, r4, r3
 8001d58:	603b      	str	r3, [r7, #0]
 8001d5a:	464b      	mov	r3, r9
 8001d5c:	eb45 0303 	adc.w	r3, r5, r3
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d6e:	4629      	mov	r1, r5
 8001d70:	028b      	lsls	r3, r1, #10
 8001d72:	4621      	mov	r1, r4
 8001d74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d78:	4621      	mov	r1, r4
 8001d7a:	028a      	lsls	r2, r1, #10
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d82:	2200      	movs	r2, #0
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	61fa      	str	r2, [r7, #28]
 8001d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d8c:	f7fe fa80 	bl	8000290 <__aeabi_uldivmod>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4613      	mov	r3, r2
 8001d96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	0c1b      	lsrs	r3, r3, #16
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	3301      	adds	r3, #1
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001da8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001db2:	e002      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x204>)
 8001db6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3750      	adds	r7, #80	; 0x50
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	00f42400 	.word	0x00f42400
 8001dd0:	007a1200 	.word	0x007a1200

08001dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000000 	.word	0x20000000

08001dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001df0:	f7ff fff0 	bl	8001dd4 <HAL_RCC_GetHCLKFreq>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	0a9b      	lsrs	r3, r3, #10
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	4903      	ldr	r1, [pc, #12]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e02:	5ccb      	ldrb	r3, [r1, r3]
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	08005744 	.word	0x08005744

08001e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e18:	f7ff ffdc 	bl	8001dd4 <HAL_RCC_GetHCLKFreq>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	0b5b      	lsrs	r3, r3, #13
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	4903      	ldr	r1, [pc, #12]	; (8001e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2a:	5ccb      	ldrb	r3, [r1, r3]
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40023800 	.word	0x40023800
 8001e38:	08005744 	.word	0x08005744

08001e3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	220f      	movs	r2, #15
 8001e4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_RCC_GetClockConfig+0x5c>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 0203 	and.w	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_RCC_GetClockConfig+0x5c>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <HAL_RCC_GetClockConfig+0x5c>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_RCC_GetClockConfig+0x5c>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	08db      	lsrs	r3, r3, #3
 8001e76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <HAL_RCC_GetClockConfig+0x60>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0207 	and.w	r2, r3, #7
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	601a      	str	r2, [r3, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40023c00 	.word	0x40023c00

08001ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e041      	b.n	8001f36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f839 	bl	8001f3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3304      	adds	r3, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4610      	mov	r0, r2
 8001ee0:	f000 f9ca 	bl	8002278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d001      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e044      	b.n	8001ff6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1e      	ldr	r2, [pc, #120]	; (8002004 <HAL_TIM_Base_Start_IT+0xb0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d018      	beq.n	8001fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f96:	d013      	beq.n	8001fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <HAL_TIM_Base_Start_IT+0xb4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00e      	beq.n	8001fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a19      	ldr	r2, [pc, #100]	; (800200c <HAL_TIM_Base_Start_IT+0xb8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d009      	beq.n	8001fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a17      	ldr	r2, [pc, #92]	; (8002010 <HAL_TIM_Base_Start_IT+0xbc>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d004      	beq.n	8001fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a16      	ldr	r2, [pc, #88]	; (8002014 <HAL_TIM_Base_Start_IT+0xc0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d111      	bne.n	8001fe4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d010      	beq.n	8001ff4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0201 	orr.w	r2, r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe2:	e007      	b.n	8001ff4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0201 	orr.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40010000 	.word	0x40010000
 8002008:	40000400 	.word	0x40000400
 800200c:	40000800 	.word	0x40000800
 8002010:	40000c00 	.word	0x40000c00
 8002014:	40014000 	.word	0x40014000

08002018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b02      	cmp	r3, #2
 800202c:	d122      	bne.n	8002074 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b02      	cmp	r3, #2
 800203a:	d11b      	bne.n	8002074 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0202 	mvn.w	r2, #2
 8002044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8ee 	bl	800223c <HAL_TIM_IC_CaptureCallback>
 8002060:	e005      	b.n	800206e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f8e0 	bl	8002228 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f8f1 	bl	8002250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b04      	cmp	r3, #4
 8002080:	d122      	bne.n	80020c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b04      	cmp	r3, #4
 800208e:	d11b      	bne.n	80020c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0204 	mvn.w	r2, #4
 8002098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2202      	movs	r2, #2
 800209e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f8c4 	bl	800223c <HAL_TIM_IC_CaptureCallback>
 80020b4:	e005      	b.n	80020c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f8b6 	bl	8002228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f8c7 	bl	8002250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d122      	bne.n	800211c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d11b      	bne.n	800211c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0208 	mvn.w	r2, #8
 80020ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2204      	movs	r2, #4
 80020f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f89a 	bl	800223c <HAL_TIM_IC_CaptureCallback>
 8002108:	e005      	b.n	8002116 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f88c 	bl	8002228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f89d 	bl	8002250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	2b10      	cmp	r3, #16
 8002128:	d122      	bne.n	8002170 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	2b10      	cmp	r3, #16
 8002136:	d11b      	bne.n	8002170 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0210 	mvn.w	r2, #16
 8002140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2208      	movs	r2, #8
 8002146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f870 	bl	800223c <HAL_TIM_IC_CaptureCallback>
 800215c:	e005      	b.n	800216a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f862 	bl	8002228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f873 	bl	8002250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b01      	cmp	r3, #1
 800217c:	d10e      	bne.n	800219c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b01      	cmp	r3, #1
 800218a:	d107      	bne.n	800219c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0201 	mvn.w	r2, #1
 8002194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7fe fd62 	bl	8000c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a6:	2b80      	cmp	r3, #128	; 0x80
 80021a8:	d10e      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b4:	2b80      	cmp	r3, #128	; 0x80
 80021b6:	d107      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f8e2 	bl	800238c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d2:	2b40      	cmp	r3, #64	; 0x40
 80021d4:	d10e      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e0:	2b40      	cmp	r3, #64	; 0x40
 80021e2:	d107      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f838 	bl	8002264 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b20      	cmp	r3, #32
 8002200:	d10e      	bne.n	8002220 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b20      	cmp	r3, #32
 800220e:	d107      	bne.n	8002220 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0220 	mvn.w	r2, #32
 8002218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f8ac 	bl	8002378 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a34      	ldr	r2, [pc, #208]	; (800235c <TIM_Base_SetConfig+0xe4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d00f      	beq.n	80022b0 <TIM_Base_SetConfig+0x38>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002296:	d00b      	beq.n	80022b0 <TIM_Base_SetConfig+0x38>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a31      	ldr	r2, [pc, #196]	; (8002360 <TIM_Base_SetConfig+0xe8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d007      	beq.n	80022b0 <TIM_Base_SetConfig+0x38>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a30      	ldr	r2, [pc, #192]	; (8002364 <TIM_Base_SetConfig+0xec>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d003      	beq.n	80022b0 <TIM_Base_SetConfig+0x38>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a2f      	ldr	r2, [pc, #188]	; (8002368 <TIM_Base_SetConfig+0xf0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d108      	bne.n	80022c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a25      	ldr	r2, [pc, #148]	; (800235c <TIM_Base_SetConfig+0xe4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d01b      	beq.n	8002302 <TIM_Base_SetConfig+0x8a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d0:	d017      	beq.n	8002302 <TIM_Base_SetConfig+0x8a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a22      	ldr	r2, [pc, #136]	; (8002360 <TIM_Base_SetConfig+0xe8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d013      	beq.n	8002302 <TIM_Base_SetConfig+0x8a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a21      	ldr	r2, [pc, #132]	; (8002364 <TIM_Base_SetConfig+0xec>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00f      	beq.n	8002302 <TIM_Base_SetConfig+0x8a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a20      	ldr	r2, [pc, #128]	; (8002368 <TIM_Base_SetConfig+0xf0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00b      	beq.n	8002302 <TIM_Base_SetConfig+0x8a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a1f      	ldr	r2, [pc, #124]	; (800236c <TIM_Base_SetConfig+0xf4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d007      	beq.n	8002302 <TIM_Base_SetConfig+0x8a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a1e      	ldr	r2, [pc, #120]	; (8002370 <TIM_Base_SetConfig+0xf8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d003      	beq.n	8002302 <TIM_Base_SetConfig+0x8a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <TIM_Base_SetConfig+0xfc>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d108      	bne.n	8002314 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	4313      	orrs	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a08      	ldr	r2, [pc, #32]	; (800235c <TIM_Base_SetConfig+0xe4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d103      	bne.n	8002348 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	615a      	str	r2, [r3, #20]
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40010000 	.word	0x40010000
 8002360:	40000400 	.word	0x40000400
 8002364:	40000800 	.word	0x40000800
 8002368:	40000c00 	.word	0x40000c00
 800236c:	40014000 	.word	0x40014000
 8002370:	40014400 	.word	0x40014400
 8002374:	40014800 	.word	0x40014800

08002378 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e033      	b.n	800241a <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7fe fc8a 	bl	8000ce0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f90b 	bl	80025f0 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695a      	ldr	r2, [r3, #20]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023f8:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002408:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b08a      	sub	sp, #40	; 0x28
 8002426:	af02      	add	r7, sp, #8
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	603b      	str	r3, [r7, #0]
 800242e:	4613      	mov	r3, r2
 8002430:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d17c      	bne.n	8002538 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <HAL_USART_Transmit+0x28>
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e075      	b.n	800253a <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_USART_Transmit+0x3a>
 8002458:	2302      	movs	r3, #2
 800245a:	e06e      	b.n	800253a <HAL_USART_Transmit+0x118>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2212      	movs	r2, #18
 800246e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002472:	f7fe fdbf 	bl	8000ff4 <HAL_GetTick>
 8002476:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	88fa      	ldrh	r2, [r7, #6]
 800247c:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	88fa      	ldrh	r2, [r7, #6]
 8002482:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800248c:	d108      	bne.n	80024a0 <HAL_USART_Transmit+0x7e>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d104      	bne.n	80024a0 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	e003      	b.n	80024a8 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 80024a8:	e02a      	b.n	8002500 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2200      	movs	r2, #0
 80024b2:	2180      	movs	r1, #128	; 0x80
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f844 	bl	8002542 <USART_WaitOnFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e03a      	b.n	800253a <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10b      	bne.n	80024e2 <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024d8:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	3302      	adds	r3, #2
 80024de:	61bb      	str	r3, [r7, #24]
 80024e0:	e007      	b.n	80024f2 <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	781a      	ldrb	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	3301      	adds	r3, #1
 80024f0:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1cf      	bne.n	80024aa <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2200      	movs	r2, #0
 8002512:	2140      	movs	r1, #64	; 0x40
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f814 	bl	8002542 <USART_WaitOnFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e00a      	b.n	800253a <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	e000      	b.n	800253a <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8002538:	2302      	movs	r3, #2
  }
}
 800253a:	4618      	mov	r0, r3
 800253c:	3720      	adds	r7, #32
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	4613      	mov	r3, r2
 8002550:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002552:	e038      	b.n	80025c6 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255a:	d034      	beq.n	80025c6 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d007      	beq.n	8002572 <USART_WaitOnFlagUntilTimeout+0x30>
 8002562:	f7fe fd47 	bl	8000ff4 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	429a      	cmp	r2, r3
 8002570:	d229      	bcs.n	80025c6 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002580:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0220 	bic.w	r2, r2, #32
 8002590:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025a0:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0201 	bic.w	r2, r2, #1
 80025b0:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e00f      	b.n	80025e6 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4013      	ands	r3, r2
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	bf0c      	ite	eq
 80025d6:	2301      	moveq	r3, #1
 80025d8:	2300      	movne	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d0b7      	beq.n	8002554 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 80025f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025f4:	b0c6      	sub	sp, #280	; 0x118
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8002602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68d9      	ldr	r1, [r3, #12]
 800260a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	f021 030c 	bic.w	r3, r1, #12
 8002614:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8002616:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8002622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002626:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800262a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800262e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002632:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002634:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002638:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800263a:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 800263c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	431a      	orrs	r2, r3
 8002644:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002648:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800264a:	431a      	orrs	r2, r3
 800264c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002650:	4313      	orrs	r3, r2
 8002652:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002656:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800265a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002664:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8002666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002676:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800267a:	f023 030c 	bic.w	r3, r3, #12
 800267e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8002682:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	431a      	orrs	r2, r3
 8002690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	431a      	orrs	r2, r3
 8002698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800269c:	4313      	orrs	r3, r2
 800269e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80026a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026b0:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80026b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6959      	ldr	r1, [r3, #20]
 80026ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 80026c4:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 80026c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b8b      	ldr	r3, [pc, #556]	; (80028fc <USART_SetConfig+0x30c>)
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d006      	beq.n	80026e0 <USART_SetConfig+0xf0>
 80026d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b89      	ldr	r3, [pc, #548]	; (8002900 <USART_SetConfig+0x310>)
 80026da:	429a      	cmp	r2, r3
 80026dc:	f040 8114 	bne.w	8002908 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026e0:	f7ff fb98 	bl	8001e14 <HAL_RCC_GetPCLK2Freq>
 80026e4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80026e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80026ec:	2200      	movs	r2, #0
 80026ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80026f2:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80026f6:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80026fa:	4622      	mov	r2, r4
 80026fc:	462b      	mov	r3, r5
 80026fe:	1891      	adds	r1, r2, r2
 8002700:	6739      	str	r1, [r7, #112]	; 0x70
 8002702:	415b      	adcs	r3, r3
 8002704:	677b      	str	r3, [r7, #116]	; 0x74
 8002706:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800270a:	4621      	mov	r1, r4
 800270c:	eb12 0801 	adds.w	r8, r2, r1
 8002710:	4629      	mov	r1, r5
 8002712:	eb43 0901 	adc.w	r9, r3, r1
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002722:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002726:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800272a:	4690      	mov	r8, r2
 800272c:	4699      	mov	r9, r3
 800272e:	4623      	mov	r3, r4
 8002730:	eb18 0303 	adds.w	r3, r8, r3
 8002734:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002738:	462b      	mov	r3, r5
 800273a:	eb49 0303 	adc.w	r3, r9, r3
 800273e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800274e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002752:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002756:	460b      	mov	r3, r1
 8002758:	18db      	adds	r3, r3, r3
 800275a:	66bb      	str	r3, [r7, #104]	; 0x68
 800275c:	4613      	mov	r3, r2
 800275e:	eb42 0303 	adc.w	r3, r2, r3
 8002762:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002764:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002768:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800276c:	f7fd fd90 	bl	8000290 <__aeabi_uldivmod>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4b63      	ldr	r3, [pc, #396]	; (8002904 <USART_SetConfig+0x314>)
 8002776:	fba3 2302 	umull	r2, r3, r3, r2
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	011c      	lsls	r4, r3, #4
 800277e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002782:	2200      	movs	r2, #0
 8002784:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002788:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800278c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002790:	4642      	mov	r2, r8
 8002792:	464b      	mov	r3, r9
 8002794:	1891      	adds	r1, r2, r2
 8002796:	6639      	str	r1, [r7, #96]	; 0x60
 8002798:	415b      	adcs	r3, r3
 800279a:	667b      	str	r3, [r7, #100]	; 0x64
 800279c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80027a0:	4641      	mov	r1, r8
 80027a2:	1851      	adds	r1, r2, r1
 80027a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80027a6:	4649      	mov	r1, r9
 80027a8:	414b      	adcs	r3, r1
 80027aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80027b8:	4659      	mov	r1, fp
 80027ba:	00cb      	lsls	r3, r1, #3
 80027bc:	4651      	mov	r1, sl
 80027be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027c2:	4651      	mov	r1, sl
 80027c4:	00ca      	lsls	r2, r1, #3
 80027c6:	4610      	mov	r0, r2
 80027c8:	4619      	mov	r1, r3
 80027ca:	4603      	mov	r3, r0
 80027cc:	4642      	mov	r2, r8
 80027ce:	189b      	adds	r3, r3, r2
 80027d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80027d4:	464b      	mov	r3, r9
 80027d6:	460a      	mov	r2, r1
 80027d8:	eb42 0303 	adc.w	r3, r2, r3
 80027dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027ec:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80027f0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027f4:	460b      	mov	r3, r1
 80027f6:	18db      	adds	r3, r3, r3
 80027f8:	653b      	str	r3, [r7, #80]	; 0x50
 80027fa:	4613      	mov	r3, r2
 80027fc:	eb42 0303 	adc.w	r3, r2, r3
 8002800:	657b      	str	r3, [r7, #84]	; 0x54
 8002802:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002806:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800280a:	f7fd fd41 	bl	8000290 <__aeabi_uldivmod>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4611      	mov	r1, r2
 8002814:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <USART_SetConfig+0x314>)
 8002816:	fba3 2301 	umull	r2, r3, r3, r1
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2264      	movs	r2, #100	; 0x64
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	1acb      	subs	r3, r1, r3
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800282a:	4b36      	ldr	r3, [pc, #216]	; (8002904 <USART_SetConfig+0x314>)
 800282c:	fba3 2302 	umull	r2, r3, r3, r2
 8002830:	095b      	lsrs	r3, r3, #5
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002838:	441c      	add	r4, r3
 800283a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800283e:	2200      	movs	r2, #0
 8002840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002844:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002848:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800284c:	4642      	mov	r2, r8
 800284e:	464b      	mov	r3, r9
 8002850:	1891      	adds	r1, r2, r2
 8002852:	64b9      	str	r1, [r7, #72]	; 0x48
 8002854:	415b      	adcs	r3, r3
 8002856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002858:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800285c:	4641      	mov	r1, r8
 800285e:	1851      	adds	r1, r2, r1
 8002860:	6439      	str	r1, [r7, #64]	; 0x40
 8002862:	4649      	mov	r1, r9
 8002864:	414b      	adcs	r3, r1
 8002866:	647b      	str	r3, [r7, #68]	; 0x44
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8002874:	4659      	mov	r1, fp
 8002876:	00cb      	lsls	r3, r1, #3
 8002878:	4651      	mov	r1, sl
 800287a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800287e:	4651      	mov	r1, sl
 8002880:	00ca      	lsls	r2, r1, #3
 8002882:	4610      	mov	r0, r2
 8002884:	4619      	mov	r1, r3
 8002886:	4603      	mov	r3, r0
 8002888:	4642      	mov	r2, r8
 800288a:	189b      	adds	r3, r3, r2
 800288c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002890:	464b      	mov	r3, r9
 8002892:	460a      	mov	r2, r1
 8002894:	eb42 0303 	adc.w	r3, r2, r3
 8002898:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800289c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80028ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80028b0:	460b      	mov	r3, r1
 80028b2:	18db      	adds	r3, r3, r3
 80028b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80028b6:	4613      	mov	r3, r2
 80028b8:	eb42 0303 	adc.w	r3, r2, r3
 80028bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80028c6:	f7fd fce3 	bl	8000290 <__aeabi_uldivmod>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <USART_SetConfig+0x314>)
 80028d0:	fba3 1302 	umull	r1, r3, r3, r2
 80028d4:	095b      	lsrs	r3, r3, #5
 80028d6:	2164      	movs	r1, #100	; 0x64
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	3332      	adds	r3, #50	; 0x32
 80028e2:	4a08      	ldr	r2, [pc, #32]	; (8002904 <USART_SetConfig+0x314>)
 80028e4:	fba2 2303 	umull	r2, r3, r2, r3
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	f003 0207 	and.w	r2, r3, #7
 80028ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4422      	add	r2, r4
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	e109      	b.n	8002b0e <USART_SetConfig+0x51e>
 80028fa:	bf00      	nop
 80028fc:	40011000 	.word	0x40011000
 8002900:	40011400 	.word	0x40011400
 8002904:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002908:	f7ff fa70 	bl	8001dec <HAL_RCC_GetPCLK1Freq>
 800290c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8002910:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002914:	2200      	movs	r2, #0
 8002916:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800291a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800291e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002922:	4642      	mov	r2, r8
 8002924:	464b      	mov	r3, r9
 8002926:	1891      	adds	r1, r2, r2
 8002928:	6339      	str	r1, [r7, #48]	; 0x30
 800292a:	415b      	adcs	r3, r3
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
 800292e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002932:	4641      	mov	r1, r8
 8002934:	1854      	adds	r4, r2, r1
 8002936:	4649      	mov	r1, r9
 8002938:	eb43 0501 	adc.w	r5, r3, r1
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	00eb      	lsls	r3, r5, #3
 8002946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800294a:	00e2      	lsls	r2, r4, #3
 800294c:	4614      	mov	r4, r2
 800294e:	461d      	mov	r5, r3
 8002950:	4643      	mov	r3, r8
 8002952:	18e3      	adds	r3, r4, r3
 8002954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002958:	464b      	mov	r3, r9
 800295a:	eb45 0303 	adc.w	r3, r5, r3
 800295e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800296e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002972:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002976:	460b      	mov	r3, r1
 8002978:	18db      	adds	r3, r3, r3
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
 800297c:	4613      	mov	r3, r2
 800297e:	eb42 0303 	adc.w	r3, r2, r3
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002984:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002988:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800298c:	f7fd fc80 	bl	8000290 <__aeabi_uldivmod>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4b61      	ldr	r3, [pc, #388]	; (8002b1c <USART_SetConfig+0x52c>)
 8002996:	fba3 2302 	umull	r2, r3, r3, r2
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	011c      	lsls	r4, r3, #4
 800299e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80029a2:	2200      	movs	r2, #0
 80029a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029a8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80029ac:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80029b0:	4642      	mov	r2, r8
 80029b2:	464b      	mov	r3, r9
 80029b4:	1891      	adds	r1, r2, r2
 80029b6:	6239      	str	r1, [r7, #32]
 80029b8:	415b      	adcs	r3, r3
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
 80029bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029c0:	4641      	mov	r1, r8
 80029c2:	eb12 0a01 	adds.w	sl, r2, r1
 80029c6:	4649      	mov	r1, r9
 80029c8:	eb43 0b01 	adc.w	fp, r3, r1
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029e0:	4692      	mov	sl, r2
 80029e2:	469b      	mov	fp, r3
 80029e4:	4643      	mov	r3, r8
 80029e6:	eb1a 0303 	adds.w	r3, sl, r3
 80029ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029ee:	464b      	mov	r3, r9
 80029f0:	eb4b 0303 	adc.w	r3, fp, r3
 80029f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a04:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a08:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	18db      	adds	r3, r3, r3
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	4613      	mov	r3, r2
 8002a14:	eb42 0303 	adc.w	r3, r2, r3
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a1e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a22:	f7fd fc35 	bl	8000290 <__aeabi_uldivmod>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <USART_SetConfig+0x52c>)
 8002a2e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	2264      	movs	r2, #100	; 0x64
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	1acb      	subs	r3, r1, r3
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a42:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <USART_SetConfig+0x52c>)
 8002a44:	fba3 2302 	umull	r2, r3, r3, r2
 8002a48:	095b      	lsrs	r3, r3, #5
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a50:	441c      	add	r4, r3
 8002a52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a56:	2200      	movs	r2, #0
 8002a58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a64:	4642      	mov	r2, r8
 8002a66:	464b      	mov	r3, r9
 8002a68:	1891      	adds	r1, r2, r2
 8002a6a:	6139      	str	r1, [r7, #16]
 8002a6c:	415b      	adcs	r3, r3
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a74:	4641      	mov	r1, r8
 8002a76:	1851      	adds	r1, r2, r1
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	4649      	mov	r1, r9
 8002a7c:	414b      	adcs	r3, r1
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a8c:	4659      	mov	r1, fp
 8002a8e:	00cb      	lsls	r3, r1, #3
 8002a90:	4651      	mov	r1, sl
 8002a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a96:	4651      	mov	r1, sl
 8002a98:	00ca      	lsls	r2, r1, #3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	189b      	adds	r3, r3, r2
 8002aa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002aa8:	464b      	mov	r3, r9
 8002aaa:	460a      	mov	r2, r1
 8002aac:	eb42 0303 	adc.w	r3, r2, r3
 8002ab0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002abe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ac0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	18db      	adds	r3, r3, r3
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	4613      	mov	r3, r2
 8002acc:	eb42 0303 	adc.w	r3, r2, r3
 8002ad0:	607b      	str	r3, [r7, #4]
 8002ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ad6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ada:	f7fd fbd9 	bl	8000290 <__aeabi_uldivmod>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <USART_SetConfig+0x52c>)
 8002ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	2164      	movs	r1, #100	; 0x64
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	3332      	adds	r3, #50	; 0x32
 8002af6:	4a09      	ldr	r2, [pc, #36]	; (8002b1c <USART_SetConfig+0x52c>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	f003 0207 	and.w	r2, r3, #7
 8002b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4422      	add	r2, r4
 8002b0a:	609a      	str	r2, [r3, #8]
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002b14:	46bd      	mov	sp, r7
 8002b16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b1a:	bf00      	nop
 8002b1c:	51eb851f 	.word	0x51eb851f

08002b20 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f103 0208 	add.w	r2, r3, #8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f04f 32ff 	mov.w	r2, #4294967295
 8002b38:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f103 0208 	add.w	r2, r3, #8
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f103 0208 	add.w	r2, r3, #8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b90:	d103      	bne.n	8002b9a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	e00c      	b.n	8002bb4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3308      	adds	r3, #8
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	e002      	b.n	8002ba8 <vListInsert+0x2e>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d2f6      	bcs.n	8002ba2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	601a      	str	r2, [r3, #0]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6892      	ldr	r2, [r2, #8]
 8002c02:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6852      	ldr	r2, [r2, #4]
 8002c0c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d103      	bne.n	8002c20 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	1e5a      	subs	r2, r3, #1
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002c6a:	bf00      	nop
 8002c6c:	e7fe      	b.n	8002c6c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d05d      	beq.n	8002d30 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d059      	beq.n	8002d30 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c84:	2100      	movs	r1, #0
 8002c86:	fba3 2302 	umull	r2, r3, r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d000      	beq.n	8002c90 <xQueueGenericReset+0x50>
 8002c8e:	2101      	movs	r1, #1
 8002c90:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d14c      	bne.n	8002d30 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002c96:	f001 fd1d 	bl	80046d4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca2:	6939      	ldr	r1, [r7, #16]
 8002ca4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	441a      	add	r2, r3
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	6939      	ldr	r1, [r7, #16]
 8002cca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	441a      	add	r2, r3
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	22ff      	movs	r2, #255	; 0xff
 8002cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	22ff      	movs	r2, #255	; 0xff
 8002ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d114      	bne.n	8002d16 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d01a      	beq.n	8002d2a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	3310      	adds	r3, #16
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 ff7d 	bl	8003bf8 <xTaskRemoveFromEventList>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d012      	beq.n	8002d2a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002d04:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <xQueueGenericReset+0x11c>)
 8002d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	e009      	b.n	8002d2a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	3310      	adds	r3, #16
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff ff00 	bl	8002b20 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	3324      	adds	r3, #36	; 0x24
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fefb 	bl	8002b20 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002d2a:	f001 fd03 	bl	8004734 <vPortExitCritical>
 8002d2e:	e001      	b.n	8002d34 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10a      	bne.n	8002d50 <xQueueGenericReset+0x110>
        __asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	60bb      	str	r3, [r7, #8]
    }
 8002d4c:	bf00      	nop
 8002d4e:	e7fe      	b.n	8002d4e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002d50:	697b      	ldr	r3, [r7, #20]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	e000ed04 	.word	0xe000ed04

08002d60 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d02e      	beq.n	8002dd6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002d78:	2100      	movs	r1, #0
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d000      	beq.n	8002d88 <xQueueGenericCreate+0x28>
 8002d86:	2101      	movs	r1, #1
 8002d88:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d123      	bne.n	8002dd6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002d96:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002d9a:	d81c      	bhi.n	8002dd6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	fb02 f303 	mul.w	r3, r2, r3
 8002da4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	3350      	adds	r3, #80	; 0x50
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 fdb6 	bl	800491c <pvPortMalloc>
 8002db0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d01c      	beq.n	8002df2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	3350      	adds	r3, #80	; 0x50
 8002dc0:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002dc2:	79fa      	ldrb	r2, [r7, #7]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f814 	bl	8002dfc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002dd4:	e00d      	b.n	8002df2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <xQueueGenericCreate+0x92>
        __asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	613b      	str	r3, [r7, #16]
    }
 8002dee:	bf00      	nop
 8002df0:	e7fe      	b.n	8002df0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002df2:	69fb      	ldr	r3, [r7, #28]
    }
 8002df4:	4618      	mov	r0, r3
 8002df6:	3720      	adds	r7, #32
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d103      	bne.n	8002e18 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	e002      	b.n	8002e1e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	69b8      	ldr	r0, [r7, #24]
 8002e2e:	f7ff ff07 	bl	8002c40 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d010      	beq.n	8002e78 <xQueueCreateCountingSemaphore+0x36>
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d80c      	bhi.n	8002e78 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002e5e:	2202      	movs	r2, #2
 8002e60:	2100      	movs	r1, #0
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff ff7c 	bl	8002d60 <xQueueGenericCreate>
 8002e68:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d011      	beq.n	8002e94 <xQueueCreateCountingSemaphore+0x52>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 8002e76:	e00d      	b.n	8002e94 <xQueueCreateCountingSemaphore+0x52>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10a      	bne.n	8002e94 <xQueueCreateCountingSemaphore+0x52>
        __asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	60bb      	str	r3, [r7, #8]
    }
 8002e90:	bf00      	nop
 8002e92:	e7fe      	b.n	8002e92 <xQueueCreateCountingSemaphore+0x50>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 8002e94:	68fb      	ldr	r3, [r7, #12]
    }
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b08e      	sub	sp, #56	; 0x38
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10a      	bne.n	8002ec8 <xQueueGiveFromISR+0x2a>
        __asm volatile
 8002eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	623b      	str	r3, [r7, #32]
    }
 8002ec4:	bf00      	nop
 8002ec6:	e7fe      	b.n	8002ec6 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <xQueueGiveFromISR+0x48>
        __asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	61fb      	str	r3, [r7, #28]
    }
 8002ee2:	bf00      	nop
 8002ee4:	e7fe      	b.n	8002ee4 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d103      	bne.n	8002ef6 <xQueueGiveFromISR+0x58>
 8002eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <xQueueGiveFromISR+0x5c>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <xQueueGiveFromISR+0x5e>
 8002efa:	2300      	movs	r3, #0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10a      	bne.n	8002f16 <xQueueGiveFromISR+0x78>
        __asm volatile
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	61bb      	str	r3, [r7, #24]
    }
 8002f12:	bf00      	nop
 8002f14:	e7fe      	b.n	8002f14 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f16:	f001 fcc1 	bl	800489c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002f1a:	f3ef 8211 	mrs	r2, BASEPRI
 8002f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	617a      	str	r2, [r7, #20]
 8002f30:	613b      	str	r3, [r7, #16]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002f32:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d23a      	bcs.n	8002fbc <xQueueGiveFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002f58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f60:	d112      	bne.n	8002f88 <xQueueGiveFromISR+0xea>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d025      	beq.n	8002fb6 <xQueueGiveFromISR+0x118>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6c:	3324      	adds	r3, #36	; 0x24
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 fe42 	bl	8003bf8 <xTaskRemoveFromEventList>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d01d      	beq.n	8002fb6 <xQueueGiveFromISR+0x118>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01a      	beq.n	8002fb6 <xQueueGiveFromISR+0x118>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2201      	movs	r2, #1
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	e016      	b.n	8002fb6 <xQueueGiveFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002f88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002f8c:	2b7f      	cmp	r3, #127	; 0x7f
 8002f8e:	d10a      	bne.n	8002fa6 <xQueueGiveFromISR+0x108>
        __asm volatile
 8002f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	60fb      	str	r3, [r7, #12]
    }
 8002fa2:	bf00      	nop
 8002fa4:	e7fe      	b.n	8002fa4 <xQueueGiveFromISR+0x106>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002faa:	3301      	adds	r3, #1
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	b25a      	sxtb	r2, r3
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fba:	e001      	b.n	8002fc0 <xQueueGiveFromISR+0x122>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc2:	60bb      	str	r3, [r7, #8]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002fca:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3738      	adds	r7, #56	; 0x38
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08c      	sub	sp, #48	; 0x30
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002fea:	2300      	movs	r3, #0
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10a      	bne.n	800300a <xQueueSemaphoreTake+0x32>
        __asm volatile
 8002ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	61bb      	str	r3, [r7, #24]
    }
 8003006:	bf00      	nop
 8003008:	e7fe      	b.n	8003008 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8003012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	617b      	str	r3, [r7, #20]
    }
 8003024:	bf00      	nop
 8003026:	e7fe      	b.n	8003026 <xQueueSemaphoreTake+0x4e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003028:	f001 fb54 	bl	80046d4 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d024      	beq.n	8003082 <xQueueSemaphoreTake+0xaa>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	1e5a      	subs	r2, r3, #1
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d104      	bne.n	8003052 <xQueueSemaphoreTake+0x7a>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003048:	f001 f900 	bl	800424c <pvTaskIncrementMutexHeldCount>
 800304c:	4602      	mov	r2, r0
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00f      	beq.n	800307a <xQueueSemaphoreTake+0xa2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	3310      	adds	r3, #16
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fdca 	bl	8003bf8 <xTaskRemoveFromEventList>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <xQueueSemaphoreTake+0xa2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800306a:	4b54      	ldr	r3, [pc, #336]	; (80031bc <xQueueSemaphoreTake+0x1e4>)
 800306c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800307a:	f001 fb5b 	bl	8004734 <vPortExitCritical>
                return pdPASS;
 800307e:	2301      	movs	r3, #1
 8003080:	e097      	b.n	80031b2 <xQueueSemaphoreTake+0x1da>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d111      	bne.n	80030ac <xQueueSemaphoreTake+0xd4>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <xQueueSemaphoreTake+0xcc>
        __asm volatile
 800308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	613b      	str	r3, [r7, #16]
    }
 80030a0:	bf00      	nop
 80030a2:	e7fe      	b.n	80030a2 <xQueueSemaphoreTake+0xca>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80030a4:	f001 fb46 	bl	8004734 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80030a8:	2300      	movs	r3, #0
 80030aa:	e082      	b.n	80031b2 <xQueueSemaphoreTake+0x1da>
                }
                else if( xEntryTimeSet == pdFALSE )
 80030ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80030b2:	f107 0308 	add.w	r3, r7, #8
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fe74 	bl	8003da4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80030bc:	2301      	movs	r3, #1
 80030be:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80030c0:	f001 fb38 	bl	8004734 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80030c4:	f000 faf8 	bl	80036b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80030c8:	f001 fb04 	bl	80046d4 <vPortEnterCritical>
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030d2:	b25b      	sxtb	r3, r3
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d103      	bne.n	80030e2 <xQueueSemaphoreTake+0x10a>
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030e8:	b25b      	sxtb	r3, r3
 80030ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ee:	d103      	bne.n	80030f8 <xQueueSemaphoreTake+0x120>
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030f8:	f001 fb1c 	bl	8004734 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030fc:	463a      	mov	r2, r7
 80030fe:	f107 0308 	add.w	r3, r7, #8
 8003102:	4611      	mov	r1, r2
 8003104:	4618      	mov	r0, r3
 8003106:	f000 fe63 	bl	8003dd0 <xTaskCheckForTimeOut>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d132      	bne.n	8003176 <xQueueSemaphoreTake+0x19e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003110:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003112:	f000 f8bf 	bl	8003294 <prvIsQueueEmpty>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d026      	beq.n	800316a <xQueueSemaphoreTake+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d109      	bne.n	8003138 <xQueueSemaphoreTake+0x160>
                        {
                            taskENTER_CRITICAL();
 8003124:	f001 fad6 	bl	80046d4 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4618      	mov	r0, r3
 800312e:	f000 ff73 	bl	8004018 <xTaskPriorityInherit>
 8003132:	62b8      	str	r0, [r7, #40]	; 0x28
                            }
                            taskEXIT_CRITICAL();
 8003134:	f001 fafe 	bl	8004734 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	3324      	adds	r3, #36	; 0x24
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	4611      	mov	r1, r2
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fd35 	bl	8003bb0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003148:	f000 f852 	bl	80031f0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800314c:	f000 fac2 	bl	80036d4 <xTaskResumeAll>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	f47f af68 	bne.w	8003028 <xQueueSemaphoreTake+0x50>
                {
                    portYIELD_WITHIN_API();
 8003158:	4b18      	ldr	r3, [pc, #96]	; (80031bc <xQueueSemaphoreTake+0x1e4>)
 800315a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	e75e      	b.n	8003028 <xQueueSemaphoreTake+0x50>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800316a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800316c:	f000 f840 	bl	80031f0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003170:	f000 fab0 	bl	80036d4 <xTaskResumeAll>
 8003174:	e758      	b.n	8003028 <xQueueSemaphoreTake+0x50>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003176:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003178:	f000 f83a 	bl	80031f0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800317c:	f000 faaa 	bl	80036d4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003180:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003182:	f000 f887 	bl	8003294 <prvIsQueueEmpty>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	f43f af4d 	beq.w	8003028 <xQueueSemaphoreTake+0x50>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800318e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00d      	beq.n	80031b0 <xQueueSemaphoreTake+0x1d8>
                        {
                            taskENTER_CRITICAL();
 8003194:	f001 fa9e 	bl	80046d4 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800319a:	f000 f811 	bl	80031c0 <prvGetDisinheritPriorityAfterTimeout>
 800319e:	61f8      	str	r0, [r7, #28]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	69f9      	ldr	r1, [r7, #28]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 ff98 	bl	80040dc <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80031ac:	f001 fac2 	bl	8004734 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80031b0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3730      	adds	r7, #48	; 0x30
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	e000ed04 	.word	0xe000ed04

080031c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d006      	beq.n	80031de <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f1c3 0305 	rsb	r3, r3, #5
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	e001      	b.n	80031e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80031e2:	68fb      	ldr	r3, [r7, #12]
    }
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80031f8:	f001 fa6c 	bl	80046d4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003202:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003204:	e011      	b.n	800322a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	2b00      	cmp	r3, #0
 800320c:	d012      	beq.n	8003234 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3324      	adds	r3, #36	; 0x24
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fcf0 	bl	8003bf8 <xTaskRemoveFromEventList>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800321e:	f000 fe3d 	bl	8003e9c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	3b01      	subs	r3, #1
 8003226:	b2db      	uxtb	r3, r3
 8003228:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800322a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322e:	2b00      	cmp	r3, #0
 8003230:	dce9      	bgt.n	8003206 <prvUnlockQueue+0x16>
 8003232:	e000      	b.n	8003236 <prvUnlockQueue+0x46>
                        break;
 8003234:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	22ff      	movs	r2, #255	; 0xff
 800323a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800323e:	f001 fa79 	bl	8004734 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003242:	f001 fa47 	bl	80046d4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800324c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800324e:	e011      	b.n	8003274 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d012      	beq.n	800327e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3310      	adds	r3, #16
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fccb 	bl	8003bf8 <xTaskRemoveFromEventList>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003268:	f000 fe18 	bl	8003e9c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800326c:	7bbb      	ldrb	r3, [r7, #14]
 800326e:	3b01      	subs	r3, #1
 8003270:	b2db      	uxtb	r3, r3
 8003272:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003278:	2b00      	cmp	r3, #0
 800327a:	dce9      	bgt.n	8003250 <prvUnlockQueue+0x60>
 800327c:	e000      	b.n	8003280 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800327e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	22ff      	movs	r2, #255	; 0xff
 8003284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003288:	f001 fa54 	bl	8004734 <vPortExitCritical>
}
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800329c:	f001 fa1a 	bl	80046d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d102      	bne.n	80032ae <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80032a8:	2301      	movs	r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	e001      	b.n	80032b2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80032b2:	f001 fa3f 	bl	8004734 <vPortExitCritical>

    return xReturn;
 80032b6:	68fb      	ldr	r3, [r7, #12]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08c      	sub	sp, #48	; 0x30
 80032c4:	af04      	add	r7, sp, #16
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f001 fb21 	bl	800491c <pvPortMalloc>
 80032da:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00e      	beq.n	8003300 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032e2:	2058      	movs	r0, #88	; 0x58
 80032e4:	f001 fb1a 	bl	800491c <pvPortMalloc>
 80032e8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
 80032f6:	e005      	b.n	8003304 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80032f8:	6978      	ldr	r0, [r7, #20]
 80032fa:	f001 fbef 	bl	8004adc <vPortFree>
 80032fe:	e001      	b.n	8003304 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003300:	2300      	movs	r3, #0
 8003302:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d013      	beq.n	8003332 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800330a:	88fa      	ldrh	r2, [r7, #6]
 800330c:	2300      	movs	r3, #0
 800330e:	9303      	str	r3, [sp, #12]
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	9302      	str	r3, [sp, #8]
 8003314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68b9      	ldr	r1, [r7, #8]
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 f80e 	bl	8003342 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003326:	69f8      	ldr	r0, [r7, #28]
 8003328:	f000 f8b0 	bl	800348c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800332c:	2301      	movs	r3, #1
 800332e:	61bb      	str	r3, [r7, #24]
 8003330:	e002      	b.n	8003338 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003332:	f04f 33ff 	mov.w	r3, #4294967295
 8003336:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003338:	69bb      	ldr	r3, [r7, #24]
    }
 800333a:	4618      	mov	r0, r3
 800333c:	3720      	adds	r7, #32
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b088      	sub	sp, #32
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003352:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	461a      	mov	r2, r3
 800335a:	21a5      	movs	r1, #165	; 0xa5
 800335c:	f001 fd14 	bl	8004d88 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800336a:	3b01      	subs	r3, #1
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	f023 0307 	bic.w	r3, r3, #7
 8003378:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <prvInitialiseNewTask+0x58>
        __asm volatile
 8003384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	617b      	str	r3, [r7, #20]
    }
 8003396:	bf00      	nop
 8003398:	e7fe      	b.n	8003398 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01f      	beq.n	80033e0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033a0:	2300      	movs	r3, #0
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	e012      	b.n	80033cc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	4413      	add	r3, r2
 80033ac:	7819      	ldrb	r1, [r3, #0]
 80033ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4413      	add	r3, r2
 80033b4:	3334      	adds	r3, #52	; 0x34
 80033b6:	460a      	mov	r2, r1
 80033b8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	4413      	add	r3, r2
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d006      	beq.n	80033d4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3301      	adds	r3, #1
 80033ca:	61fb      	str	r3, [r7, #28]
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	2b09      	cmp	r3, #9
 80033d0:	d9e9      	bls.n	80033a6 <prvInitialiseNewTask+0x64>
 80033d2:	e000      	b.n	80033d6 <prvInitialiseNewTask+0x94>
            {
                break;
 80033d4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80033de:	e003      	b.n	80033e8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d90a      	bls.n	8003404 <prvInitialiseNewTask+0xc2>
        __asm volatile
 80033ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	613b      	str	r3, [r7, #16]
    }
 8003400:	bf00      	nop
 8003402:	e7fe      	b.n	8003402 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	2b04      	cmp	r3, #4
 8003408:	d901      	bls.n	800340e <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800340a:	2304      	movs	r3, #4
 800340c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003412:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003418:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	2200      	movs	r2, #0
 800341e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	3304      	adds	r3, #4
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fb9b 	bl	8002b60 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	3318      	adds	r3, #24
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fb96 	bl	8002b60 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003438:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343c:	f1c3 0205 	rsb	r2, r3, #5
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003448:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	3350      	adds	r3, #80	; 0x50
 800344e:	2204      	movs	r2, #4
 8003450:	2100      	movs	r1, #0
 8003452:	4618      	mov	r0, r3
 8003454:	f001 fc98 	bl	8004d88 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345a:	3354      	adds	r3, #84	; 0x54
 800345c:	2201      	movs	r2, #1
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f001 fc91 	bl	8004d88 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	68f9      	ldr	r1, [r7, #12]
 800346a:	69b8      	ldr	r0, [r7, #24]
 800346c:	f000 ff82 	bl	8004374 <pxPortInitialiseStack>
 8003470:	4602      	mov	r2, r0
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003480:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003482:	bf00      	nop
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003494:	f001 f91e 	bl	80046d4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003498:	4b40      	ldr	r3, [pc, #256]	; (800359c <prvAddNewTaskToReadyList+0x110>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3301      	adds	r3, #1
 800349e:	4a3f      	ldr	r2, [pc, #252]	; (800359c <prvAddNewTaskToReadyList+0x110>)
 80034a0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80034a2:	4b3f      	ldr	r3, [pc, #252]	; (80035a0 <prvAddNewTaskToReadyList+0x114>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80034aa:	4a3d      	ldr	r2, [pc, #244]	; (80035a0 <prvAddNewTaskToReadyList+0x114>)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034b0:	4b3a      	ldr	r3, [pc, #232]	; (800359c <prvAddNewTaskToReadyList+0x110>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d110      	bne.n	80034da <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80034b8:	f000 fd14 	bl	8003ee4 <prvInitialiseTaskLists>
 80034bc:	e00d      	b.n	80034da <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80034be:	4b39      	ldr	r3, [pc, #228]	; (80035a4 <prvAddNewTaskToReadyList+0x118>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034c6:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <prvAddNewTaskToReadyList+0x114>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d802      	bhi.n	80034da <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80034d4:	4a32      	ldr	r2, [pc, #200]	; (80035a0 <prvAddNewTaskToReadyList+0x114>)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80034da:	4b33      	ldr	r3, [pc, #204]	; (80035a8 <prvAddNewTaskToReadyList+0x11c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3301      	adds	r3, #1
 80034e0:	4a31      	ldr	r2, [pc, #196]	; (80035a8 <prvAddNewTaskToReadyList+0x11c>)
 80034e2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034e4:	4b30      	ldr	r3, [pc, #192]	; (80035a8 <prvAddNewTaskToReadyList+0x11c>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	2201      	movs	r2, #1
 80034f2:	409a      	lsls	r2, r3
 80034f4:	4b2d      	ldr	r3, [pc, #180]	; (80035ac <prvAddNewTaskToReadyList+0x120>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	4a2c      	ldr	r2, [pc, #176]	; (80035ac <prvAddNewTaskToReadyList+0x120>)
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003502:	492b      	ldr	r1, [pc, #172]	; (80035b0 <prvAddNewTaskToReadyList+0x124>)
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	3304      	adds	r3, #4
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	609a      	str	r2, [r3, #8]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	60da      	str	r2, [r3, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	3204      	adds	r2, #4
 800352a:	605a      	str	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	1d1a      	adds	r2, r3, #4
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4a1b      	ldr	r2, [pc, #108]	; (80035b0 <prvAddNewTaskToReadyList+0x124>)
 8003542:	441a      	add	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	615a      	str	r2, [r3, #20]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354c:	4918      	ldr	r1, [pc, #96]	; (80035b0 <prvAddNewTaskToReadyList+0x124>)
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	1c59      	adds	r1, r3, #1
 800355c:	4814      	ldr	r0, [pc, #80]	; (80035b0 <prvAddNewTaskToReadyList+0x124>)
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4403      	add	r3, r0
 8003568:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800356a:	f001 f8e3 	bl	8004734 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800356e:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <prvAddNewTaskToReadyList+0x118>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00e      	beq.n	8003594 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003576:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <prvAddNewTaskToReadyList+0x114>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	429a      	cmp	r2, r3
 8003582:	d207      	bcs.n	8003594 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <prvAddNewTaskToReadyList+0x128>)
 8003586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20000300 	.word	0x20000300
 80035a0:	20000228 	.word	0x20000228
 80035a4:	2000030c 	.word	0x2000030c
 80035a8:	2000031c 	.word	0x2000031c
 80035ac:	20000308 	.word	0x20000308
 80035b0:	2000022c 	.word	0x2000022c
 80035b4:	e000ed04 	.word	0xe000ed04

080035b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d017      	beq.n	80035fa <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80035ca:	4b13      	ldr	r3, [pc, #76]	; (8003618 <vTaskDelay+0x60>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <vTaskDelay+0x30>
        __asm volatile
 80035d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d6:	f383 8811 	msr	BASEPRI, r3
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	60bb      	str	r3, [r7, #8]
    }
 80035e4:	bf00      	nop
 80035e6:	e7fe      	b.n	80035e6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80035e8:	f000 f866 	bl	80036b8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035ec:	2100      	movs	r1, #0
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fe40 	bl	8004274 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80035f4:	f000 f86e 	bl	80036d4 <xTaskResumeAll>
 80035f8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d107      	bne.n	8003610 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8003600:	4b06      	ldr	r3, [pc, #24]	; (800361c <vTaskDelay+0x64>)
 8003602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003610:	bf00      	nop
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20000328 	.word	0x20000328
 800361c:	e000ed04 	.word	0xe000ed04

08003620 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003626:	4b1d      	ldr	r3, [pc, #116]	; (800369c <vTaskStartScheduler+0x7c>)
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	2300      	movs	r3, #0
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2300      	movs	r3, #0
 8003630:	2282      	movs	r2, #130	; 0x82
 8003632:	491b      	ldr	r1, [pc, #108]	; (80036a0 <vTaskStartScheduler+0x80>)
 8003634:	481b      	ldr	r0, [pc, #108]	; (80036a4 <vTaskStartScheduler+0x84>)
 8003636:	f7ff fe43 	bl	80032c0 <xTaskCreate>
 800363a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d116      	bne.n	8003670 <vTaskStartScheduler+0x50>
        __asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	60bb      	str	r3, [r7, #8]
    }
 8003654:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003656:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <vTaskStartScheduler+0x88>)
 8003658:	f04f 32ff 	mov.w	r2, #4294967295
 800365c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800365e:	4b13      	ldr	r3, [pc, #76]	; (80036ac <vTaskStartScheduler+0x8c>)
 8003660:	2201      	movs	r2, #1
 8003662:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003664:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <vTaskStartScheduler+0x90>)
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800366a:	f000 ff13 	bl	8004494 <xPortStartScheduler>
 800366e:	e00e      	b.n	800368e <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d10a      	bne.n	800368e <vTaskStartScheduler+0x6e>
        __asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	607b      	str	r3, [r7, #4]
    }
 800368a:	bf00      	nop
 800368c:	e7fe      	b.n	800368c <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800368e:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <vTaskStartScheduler+0x94>)
 8003690:	681b      	ldr	r3, [r3, #0]
}
 8003692:	bf00      	nop
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	20000324 	.word	0x20000324
 80036a0:	0800572c 	.word	0x0800572c
 80036a4:	08003eb5 	.word	0x08003eb5
 80036a8:	20000320 	.word	0x20000320
 80036ac:	2000030c 	.word	0x2000030c
 80036b0:	20000304 	.word	0x20000304
 80036b4:	2000000c 	.word	0x2000000c

080036b8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80036bc:	4b04      	ldr	r3, [pc, #16]	; (80036d0 <vTaskSuspendAll+0x18>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3301      	adds	r3, #1
 80036c2:	4a03      	ldr	r2, [pc, #12]	; (80036d0 <vTaskSuspendAll+0x18>)
 80036c4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80036c6:	bf00      	nop
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	20000328 	.word	0x20000328

080036d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80036de:	2300      	movs	r3, #0
 80036e0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80036e2:	4b71      	ldr	r3, [pc, #452]	; (80038a8 <xTaskResumeAll+0x1d4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10a      	bne.n	8003700 <xTaskResumeAll+0x2c>
        __asm volatile
 80036ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ee:	f383 8811 	msr	BASEPRI, r3
 80036f2:	f3bf 8f6f 	isb	sy
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	607b      	str	r3, [r7, #4]
    }
 80036fc:	bf00      	nop
 80036fe:	e7fe      	b.n	80036fe <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003700:	f000 ffe8 	bl	80046d4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003704:	4b68      	ldr	r3, [pc, #416]	; (80038a8 <xTaskResumeAll+0x1d4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3b01      	subs	r3, #1
 800370a:	4a67      	ldr	r2, [pc, #412]	; (80038a8 <xTaskResumeAll+0x1d4>)
 800370c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800370e:	4b66      	ldr	r3, [pc, #408]	; (80038a8 <xTaskResumeAll+0x1d4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f040 80c0 	bne.w	8003898 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003718:	4b64      	ldr	r3, [pc, #400]	; (80038ac <xTaskResumeAll+0x1d8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80bb 	beq.w	8003898 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003722:	e08a      	b.n	800383a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003724:	4b62      	ldr	r3, [pc, #392]	; (80038b0 <xTaskResumeAll+0x1dc>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	6a12      	ldr	r2, [r2, #32]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	69d2      	ldr	r2, [r2, #28]
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	3318      	adds	r3, #24
 800374e:	429a      	cmp	r2, r3
 8003750:	d103      	bne.n	800375a <xTaskResumeAll+0x86>
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	6a1a      	ldr	r2, [r3, #32]
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	2200      	movs	r2, #0
 800375e:	629a      	str	r2, [r3, #40]	; 0x28
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	1e5a      	subs	r2, r3, #1
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	69fa      	ldr	r2, [r7, #28]
 8003776:	68d2      	ldr	r2, [r2, #12]
 8003778:	609a      	str	r2, [r3, #8]
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	69fa      	ldr	r2, [r7, #28]
 8003780:	6892      	ldr	r2, [r2, #8]
 8003782:	605a      	str	r2, [r3, #4]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	3304      	adds	r3, #4
 800378c:	429a      	cmp	r2, r3
 800378e:	d103      	bne.n	8003798 <xTaskResumeAll+0xc4>
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	605a      	str	r2, [r3, #4]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	2200      	movs	r2, #0
 800379c:	615a      	str	r2, [r3, #20]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	1e5a      	subs	r2, r3, #1
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	2201      	movs	r2, #1
 80037ae:	409a      	lsls	r2, r3
 80037b0:	4b40      	ldr	r3, [pc, #256]	; (80038b4 <xTaskResumeAll+0x1e0>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	4a3f      	ldr	r2, [pc, #252]	; (80038b4 <xTaskResumeAll+0x1e0>)
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037be:	493e      	ldr	r1, [pc, #248]	; (80038b8 <xTaskResumeAll+0x1e4>)
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	3304      	adds	r3, #4
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	609a      	str	r2, [r3, #8]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	3204      	adds	r2, #4
 80037e6:	605a      	str	r2, [r3, #4]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	1d1a      	adds	r2, r3, #4
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4a2e      	ldr	r2, [pc, #184]	; (80038b8 <xTaskResumeAll+0x1e4>)
 80037fe:	441a      	add	r2, r3
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	615a      	str	r2, [r3, #20]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003808:	492b      	ldr	r1, [pc, #172]	; (80038b8 <xTaskResumeAll+0x1e4>)
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	1c59      	adds	r1, r3, #1
 8003818:	4827      	ldr	r0, [pc, #156]	; (80038b8 <xTaskResumeAll+0x1e4>)
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4403      	add	r3, r0
 8003824:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382a:	4b24      	ldr	r3, [pc, #144]	; (80038bc <xTaskResumeAll+0x1e8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	429a      	cmp	r2, r3
 8003832:	d302      	bcc.n	800383a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8003834:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <xTaskResumeAll+0x1ec>)
 8003836:	2201      	movs	r2, #1
 8003838:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800383a:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <xTaskResumeAll+0x1dc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	f47f af70 	bne.w	8003724 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800384a:	f000 fbc9 	bl	8003fe0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800384e:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <xTaskResumeAll+0x1f0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d010      	beq.n	800387c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800385a:	f000 f837 	bl	80038cc <xTaskIncrementTick>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003864:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <xTaskResumeAll+0x1ec>)
 8003866:	2201      	movs	r2, #1
 8003868:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	3b01      	subs	r3, #1
 800386e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f1      	bne.n	800385a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8003876:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <xTaskResumeAll+0x1f0>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800387c:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <xTaskResumeAll+0x1ec>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d009      	beq.n	8003898 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003884:	2301      	movs	r3, #1
 8003886:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <xTaskResumeAll+0x1f4>)
 800388a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003898:	f000 ff4c 	bl	8004734 <vPortExitCritical>

    return xAlreadyYielded;
 800389c:	69bb      	ldr	r3, [r7, #24]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000328 	.word	0x20000328
 80038ac:	20000300 	.word	0x20000300
 80038b0:	200002c0 	.word	0x200002c0
 80038b4:	20000308 	.word	0x20000308
 80038b8:	2000022c 	.word	0x2000022c
 80038bc:	20000228 	.word	0x20000228
 80038c0:	20000314 	.word	0x20000314
 80038c4:	20000310 	.word	0x20000310
 80038c8:	e000ed04 	.word	0xe000ed04

080038cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	; 0x28
 80038d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038d6:	4b7d      	ldr	r3, [pc, #500]	; (8003acc <xTaskIncrementTick+0x200>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f040 80ec 	bne.w	8003ab8 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038e0:	4b7b      	ldr	r3, [pc, #492]	; (8003ad0 <xTaskIncrementTick+0x204>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3301      	adds	r3, #1
 80038e6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80038e8:	4a79      	ldr	r2, [pc, #484]	; (8003ad0 <xTaskIncrementTick+0x204>)
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d120      	bne.n	8003936 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80038f4:	4b77      	ldr	r3, [pc, #476]	; (8003ad4 <xTaskIncrementTick+0x208>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <xTaskIncrementTick+0x48>
        __asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	607b      	str	r3, [r7, #4]
    }
 8003910:	bf00      	nop
 8003912:	e7fe      	b.n	8003912 <xTaskIncrementTick+0x46>
 8003914:	4b6f      	ldr	r3, [pc, #444]	; (8003ad4 <xTaskIncrementTick+0x208>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	4b6f      	ldr	r3, [pc, #444]	; (8003ad8 <xTaskIncrementTick+0x20c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a6d      	ldr	r2, [pc, #436]	; (8003ad4 <xTaskIncrementTick+0x208>)
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	4a6d      	ldr	r2, [pc, #436]	; (8003ad8 <xTaskIncrementTick+0x20c>)
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	4b6c      	ldr	r3, [pc, #432]	; (8003adc <xTaskIncrementTick+0x210>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3301      	adds	r3, #1
 800392e:	4a6b      	ldr	r2, [pc, #428]	; (8003adc <xTaskIncrementTick+0x210>)
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	f000 fb55 	bl	8003fe0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003936:	4b6a      	ldr	r3, [pc, #424]	; (8003ae0 <xTaskIncrementTick+0x214>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a3a      	ldr	r2, [r7, #32]
 800393c:	429a      	cmp	r2, r3
 800393e:	f0c0 80a6 	bcc.w	8003a8e <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003942:	4b64      	ldr	r3, [pc, #400]	; (8003ad4 <xTaskIncrementTick+0x208>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d104      	bne.n	8003956 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800394c:	4b64      	ldr	r3, [pc, #400]	; (8003ae0 <xTaskIncrementTick+0x214>)
 800394e:	f04f 32ff 	mov.w	r2, #4294967295
 8003952:	601a      	str	r2, [r3, #0]
                    break;
 8003954:	e09b      	b.n	8003a8e <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003956:	4b5f      	ldr	r3, [pc, #380]	; (8003ad4 <xTaskIncrementTick+0x208>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003966:	6a3a      	ldr	r2, [r7, #32]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	429a      	cmp	r2, r3
 800396c:	d203      	bcs.n	8003976 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800396e:	4a5c      	ldr	r2, [pc, #368]	; (8003ae0 <xTaskIncrementTick+0x214>)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003974:	e08b      	b.n	8003a8e <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	68d2      	ldr	r2, [r2, #12]
 8003984:	609a      	str	r2, [r3, #8]
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	6892      	ldr	r2, [r2, #8]
 800398e:	605a      	str	r2, [r3, #4]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	3304      	adds	r3, #4
 8003998:	429a      	cmp	r2, r3
 800399a:	d103      	bne.n	80039a4 <xTaskIncrementTick+0xd8>
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2200      	movs	r2, #0
 80039a8:	615a      	str	r2, [r3, #20]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	1e5a      	subs	r2, r3, #1
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01e      	beq.n	80039fa <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	6a12      	ldr	r2, [r2, #32]
 80039ca:	609a      	str	r2, [r3, #8]
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	69d2      	ldr	r2, [r2, #28]
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	3318      	adds	r3, #24
 80039de:	429a      	cmp	r2, r3
 80039e0:	d103      	bne.n	80039ea <xTaskIncrementTick+0x11e>
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	6a1a      	ldr	r2, [r3, #32]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2200      	movs	r2, #0
 80039ee:	629a      	str	r2, [r3, #40]	; 0x28
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	1e5a      	subs	r2, r3, #1
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	2201      	movs	r2, #1
 8003a00:	409a      	lsls	r2, r3
 8003a02:	4b38      	ldr	r3, [pc, #224]	; (8003ae4 <xTaskIncrementTick+0x218>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	4a36      	ldr	r2, [pc, #216]	; (8003ae4 <xTaskIncrementTick+0x218>)
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a10:	4935      	ldr	r1, [pc, #212]	; (8003ae8 <xTaskIncrementTick+0x21c>)
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	609a      	str	r2, [r3, #8]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	60da      	str	r2, [r3, #12]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	3204      	adds	r2, #4
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	1d1a      	adds	r2, r3, #4
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	609a      	str	r2, [r3, #8]
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4a26      	ldr	r2, [pc, #152]	; (8003ae8 <xTaskIncrementTick+0x21c>)
 8003a50:	441a      	add	r2, r3
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	615a      	str	r2, [r3, #20]
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5a:	4923      	ldr	r1, [pc, #140]	; (8003ae8 <xTaskIncrementTick+0x21c>)
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	1c59      	adds	r1, r3, #1
 8003a6a:	481f      	ldr	r0, [pc, #124]	; (8003ae8 <xTaskIncrementTick+0x21c>)
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4403      	add	r3, r0
 8003a76:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7c:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <xTaskIncrementTick+0x220>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	429a      	cmp	r2, r3
 8003a84:	f4ff af5d 	bcc.w	8003942 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a8c:	e759      	b.n	8003942 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a8e:	4b17      	ldr	r3, [pc, #92]	; (8003aec <xTaskIncrementTick+0x220>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a94:	4914      	ldr	r1, [pc, #80]	; (8003ae8 <xTaskIncrementTick+0x21c>)
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d901      	bls.n	8003aaa <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003aaa:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <xTaskIncrementTick+0x224>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab6:	e004      	b.n	8003ac2 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003ab8:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <xTaskIncrementTick+0x228>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	4a0d      	ldr	r2, [pc, #52]	; (8003af4 <xTaskIncrementTick+0x228>)
 8003ac0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3728      	adds	r7, #40	; 0x28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20000328 	.word	0x20000328
 8003ad0:	20000304 	.word	0x20000304
 8003ad4:	200002b8 	.word	0x200002b8
 8003ad8:	200002bc 	.word	0x200002bc
 8003adc:	20000318 	.word	0x20000318
 8003ae0:	20000320 	.word	0x20000320
 8003ae4:	20000308 	.word	0x20000308
 8003ae8:	2000022c 	.word	0x2000022c
 8003aec:	20000228 	.word	0x20000228
 8003af0:	20000314 	.word	0x20000314
 8003af4:	20000310 	.word	0x20000310

08003af8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003afe:	4b27      	ldr	r3, [pc, #156]	; (8003b9c <vTaskSwitchContext+0xa4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003b06:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <vTaskSwitchContext+0xa8>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003b0c:	e03f      	b.n	8003b8e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003b0e:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <vTaskSwitchContext+0xa8>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b14:	4b23      	ldr	r3, [pc, #140]	; (8003ba4 <vTaskSwitchContext+0xac>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	fab3 f383 	clz	r3, r3
 8003b20:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003b22:	7afb      	ldrb	r3, [r7, #11]
 8003b24:	f1c3 031f 	rsb	r3, r3, #31
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	491f      	ldr	r1, [pc, #124]	; (8003ba8 <vTaskSwitchContext+0xb0>)
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10a      	bne.n	8003b54 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	607b      	str	r3, [r7, #4]
    }
 8003b50:	bf00      	nop
 8003b52:	e7fe      	b.n	8003b52 <vTaskSwitchContext+0x5a>
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4a12      	ldr	r2, [pc, #72]	; (8003ba8 <vTaskSwitchContext+0xb0>)
 8003b60:	4413      	add	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	3308      	adds	r3, #8
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d104      	bne.n	8003b84 <vTaskSwitchContext+0x8c>
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	605a      	str	r2, [r3, #4]
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	4a08      	ldr	r2, [pc, #32]	; (8003bac <vTaskSwitchContext+0xb4>)
 8003b8c:	6013      	str	r3, [r2, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	371c      	adds	r7, #28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	20000328 	.word	0x20000328
 8003ba0:	20000314 	.word	0x20000314
 8003ba4:	20000308 	.word	0x20000308
 8003ba8:	2000022c 	.word	0x2000022c
 8003bac:	20000228 	.word	0x20000228

08003bb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10a      	bne.n	8003bd6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	60fb      	str	r3, [r7, #12]
    }
 8003bd2:	bf00      	nop
 8003bd4:	e7fe      	b.n	8003bd4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bd6:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <vTaskPlaceOnEventList+0x44>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3318      	adds	r3, #24
 8003bdc:	4619      	mov	r1, r3
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fe ffcb 	bl	8002b7a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003be4:	2101      	movs	r1, #1
 8003be6:	6838      	ldr	r0, [r7, #0]
 8003be8:	f000 fb44 	bl	8004274 <prvAddCurrentTaskToDelayedList>
}
 8003bec:	bf00      	nop
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20000228 	.word	0x20000228

08003bf8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b08b      	sub	sp, #44	; 0x2c
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	60fb      	str	r3, [r7, #12]
    }
 8003c20:	bf00      	nop
 8003c22:	e7fe      	b.n	8003c22 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	6a3a      	ldr	r2, [r7, #32]
 8003c30:	6a12      	ldr	r2, [r2, #32]
 8003c32:	609a      	str	r2, [r3, #8]
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	6a3a      	ldr	r2, [r7, #32]
 8003c3a:	69d2      	ldr	r2, [r2, #28]
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	3318      	adds	r3, #24
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d103      	bne.n	8003c52 <xTaskRemoveFromEventList+0x5a>
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	6a1a      	ldr	r2, [r3, #32]
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	605a      	str	r2, [r3, #4]
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	2200      	movs	r2, #0
 8003c56:	629a      	str	r2, [r3, #40]	; 0x28
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	1e5a      	subs	r2, r3, #1
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c62:	4b4a      	ldr	r3, [pc, #296]	; (8003d8c <xTaskRemoveFromEventList+0x194>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d15e      	bne.n	8003d28 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	6a3a      	ldr	r2, [r7, #32]
 8003c76:	68d2      	ldr	r2, [r2, #12]
 8003c78:	609a      	str	r2, [r3, #8]
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	6a3a      	ldr	r2, [r7, #32]
 8003c80:	6892      	ldr	r2, [r2, #8]
 8003c82:	605a      	str	r2, [r3, #4]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d103      	bne.n	8003c98 <xTaskRemoveFromEventList+0xa0>
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	605a      	str	r2, [r3, #4]
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	615a      	str	r2, [r3, #20]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	1e5a      	subs	r2, r3, #1
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	2201      	movs	r2, #1
 8003cae:	409a      	lsls	r2, r3
 8003cb0:	4b37      	ldr	r3, [pc, #220]	; (8003d90 <xTaskRemoveFromEventList+0x198>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	4a36      	ldr	r2, [pc, #216]	; (8003d90 <xTaskRemoveFromEventList+0x198>)
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbe:	4935      	ldr	r1, [pc, #212]	; (8003d94 <xTaskRemoveFromEventList+0x19c>)
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	3304      	adds	r3, #4
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	609a      	str	r2, [r3, #8]
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	60da      	str	r2, [r3, #12]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	6a3a      	ldr	r2, [r7, #32]
 8003ce4:	3204      	adds	r2, #4
 8003ce6:	605a      	str	r2, [r3, #4]
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	1d1a      	adds	r2, r3, #4
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	609a      	str	r2, [r3, #8]
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4a25      	ldr	r2, [pc, #148]	; (8003d94 <xTaskRemoveFromEventList+0x19c>)
 8003cfe:	441a      	add	r2, r3
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	615a      	str	r2, [r3, #20]
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d08:	4922      	ldr	r1, [pc, #136]	; (8003d94 <xTaskRemoveFromEventList+0x19c>)
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	1c59      	adds	r1, r3, #1
 8003d18:	481e      	ldr	r0, [pc, #120]	; (8003d94 <xTaskRemoveFromEventList+0x19c>)
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4403      	add	r3, r0
 8003d24:	6019      	str	r1, [r3, #0]
 8003d26:	e01b      	b.n	8003d60 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d28:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <xTaskRemoveFromEventList+0x1a0>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	61da      	str	r2, [r3, #28]
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	621a      	str	r2, [r3, #32]
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	6a3a      	ldr	r2, [r7, #32]
 8003d42:	3218      	adds	r2, #24
 8003d44:	605a      	str	r2, [r3, #4]
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	f103 0218 	add.w	r2, r3, #24
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	4a11      	ldr	r2, [pc, #68]	; (8003d98 <xTaskRemoveFromEventList+0x1a0>)
 8003d54:	629a      	str	r2, [r3, #40]	; 0x28
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <xTaskRemoveFromEventList+0x1a0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	4a0e      	ldr	r2, [pc, #56]	; (8003d98 <xTaskRemoveFromEventList+0x1a0>)
 8003d5e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d64:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <xTaskRemoveFromEventList+0x1a4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d905      	bls.n	8003d7a <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003d72:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <xTaskRemoveFromEventList+0x1a8>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	e001      	b.n	8003d7e <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	372c      	adds	r7, #44	; 0x2c
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	20000328 	.word	0x20000328
 8003d90:	20000308 	.word	0x20000308
 8003d94:	2000022c 	.word	0x2000022c
 8003d98:	200002c0 	.word	0x200002c0
 8003d9c:	20000228 	.word	0x20000228
 8003da0:	20000314 	.word	0x20000314

08003da4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003dac:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <vTaskInternalSetTimeOutState+0x24>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <vTaskInternalSetTimeOutState+0x28>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	605a      	str	r2, [r3, #4]
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	20000318 	.word	0x20000318
 8003dcc:	20000304 	.word	0x20000304

08003dd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	613b      	str	r3, [r7, #16]
    }
 8003df2:	bf00      	nop
 8003df4:	e7fe      	b.n	8003df4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10a      	bne.n	8003e12 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	60fb      	str	r3, [r7, #12]
    }
 8003e0e:	bf00      	nop
 8003e10:	e7fe      	b.n	8003e10 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003e12:	f000 fc5f 	bl	80046d4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003e16:	4b1f      	ldr	r3, [pc, #124]	; (8003e94 <xTaskCheckForTimeOut+0xc4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2e:	d102      	bne.n	8003e36 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	e026      	b.n	8003e84 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4b17      	ldr	r3, [pc, #92]	; (8003e98 <xTaskCheckForTimeOut+0xc8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d00a      	beq.n	8003e58 <xTaskCheckForTimeOut+0x88>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d305      	bcc.n	8003e58 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	e015      	b.n	8003e84 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d20b      	bcs.n	8003e7a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	1ad2      	subs	r2, r2, r3
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff ff98 	bl	8003da4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61fb      	str	r3, [r7, #28]
 8003e78:	e004      	b.n	8003e84 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003e80:	2301      	movs	r3, #1
 8003e82:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003e84:	f000 fc56 	bl	8004734 <vPortExitCritical>

    return xReturn;
 8003e88:	69fb      	ldr	r3, [r7, #28]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000304 	.word	0x20000304
 8003e98:	20000318 	.word	0x20000318

08003e9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <vTaskMissedYield+0x14>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
}
 8003ea6:	bf00      	nop
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	20000314 	.word	0x20000314

08003eb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ebc:	f000 f852 	bl	8003f64 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ec0:	4b06      	ldr	r3, [pc, #24]	; (8003edc <prvIdleTask+0x28>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d9f9      	bls.n	8003ebc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <prvIdleTask+0x2c>)
 8003eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003ed8:	e7f0      	b.n	8003ebc <prvIdleTask+0x8>
 8003eda:	bf00      	nop
 8003edc:	2000022c 	.word	0x2000022c
 8003ee0:	e000ed04 	.word	0xe000ed04

08003ee4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eea:	2300      	movs	r3, #0
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	e00c      	b.n	8003f0a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4a12      	ldr	r2, [pc, #72]	; (8003f44 <prvInitialiseTaskLists+0x60>)
 8003efc:	4413      	add	r3, r2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe fe0e 	bl	8002b20 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3301      	adds	r3, #1
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d9ef      	bls.n	8003ef0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003f10:	480d      	ldr	r0, [pc, #52]	; (8003f48 <prvInitialiseTaskLists+0x64>)
 8003f12:	f7fe fe05 	bl	8002b20 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003f16:	480d      	ldr	r0, [pc, #52]	; (8003f4c <prvInitialiseTaskLists+0x68>)
 8003f18:	f7fe fe02 	bl	8002b20 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003f1c:	480c      	ldr	r0, [pc, #48]	; (8003f50 <prvInitialiseTaskLists+0x6c>)
 8003f1e:	f7fe fdff 	bl	8002b20 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003f22:	480c      	ldr	r0, [pc, #48]	; (8003f54 <prvInitialiseTaskLists+0x70>)
 8003f24:	f7fe fdfc 	bl	8002b20 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003f28:	480b      	ldr	r0, [pc, #44]	; (8003f58 <prvInitialiseTaskLists+0x74>)
 8003f2a:	f7fe fdf9 	bl	8002b20 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003f2e:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <prvInitialiseTaskLists+0x78>)
 8003f30:	4a05      	ldr	r2, [pc, #20]	; (8003f48 <prvInitialiseTaskLists+0x64>)
 8003f32:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <prvInitialiseTaskLists+0x7c>)
 8003f36:	4a05      	ldr	r2, [pc, #20]	; (8003f4c <prvInitialiseTaskLists+0x68>)
 8003f38:	601a      	str	r2, [r3, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	2000022c 	.word	0x2000022c
 8003f48:	20000290 	.word	0x20000290
 8003f4c:	200002a4 	.word	0x200002a4
 8003f50:	200002c0 	.word	0x200002c0
 8003f54:	200002d4 	.word	0x200002d4
 8003f58:	200002ec 	.word	0x200002ec
 8003f5c:	200002b8 	.word	0x200002b8
 8003f60:	200002bc 	.word	0x200002bc

08003f64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f6a:	e019      	b.n	8003fa0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003f6c:	f000 fbb2 	bl	80046d4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f70:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <prvCheckTasksWaitingTermination+0x50>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fe fe35 	bl	8002bec <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003f82:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <prvCheckTasksWaitingTermination+0x54>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	4a0b      	ldr	r2, [pc, #44]	; (8003fb8 <prvCheckTasksWaitingTermination+0x54>)
 8003f8a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003f8c:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <prvCheckTasksWaitingTermination+0x58>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	4a0a      	ldr	r2, [pc, #40]	; (8003fbc <prvCheckTasksWaitingTermination+0x58>)
 8003f94:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003f96:	f000 fbcd 	bl	8004734 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f810 	bl	8003fc0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fa0:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <prvCheckTasksWaitingTermination+0x58>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e1      	bne.n	8003f6c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003fa8:	bf00      	nop
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	200002d4 	.word	0x200002d4
 8003fb8:	20000300 	.word	0x20000300
 8003fbc:	200002e8 	.word	0x200002e8

08003fc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fd85 	bl	8004adc <vPortFree>
                vPortFree( pxTCB );
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fd82 	bl	8004adc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <prvResetNextTaskUnblockTime+0x30>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d104      	bne.n	8003ff8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003fee:	4b09      	ldr	r3, [pc, #36]	; (8004014 <prvResetNextTaskUnblockTime+0x34>)
 8003ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003ff6:	e005      	b.n	8004004 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <prvResetNextTaskUnblockTime+0x30>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a04      	ldr	r2, [pc, #16]	; (8004014 <prvResetNextTaskUnblockTime+0x34>)
 8004002:	6013      	str	r3, [r2, #0]
}
 8004004:	bf00      	nop
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	200002b8 	.word	0x200002b8
 8004014:	20000320 	.word	0x20000320

08004018 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d04a      	beq.n	80040c4 <xTaskPriorityInherit+0xac>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004032:	4b27      	ldr	r3, [pc, #156]	; (80040d0 <xTaskPriorityInherit+0xb8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	429a      	cmp	r2, r3
 800403a:	d23a      	bcs.n	80040b2 <xTaskPriorityInherit+0x9a>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	2b00      	cmp	r3, #0
 8004042:	db06      	blt.n	8004052 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004044:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <xTaskPriorityInherit+0xb8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	f1c3 0205 	rsb	r2, r3, #5
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	6959      	ldr	r1, [r3, #20]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405a:	4613      	mov	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4a1c      	ldr	r2, [pc, #112]	; (80040d4 <xTaskPriorityInherit+0xbc>)
 8004064:	4413      	add	r3, r2
 8004066:	4299      	cmp	r1, r3
 8004068:	d11b      	bne.n	80040a2 <xTaskPriorityInherit+0x8a>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	3304      	adds	r3, #4
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fdbc 	bl	8002bec <uxListRemove>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10a      	bne.n	8004090 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	2201      	movs	r2, #1
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43da      	mvns	r2, r3
 8004086:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <xTaskPriorityInherit+0xc0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4013      	ands	r3, r2
 800408c:	4a12      	ldr	r2, [pc, #72]	; (80040d8 <xTaskPriorityInherit+0xc0>)
 800408e:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004090:	4b0f      	ldr	r3, [pc, #60]	; (80040d0 <xTaskPriorityInherit+0xb8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 800409a:	68b8      	ldr	r0, [r7, #8]
 800409c:	f7fc fae0 	bl	8000660 <prvReaddTaskToReadyList>
 80040a0:	e004      	b.n	80040ac <xTaskPriorityInherit+0x94>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80040a2:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <xTaskPriorityInherit+0xb8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80040ac:	2301      	movs	r3, #1
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	e008      	b.n	80040c4 <xTaskPriorityInherit+0xac>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040b6:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <xTaskPriorityInherit+0xb8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	429a      	cmp	r2, r3
 80040be:	d201      	bcs.n	80040c4 <xTaskPriorityInherit+0xac>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80040c0:	2301      	movs	r3, #1
 80040c2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80040c4:	68fb      	ldr	r3, [r7, #12]
    }
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000228 	.word	0x20000228
 80040d4:	2000022c 	.word	0x2000022c
 80040d8:	20000308 	.word	0x20000308

080040dc <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08a      	sub	sp, #40	; 0x28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80040ea:	2301      	movs	r3, #1
 80040ec:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80a1 	beq.w	8004238 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10a      	bne.n	8004114 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	613b      	str	r3, [r7, #16]
    }
 8004110:	bf00      	nop
 8004112:	e7fe      	b.n	8004112 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d902      	bls.n	8004124 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
 8004122:	e002      	b.n	800412a <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004130:	429a      	cmp	r2, r3
 8004132:	f000 8081 	beq.w	8004238 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413a:	69fa      	ldr	r2, [r7, #28]
 800413c:	429a      	cmp	r2, r3
 800413e:	d17b      	bne.n	8004238 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004140:	4b3f      	ldr	r3, [pc, #252]	; (8004240 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6a3a      	ldr	r2, [r7, #32]
 8004146:	429a      	cmp	r2, r3
 8004148:	d10a      	bne.n	8004160 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 800414a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	60fb      	str	r3, [r7, #12]
    }
 800415c:	bf00      	nop
 800415e:	e7fe      	b.n	800415e <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b00      	cmp	r3, #0
 8004172:	db04      	blt.n	800417e <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	f1c3 0205 	rsb	r2, r3, #5
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	6959      	ldr	r1, [r3, #20]
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4a2d      	ldr	r2, [pc, #180]	; (8004244 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800418e:	4413      	add	r3, r2
 8004190:	4299      	cmp	r1, r3
 8004192:	d151      	bne.n	8004238 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	3304      	adds	r3, #4
 8004198:	4618      	mov	r0, r3
 800419a:	f7fe fd27 	bl	8002bec <uxListRemove>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	2201      	movs	r2, #1
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	43da      	mvns	r2, r3
 80041b0:	4b25      	ldr	r3, [pc, #148]	; (8004248 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4013      	ands	r3, r2
 80041b6:	4a24      	ldr	r2, [pc, #144]	; (8004248 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80041b8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	2201      	movs	r2, #1
 80041c0:	409a      	lsls	r2, r3
 80041c2:	4b21      	ldr	r3, [pc, #132]	; (8004248 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	4a1f      	ldr	r2, [pc, #124]	; (8004248 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d0:	491c      	ldr	r1, [pc, #112]	; (8004244 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80041d2:	4613      	mov	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	3304      	adds	r3, #4
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	609a      	str	r2, [r3, #8]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	60da      	str	r2, [r3, #12]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	6a3a      	ldr	r2, [r7, #32]
 80041f6:	3204      	adds	r2, #4
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	1d1a      	adds	r2, r3, #4
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	609a      	str	r2, [r3, #8]
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004210:	441a      	add	r2, r3
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	615a      	str	r2, [r3, #20]
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421a:	490a      	ldr	r1, [pc, #40]	; (8004244 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	1c59      	adds	r1, r3, #1
 800422a:	4806      	ldr	r0, [pc, #24]	; (8004244 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4403      	add	r3, r0
 8004236:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004238:	bf00      	nop
 800423a:	3728      	adds	r7, #40	; 0x28
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20000228 	.word	0x20000228
 8004244:	2000022c 	.word	0x2000022c
 8004248:	20000308 	.word	0x20000308

0800424c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004250:	4b07      	ldr	r3, [pc, #28]	; (8004270 <pvTaskIncrementMutexHeldCount+0x24>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d004      	beq.n	8004262 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004258:	4b05      	ldr	r3, [pc, #20]	; (8004270 <pvTaskIncrementMutexHeldCount+0x24>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800425e:	3201      	adds	r2, #1
 8004260:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8004262:	4b03      	ldr	r3, [pc, #12]	; (8004270 <pvTaskIncrementMutexHeldCount+0x24>)
 8004264:	681b      	ldr	r3, [r3, #0]
    }
 8004266:	4618      	mov	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	20000228 	.word	0x20000228

08004274 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800427e:	4b36      	ldr	r3, [pc, #216]	; (8004358 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004284:	4b35      	ldr	r3, [pc, #212]	; (800435c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3304      	adds	r3, #4
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe fcae 	bl	8002bec <uxListRemove>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10b      	bne.n	80042ae <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004296:	4b31      	ldr	r3, [pc, #196]	; (800435c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	2201      	movs	r2, #1
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	43da      	mvns	r2, r3
 80042a4:	4b2e      	ldr	r3, [pc, #184]	; (8004360 <prvAddCurrentTaskToDelayedList+0xec>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4013      	ands	r3, r2
 80042aa:	4a2d      	ldr	r2, [pc, #180]	; (8004360 <prvAddCurrentTaskToDelayedList+0xec>)
 80042ac:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b4:	d124      	bne.n	8004300 <prvAddCurrentTaskToDelayedList+0x8c>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d021      	beq.n	8004300 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042bc:	4b29      	ldr	r3, [pc, #164]	; (8004364 <prvAddCurrentTaskToDelayedList+0xf0>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	4b26      	ldr	r3, [pc, #152]	; (800435c <prvAddCurrentTaskToDelayedList+0xe8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	609a      	str	r2, [r3, #8]
 80042ca:	4b24      	ldr	r3, [pc, #144]	; (800435c <prvAddCurrentTaskToDelayedList+0xe8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	6892      	ldr	r2, [r2, #8]
 80042d2:	60da      	str	r2, [r3, #12]
 80042d4:	4b21      	ldr	r3, [pc, #132]	; (800435c <prvAddCurrentTaskToDelayedList+0xe8>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	3204      	adds	r2, #4
 80042de:	605a      	str	r2, [r3, #4]
 80042e0:	4b1e      	ldr	r3, [pc, #120]	; (800435c <prvAddCurrentTaskToDelayedList+0xe8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	1d1a      	adds	r2, r3, #4
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	609a      	str	r2, [r3, #8]
 80042ea:	4b1c      	ldr	r3, [pc, #112]	; (800435c <prvAddCurrentTaskToDelayedList+0xe8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1d      	ldr	r2, [pc, #116]	; (8004364 <prvAddCurrentTaskToDelayedList+0xf0>)
 80042f0:	615a      	str	r2, [r3, #20]
 80042f2:	4b1c      	ldr	r3, [pc, #112]	; (8004364 <prvAddCurrentTaskToDelayedList+0xf0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3301      	adds	r3, #1
 80042f8:	4a1a      	ldr	r2, [pc, #104]	; (8004364 <prvAddCurrentTaskToDelayedList+0xf0>)
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80042fe:	e026      	b.n	800434e <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4413      	add	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004308:	4b14      	ldr	r3, [pc, #80]	; (800435c <prvAddCurrentTaskToDelayedList+0xe8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	429a      	cmp	r2, r3
 8004316:	d209      	bcs.n	800432c <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004318:	4b13      	ldr	r3, [pc, #76]	; (8004368 <prvAddCurrentTaskToDelayedList+0xf4>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4b0f      	ldr	r3, [pc, #60]	; (800435c <prvAddCurrentTaskToDelayedList+0xe8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3304      	adds	r3, #4
 8004322:	4619      	mov	r1, r3
 8004324:	4610      	mov	r0, r2
 8004326:	f7fe fc28 	bl	8002b7a <vListInsert>
}
 800432a:	e010      	b.n	800434e <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800432c:	4b0f      	ldr	r3, [pc, #60]	; (800436c <prvAddCurrentTaskToDelayedList+0xf8>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b0a      	ldr	r3, [pc, #40]	; (800435c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3304      	adds	r3, #4
 8004336:	4619      	mov	r1, r3
 8004338:	4610      	mov	r0, r2
 800433a:	f7fe fc1e 	bl	8002b7a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800433e:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	429a      	cmp	r2, r3
 8004346:	d202      	bcs.n	800434e <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8004348:	4a09      	ldr	r2, [pc, #36]	; (8004370 <prvAddCurrentTaskToDelayedList+0xfc>)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6013      	str	r3, [r2, #0]
}
 800434e:	bf00      	nop
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20000304 	.word	0x20000304
 800435c:	20000228 	.word	0x20000228
 8004360:	20000308 	.word	0x20000308
 8004364:	200002ec 	.word	0x200002ec
 8004368:	200002bc 	.word	0x200002bc
 800436c:	200002b8 	.word	0x200002b8
 8004370:	20000320 	.word	0x20000320

08004374 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3b04      	subs	r3, #4
 8004384:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800438c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3b04      	subs	r3, #4
 8004392:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f023 0201 	bic.w	r2, r3, #1
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3b04      	subs	r3, #4
 80043a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80043a4:	4a0c      	ldr	r2, [pc, #48]	; (80043d8 <pxPortInitialiseStack+0x64>)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3b14      	subs	r3, #20
 80043ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	3b04      	subs	r3, #4
 80043ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f06f 0202 	mvn.w	r2, #2
 80043c2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3b20      	subs	r3, #32
 80043c8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80043ca:	68fb      	ldr	r3, [r7, #12]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	080043dd 	.word	0x080043dd

080043dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80043e6:	4b12      	ldr	r3, [pc, #72]	; (8004430 <prvTaskExitError+0x54>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d00a      	beq.n	8004406 <prvTaskExitError+0x2a>
        __asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	60fb      	str	r3, [r7, #12]
    }
 8004402:	bf00      	nop
 8004404:	e7fe      	b.n	8004404 <prvTaskExitError+0x28>
        __asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	60bb      	str	r3, [r7, #8]
    }
 8004418:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800441a:	bf00      	nop
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0fc      	beq.n	800441c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004422:	bf00      	nop
 8004424:	bf00      	nop
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	20000010 	.word	0x20000010
	...

08004440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004440:	4b07      	ldr	r3, [pc, #28]	; (8004460 <pxCurrentTCBConst2>)
 8004442:	6819      	ldr	r1, [r3, #0]
 8004444:	6808      	ldr	r0, [r1, #0]
 8004446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800444a:	f380 8809 	msr	PSP, r0
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f04f 0000 	mov.w	r0, #0
 8004456:	f380 8811 	msr	BASEPRI, r0
 800445a:	4770      	bx	lr
 800445c:	f3af 8000 	nop.w

08004460 <pxCurrentTCBConst2>:
 8004460:	20000228 	.word	0x20000228
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop

08004468 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004468:	4808      	ldr	r0, [pc, #32]	; (800448c <prvPortStartFirstTask+0x24>)
 800446a:	6800      	ldr	r0, [r0, #0]
 800446c:	6800      	ldr	r0, [r0, #0]
 800446e:	f380 8808 	msr	MSP, r0
 8004472:	f04f 0000 	mov.w	r0, #0
 8004476:	f380 8814 	msr	CONTROL, r0
 800447a:	b662      	cpsie	i
 800447c:	b661      	cpsie	f
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	df00      	svc	0
 8004488:	bf00      	nop
 800448a:	0000      	.short	0x0000
 800448c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004490:	bf00      	nop
 8004492:	bf00      	nop

08004494 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800449a:	4b46      	ldr	r3, [pc, #280]	; (80045b4 <xPortStartScheduler+0x120>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a46      	ldr	r2, [pc, #280]	; (80045b8 <xPortStartScheduler+0x124>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d10a      	bne.n	80044ba <xPortStartScheduler+0x26>
        __asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	613b      	str	r3, [r7, #16]
    }
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044ba:	4b3e      	ldr	r3, [pc, #248]	; (80045b4 <xPortStartScheduler+0x120>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a3f      	ldr	r2, [pc, #252]	; (80045bc <xPortStartScheduler+0x128>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d10a      	bne.n	80044da <xPortStartScheduler+0x46>
        __asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	60fb      	str	r3, [r7, #12]
    }
 80044d6:	bf00      	nop
 80044d8:	e7fe      	b.n	80044d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044da:	4b39      	ldr	r3, [pc, #228]	; (80045c0 <xPortStartScheduler+0x12c>)
 80044dc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	22ff      	movs	r2, #255	; 0xff
 80044ea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	4b31      	ldr	r3, [pc, #196]	; (80045c4 <xPortStartScheduler+0x130>)
 8004500:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004502:	4b31      	ldr	r3, [pc, #196]	; (80045c8 <xPortStartScheduler+0x134>)
 8004504:	2207      	movs	r2, #7
 8004506:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004508:	e009      	b.n	800451e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800450a:	4b2f      	ldr	r3, [pc, #188]	; (80045c8 <xPortStartScheduler+0x134>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3b01      	subs	r3, #1
 8004510:	4a2d      	ldr	r2, [pc, #180]	; (80045c8 <xPortStartScheduler+0x134>)
 8004512:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	b2db      	uxtb	r3, r3
 800451c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004526:	2b80      	cmp	r3, #128	; 0x80
 8004528:	d0ef      	beq.n	800450a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800452a:	4b27      	ldr	r3, [pc, #156]	; (80045c8 <xPortStartScheduler+0x134>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f1c3 0307 	rsb	r3, r3, #7
 8004532:	2b04      	cmp	r3, #4
 8004534:	d00a      	beq.n	800454c <xPortStartScheduler+0xb8>
        __asm volatile
 8004536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	60bb      	str	r3, [r7, #8]
    }
 8004548:	bf00      	nop
 800454a:	e7fe      	b.n	800454a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800454c:	4b1e      	ldr	r3, [pc, #120]	; (80045c8 <xPortStartScheduler+0x134>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	4a1d      	ldr	r2, [pc, #116]	; (80045c8 <xPortStartScheduler+0x134>)
 8004554:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004556:	4b1c      	ldr	r3, [pc, #112]	; (80045c8 <xPortStartScheduler+0x134>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800455e:	4a1a      	ldr	r2, [pc, #104]	; (80045c8 <xPortStartScheduler+0x134>)
 8004560:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	b2da      	uxtb	r2, r3
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800456a:	4b18      	ldr	r3, [pc, #96]	; (80045cc <xPortStartScheduler+0x138>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a17      	ldr	r2, [pc, #92]	; (80045cc <xPortStartScheduler+0x138>)
 8004570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004574:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004576:	4b15      	ldr	r3, [pc, #84]	; (80045cc <xPortStartScheduler+0x138>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a14      	ldr	r2, [pc, #80]	; (80045cc <xPortStartScheduler+0x138>)
 800457c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004580:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004582:	f000 f95b 	bl	800483c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004586:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <xPortStartScheduler+0x13c>)
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800458c:	f000 f97a 	bl	8004884 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004590:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <xPortStartScheduler+0x140>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a0f      	ldr	r2, [pc, #60]	; (80045d4 <xPortStartScheduler+0x140>)
 8004596:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800459a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800459c:	f7ff ff64 	bl	8004468 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80045a0:	f7ff faaa 	bl	8003af8 <vTaskSwitchContext>
    prvTaskExitError();
 80045a4:	f7ff ff1a 	bl	80043dc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	e000ed00 	.word	0xe000ed00
 80045b8:	410fc271 	.word	0x410fc271
 80045bc:	410fc270 	.word	0x410fc270
 80045c0:	e000e400 	.word	0xe000e400
 80045c4:	2000032c 	.word	0x2000032c
 80045c8:	20000330 	.word	0x20000330
 80045cc:	e000ed20 	.word	0xe000ed20
 80045d0:	20000010 	.word	0x20000010
 80045d4:	e000ef34 	.word	0xe000ef34

080045d8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045de:	4b37      	ldr	r3, [pc, #220]	; (80046bc <vInitPrioGroupValue+0xe4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a37      	ldr	r2, [pc, #220]	; (80046c0 <vInitPrioGroupValue+0xe8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d10a      	bne.n	80045fe <vInitPrioGroupValue+0x26>
        __asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	613b      	str	r3, [r7, #16]
    }
 80045fa:	bf00      	nop
 80045fc:	e7fe      	b.n	80045fc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045fe:	4b2f      	ldr	r3, [pc, #188]	; (80046bc <vInitPrioGroupValue+0xe4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a30      	ldr	r2, [pc, #192]	; (80046c4 <vInitPrioGroupValue+0xec>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d10a      	bne.n	800461e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	60fb      	str	r3, [r7, #12]
    }
 800461a:	bf00      	nop
 800461c:	e7fe      	b.n	800461c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800461e:	4b2a      	ldr	r3, [pc, #168]	; (80046c8 <vInitPrioGroupValue+0xf0>)
 8004620:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	22ff      	movs	r2, #255	; 0xff
 800462e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	b2db      	uxtb	r3, r3
 8004636:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	b2db      	uxtb	r3, r3
 800463c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004640:	b2da      	uxtb	r2, r3
 8004642:	4b22      	ldr	r3, [pc, #136]	; (80046cc <vInitPrioGroupValue+0xf4>)
 8004644:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004646:	4b22      	ldr	r3, [pc, #136]	; (80046d0 <vInitPrioGroupValue+0xf8>)
 8004648:	2207      	movs	r2, #7
 800464a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800464c:	e009      	b.n	8004662 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800464e:	4b20      	ldr	r3, [pc, #128]	; (80046d0 <vInitPrioGroupValue+0xf8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3b01      	subs	r3, #1
 8004654:	4a1e      	ldr	r2, [pc, #120]	; (80046d0 <vInitPrioGroupValue+0xf8>)
 8004656:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	b2db      	uxtb	r3, r3
 8004660:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004662:	78fb      	ldrb	r3, [r7, #3]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466a:	2b80      	cmp	r3, #128	; 0x80
 800466c:	d0ef      	beq.n	800464e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800466e:	4b18      	ldr	r3, [pc, #96]	; (80046d0 <vInitPrioGroupValue+0xf8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f1c3 0307 	rsb	r3, r3, #7
 8004676:	2b04      	cmp	r3, #4
 8004678:	d00a      	beq.n	8004690 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	60bb      	str	r3, [r7, #8]
    }
 800468c:	bf00      	nop
 800468e:	e7fe      	b.n	800468e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004690:	4b0f      	ldr	r3, [pc, #60]	; (80046d0 <vInitPrioGroupValue+0xf8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	021b      	lsls	r3, r3, #8
 8004696:	4a0e      	ldr	r2, [pc, #56]	; (80046d0 <vInitPrioGroupValue+0xf8>)
 8004698:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800469a:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <vInitPrioGroupValue+0xf8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046a2:	4a0b      	ldr	r2, [pc, #44]	; (80046d0 <vInitPrioGroupValue+0xf8>)
 80046a4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	e000ed00 	.word	0xe000ed00
 80046c0:	410fc271 	.word	0x410fc271
 80046c4:	410fc270 	.word	0x410fc270
 80046c8:	e000e400 	.word	0xe000e400
 80046cc:	2000032c 	.word	0x2000032c
 80046d0:	20000330 	.word	0x20000330

080046d4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
        __asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	607b      	str	r3, [r7, #4]
    }
 80046ec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80046ee:	4b0f      	ldr	r3, [pc, #60]	; (800472c <vPortEnterCritical+0x58>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3301      	adds	r3, #1
 80046f4:	4a0d      	ldr	r2, [pc, #52]	; (800472c <vPortEnterCritical+0x58>)
 80046f6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80046f8:	4b0c      	ldr	r3, [pc, #48]	; (800472c <vPortEnterCritical+0x58>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d10f      	bne.n	8004720 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004700:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <vPortEnterCritical+0x5c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <vPortEnterCritical+0x4c>
        __asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	603b      	str	r3, [r7, #0]
    }
 800471c:	bf00      	nop
 800471e:	e7fe      	b.n	800471e <vPortEnterCritical+0x4a>
    }
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	20000010 	.word	0x20000010
 8004730:	e000ed04 	.word	0xe000ed04

08004734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800473a:	4b12      	ldr	r3, [pc, #72]	; (8004784 <vPortExitCritical+0x50>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10a      	bne.n	8004758 <vPortExitCritical+0x24>
        __asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	607b      	str	r3, [r7, #4]
    }
 8004754:	bf00      	nop
 8004756:	e7fe      	b.n	8004756 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004758:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <vPortExitCritical+0x50>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3b01      	subs	r3, #1
 800475e:	4a09      	ldr	r2, [pc, #36]	; (8004784 <vPortExitCritical+0x50>)
 8004760:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004762:	4b08      	ldr	r3, [pc, #32]	; (8004784 <vPortExitCritical+0x50>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d105      	bne.n	8004776 <vPortExitCritical+0x42>
 800476a:	2300      	movs	r3, #0
 800476c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	f383 8811 	msr	BASEPRI, r3
    }
 8004774:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	20000010 	.word	0x20000010
	...

08004790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004790:	f3ef 8009 	mrs	r0, PSP
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	4b15      	ldr	r3, [pc, #84]	; (80047f0 <pxCurrentTCBConst>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	f01e 0f10 	tst.w	lr, #16
 80047a0:	bf08      	it	eq
 80047a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047aa:	6010      	str	r0, [r2, #0]
 80047ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047b4:	f380 8811 	msr	BASEPRI, r0
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	f3bf 8f6f 	isb	sy
 80047c0:	f7ff f99a 	bl	8003af8 <vTaskSwitchContext>
 80047c4:	f04f 0000 	mov.w	r0, #0
 80047c8:	f380 8811 	msr	BASEPRI, r0
 80047cc:	bc09      	pop	{r0, r3}
 80047ce:	6819      	ldr	r1, [r3, #0]
 80047d0:	6808      	ldr	r0, [r1, #0]
 80047d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d6:	f01e 0f10 	tst.w	lr, #16
 80047da:	bf08      	it	eq
 80047dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047e0:	f380 8809 	msr	PSP, r0
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	f3af 8000 	nop.w

080047f0 <pxCurrentTCBConst>:
 80047f0:	20000228 	.word	0x20000228
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop

080047f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
        __asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	607b      	str	r3, [r7, #4]
    }
 8004810:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004812:	f7ff f85b 	bl	80038cc <xTaskIncrementTick>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800481c:	4b06      	ldr	r3, [pc, #24]	; (8004838 <SysTick_Handler+0x40>)
 800481e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	2300      	movs	r3, #0
 8004826:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	f383 8811 	msr	BASEPRI, r3
    }
 800482e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8004830:	bf00      	nop
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	e000ed04 	.word	0xe000ed04

0800483c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <vPortSetupTimerInterrupt+0x34>)
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <vPortSetupTimerInterrupt+0x38>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <vPortSetupTimerInterrupt+0x3c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a0a      	ldr	r2, [pc, #40]	; (800487c <vPortSetupTimerInterrupt+0x40>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	099b      	lsrs	r3, r3, #6
 8004858:	4a09      	ldr	r2, [pc, #36]	; (8004880 <vPortSetupTimerInterrupt+0x44>)
 800485a:	3b01      	subs	r3, #1
 800485c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800485e:	4b04      	ldr	r3, [pc, #16]	; (8004870 <vPortSetupTimerInterrupt+0x34>)
 8004860:	2207      	movs	r2, #7
 8004862:	601a      	str	r2, [r3, #0]
}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	e000e010 	.word	0xe000e010
 8004874:	e000e018 	.word	0xe000e018
 8004878:	20000000 	.word	0x20000000
 800487c:	10624dd3 	.word	0x10624dd3
 8004880:	e000e014 	.word	0xe000e014

08004884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004894 <vPortEnableVFP+0x10>
 8004888:	6801      	ldr	r1, [r0, #0]
 800488a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800488e:	6001      	str	r1, [r0, #0]
 8004890:	4770      	bx	lr
 8004892:	0000      	.short	0x0000
 8004894:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004898:	bf00      	nop
 800489a:	bf00      	nop

0800489c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048a2:	f3ef 8305 	mrs	r3, IPSR
 80048a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b0f      	cmp	r3, #15
 80048ac:	d914      	bls.n	80048d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048ae:	4a17      	ldr	r2, [pc, #92]	; (800490c <vPortValidateInterruptPriority+0x70>)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048b8:	4b15      	ldr	r3, [pc, #84]	; (8004910 <vPortValidateInterruptPriority+0x74>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	7afa      	ldrb	r2, [r7, #11]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d20a      	bcs.n	80048d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	607b      	str	r3, [r7, #4]
    }
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048d8:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <vPortValidateInterruptPriority+0x78>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048e0:	4b0d      	ldr	r3, [pc, #52]	; (8004918 <vPortValidateInterruptPriority+0x7c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d90a      	bls.n	80048fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	603b      	str	r3, [r7, #0]
    }
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <vPortValidateInterruptPriority+0x60>
    }
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	e000e3f0 	.word	0xe000e3f0
 8004910:	2000032c 	.word	0x2000032c
 8004914:	e000ed0c 	.word	0xe000ed0c
 8004918:	20000330 	.word	0x20000330

0800491c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08a      	sub	sp, #40	; 0x28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004928:	f7fe fec6 	bl	80036b8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800492c:	4b65      	ldr	r3, [pc, #404]	; (8004ac4 <pvPortMalloc+0x1a8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004934:	f000 f934 	bl	8004ba0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004938:	4b63      	ldr	r3, [pc, #396]	; (8004ac8 <pvPortMalloc+0x1ac>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4013      	ands	r3, r2
 8004940:	2b00      	cmp	r3, #0
 8004942:	f040 80a7 	bne.w	8004a94 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d02d      	beq.n	80049a8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800494c:	2208      	movs	r2, #8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	429a      	cmp	r2, r3
 8004956:	d227      	bcs.n	80049a8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004958:	2208      	movs	r2, #8
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4413      	add	r3, r2
 800495e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	2b00      	cmp	r3, #0
 8004968:	d021      	beq.n	80049ae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f023 0307 	bic.w	r3, r3, #7
 8004970:	3308      	adds	r3, #8
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	429a      	cmp	r2, r3
 8004976:	d214      	bcs.n	80049a2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f023 0307 	bic.w	r3, r3, #7
 800497e:	3308      	adds	r3, #8
 8004980:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	2b00      	cmp	r3, #0
 800498a:	d010      	beq.n	80049ae <pvPortMalloc+0x92>
        __asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	617b      	str	r3, [r7, #20]
    }
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049a6:	e002      	b.n	80049ae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	607b      	str	r3, [r7, #4]
 80049ac:	e000      	b.n	80049b0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049ae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d06e      	beq.n	8004a94 <pvPortMalloc+0x178>
 80049b6:	4b45      	ldr	r3, [pc, #276]	; (8004acc <pvPortMalloc+0x1b0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d869      	bhi.n	8004a94 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80049c0:	4b43      	ldr	r3, [pc, #268]	; (8004ad0 <pvPortMalloc+0x1b4>)
 80049c2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80049c4:	4b42      	ldr	r3, [pc, #264]	; (8004ad0 <pvPortMalloc+0x1b4>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049ca:	e004      	b.n	80049d6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d903      	bls.n	80049e8 <pvPortMalloc+0xcc>
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f1      	bne.n	80049cc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80049e8:	4b36      	ldr	r3, [pc, #216]	; (8004ac4 <pvPortMalloc+0x1a8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d050      	beq.n	8004a94 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2208      	movs	r2, #8
 80049f8:	4413      	add	r3, r2
 80049fa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	1ad2      	subs	r2, r2, r3
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d91f      	bls.n	8004a54 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4413      	add	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <pvPortMalloc+0x120>
        __asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	613b      	str	r3, [r7, #16]
    }
 8004a38:	bf00      	nop
 8004a3a:	e7fe      	b.n	8004a3a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	1ad2      	subs	r2, r2, r3
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a4e:	69b8      	ldr	r0, [r7, #24]
 8004a50:	f000 f908 	bl	8004c64 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a54:	4b1d      	ldr	r3, [pc, #116]	; (8004acc <pvPortMalloc+0x1b0>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	4a1b      	ldr	r2, [pc, #108]	; (8004acc <pvPortMalloc+0x1b0>)
 8004a60:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a62:	4b1a      	ldr	r3, [pc, #104]	; (8004acc <pvPortMalloc+0x1b0>)
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <pvPortMalloc+0x1b8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d203      	bcs.n	8004a76 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a6e:	4b17      	ldr	r3, [pc, #92]	; (8004acc <pvPortMalloc+0x1b0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <pvPortMalloc+0x1b8>)
 8004a74:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <pvPortMalloc+0x1ac>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004a8a:	4b13      	ldr	r3, [pc, #76]	; (8004ad8 <pvPortMalloc+0x1bc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	4a11      	ldr	r2, [pc, #68]	; (8004ad8 <pvPortMalloc+0x1bc>)
 8004a92:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004a94:	f7fe fe1e 	bl	80036d4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <pvPortMalloc+0x19c>
        __asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	60fb      	str	r3, [r7, #12]
    }
 8004ab4:	bf00      	nop
 8004ab6:	e7fe      	b.n	8004ab6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004ab8:	69fb      	ldr	r3, [r7, #28]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3728      	adds	r7, #40	; 0x28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20012f3c 	.word	0x20012f3c
 8004ac8:	20012f50 	.word	0x20012f50
 8004acc:	20012f40 	.word	0x20012f40
 8004ad0:	20012f34 	.word	0x20012f34
 8004ad4:	20012f44 	.word	0x20012f44
 8004ad8:	20012f48 	.word	0x20012f48

08004adc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d04d      	beq.n	8004b8a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004aee:	2308      	movs	r3, #8
 8004af0:	425b      	negs	r3, r3
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4413      	add	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	4b24      	ldr	r3, [pc, #144]	; (8004b94 <vPortFree+0xb8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <vPortFree+0x44>
        __asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	60fb      	str	r3, [r7, #12]
    }
 8004b1c:	bf00      	nop
 8004b1e:	e7fe      	b.n	8004b1e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <vPortFree+0x62>
        __asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	60bb      	str	r3, [r7, #8]
    }
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <vPortFree+0xb8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01e      	beq.n	8004b8a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d11a      	bne.n	8004b8a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <vPortFree+0xb8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	401a      	ands	r2, r3
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004b64:	f7fe fda8 	bl	80036b8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <vPortFree+0xbc>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4413      	add	r3, r2
 8004b72:	4a09      	ldr	r2, [pc, #36]	; (8004b98 <vPortFree+0xbc>)
 8004b74:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b76:	6938      	ldr	r0, [r7, #16]
 8004b78:	f000 f874 	bl	8004c64 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b7c:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <vPortFree+0xc0>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	4a06      	ldr	r2, [pc, #24]	; (8004b9c <vPortFree+0xc0>)
 8004b84:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b86:	f7fe fda5 	bl	80036d4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b8a:	bf00      	nop
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20012f50 	.word	0x20012f50
 8004b98:	20012f40 	.word	0x20012f40
 8004b9c:	20012f4c 	.word	0x20012f4c

08004ba0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ba6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004baa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004bac:	4b27      	ldr	r3, [pc, #156]	; (8004c4c <prvHeapInit+0xac>)
 8004bae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3307      	adds	r3, #7
 8004bbe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0307 	bic.w	r3, r3, #7
 8004bc6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	4a1f      	ldr	r2, [pc, #124]	; (8004c4c <prvHeapInit+0xac>)
 8004bd0:	4413      	add	r3, r2
 8004bd2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bd8:	4a1d      	ldr	r2, [pc, #116]	; (8004c50 <prvHeapInit+0xb0>)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004bde:	4b1c      	ldr	r3, [pc, #112]	; (8004c50 <prvHeapInit+0xb0>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	4413      	add	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004bec:	2208      	movs	r2, #8
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0307 	bic.w	r3, r3, #7
 8004bfa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <prvHeapInit+0xb4>)
 8004c00:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004c02:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <prvHeapInit+0xb4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2200      	movs	r2, #0
 8004c08:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004c0a:	4b12      	ldr	r3, [pc, #72]	; (8004c54 <prvHeapInit+0xb4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	1ad2      	subs	r2, r2, r3
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c20:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <prvHeapInit+0xb4>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4a0a      	ldr	r2, [pc, #40]	; (8004c58 <prvHeapInit+0xb8>)
 8004c2e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <prvHeapInit+0xbc>)
 8004c36:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c38:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <prvHeapInit+0xc0>)
 8004c3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c3e:	601a      	str	r2, [r3, #0]
}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	20000334 	.word	0x20000334
 8004c50:	20012f34 	.word	0x20012f34
 8004c54:	20012f3c 	.word	0x20012f3c
 8004c58:	20012f44 	.word	0x20012f44
 8004c5c:	20012f40 	.word	0x20012f40
 8004c60:	20012f50 	.word	0x20012f50

08004c64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c6c:	4b28      	ldr	r3, [pc, #160]	; (8004d10 <prvInsertBlockIntoFreeList+0xac>)
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e002      	b.n	8004c78 <prvInsertBlockIntoFreeList+0x14>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d8f7      	bhi.n	8004c72 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d108      	bne.n	8004ca6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	441a      	add	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	441a      	add	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d118      	bne.n	8004cec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <prvInsertBlockIntoFreeList+0xb0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d00d      	beq.n	8004ce2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	441a      	add	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	e008      	b.n	8004cf4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <prvInsertBlockIntoFreeList+0xb0>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e003      	b.n	8004cf4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d002      	beq.n	8004d02 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20012f34 	.word	0x20012f34
 8004d14:	20012f3c 	.word	0x20012f3c

08004d18 <__errno>:
 8004d18:	4b01      	ldr	r3, [pc, #4]	; (8004d20 <__errno+0x8>)
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20000014 	.word	0x20000014

08004d24 <__libc_init_array>:
 8004d24:	b570      	push	{r4, r5, r6, lr}
 8004d26:	4d0d      	ldr	r5, [pc, #52]	; (8004d5c <__libc_init_array+0x38>)
 8004d28:	4c0d      	ldr	r4, [pc, #52]	; (8004d60 <__libc_init_array+0x3c>)
 8004d2a:	1b64      	subs	r4, r4, r5
 8004d2c:	10a4      	asrs	r4, r4, #2
 8004d2e:	2600      	movs	r6, #0
 8004d30:	42a6      	cmp	r6, r4
 8004d32:	d109      	bne.n	8004d48 <__libc_init_array+0x24>
 8004d34:	4d0b      	ldr	r5, [pc, #44]	; (8004d64 <__libc_init_array+0x40>)
 8004d36:	4c0c      	ldr	r4, [pc, #48]	; (8004d68 <__libc_init_array+0x44>)
 8004d38:	f000 fc8e 	bl	8005658 <_init>
 8004d3c:	1b64      	subs	r4, r4, r5
 8004d3e:	10a4      	asrs	r4, r4, #2
 8004d40:	2600      	movs	r6, #0
 8004d42:	42a6      	cmp	r6, r4
 8004d44:	d105      	bne.n	8004d52 <__libc_init_array+0x2e>
 8004d46:	bd70      	pop	{r4, r5, r6, pc}
 8004d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d4c:	4798      	blx	r3
 8004d4e:	3601      	adds	r6, #1
 8004d50:	e7ee      	b.n	8004d30 <__libc_init_array+0xc>
 8004d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d56:	4798      	blx	r3
 8004d58:	3601      	adds	r6, #1
 8004d5a:	e7f2      	b.n	8004d42 <__libc_init_array+0x1e>
 8004d5c:	08005788 	.word	0x08005788
 8004d60:	08005788 	.word	0x08005788
 8004d64:	08005788 	.word	0x08005788
 8004d68:	0800578c 	.word	0x0800578c

08004d6c <memcpy>:
 8004d6c:	440a      	add	r2, r1
 8004d6e:	4291      	cmp	r1, r2
 8004d70:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d74:	d100      	bne.n	8004d78 <memcpy+0xc>
 8004d76:	4770      	bx	lr
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d82:	4291      	cmp	r1, r2
 8004d84:	d1f9      	bne.n	8004d7a <memcpy+0xe>
 8004d86:	bd10      	pop	{r4, pc}

08004d88 <memset>:
 8004d88:	4402      	add	r2, r0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d100      	bne.n	8004d92 <memset+0xa>
 8004d90:	4770      	bx	lr
 8004d92:	f803 1b01 	strb.w	r1, [r3], #1
 8004d96:	e7f9      	b.n	8004d8c <memset+0x4>

08004d98 <siprintf>:
 8004d98:	b40e      	push	{r1, r2, r3}
 8004d9a:	b500      	push	{lr}
 8004d9c:	b09c      	sub	sp, #112	; 0x70
 8004d9e:	ab1d      	add	r3, sp, #116	; 0x74
 8004da0:	9002      	str	r0, [sp, #8]
 8004da2:	9006      	str	r0, [sp, #24]
 8004da4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004da8:	4809      	ldr	r0, [pc, #36]	; (8004dd0 <siprintf+0x38>)
 8004daa:	9107      	str	r1, [sp, #28]
 8004dac:	9104      	str	r1, [sp, #16]
 8004dae:	4909      	ldr	r1, [pc, #36]	; (8004dd4 <siprintf+0x3c>)
 8004db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004db4:	9105      	str	r1, [sp, #20]
 8004db6:	6800      	ldr	r0, [r0, #0]
 8004db8:	9301      	str	r3, [sp, #4]
 8004dba:	a902      	add	r1, sp, #8
 8004dbc:	f000 f868 	bl	8004e90 <_svfiprintf_r>
 8004dc0:	9b02      	ldr	r3, [sp, #8]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	b01c      	add	sp, #112	; 0x70
 8004dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dcc:	b003      	add	sp, #12
 8004dce:	4770      	bx	lr
 8004dd0:	20000014 	.word	0x20000014
 8004dd4:	ffff0208 	.word	0xffff0208

08004dd8 <__ssputs_r>:
 8004dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ddc:	688e      	ldr	r6, [r1, #8]
 8004dde:	429e      	cmp	r6, r3
 8004de0:	4682      	mov	sl, r0
 8004de2:	460c      	mov	r4, r1
 8004de4:	4690      	mov	r8, r2
 8004de6:	461f      	mov	r7, r3
 8004de8:	d838      	bhi.n	8004e5c <__ssputs_r+0x84>
 8004dea:	898a      	ldrh	r2, [r1, #12]
 8004dec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004df0:	d032      	beq.n	8004e58 <__ssputs_r+0x80>
 8004df2:	6825      	ldr	r5, [r4, #0]
 8004df4:	6909      	ldr	r1, [r1, #16]
 8004df6:	eba5 0901 	sub.w	r9, r5, r1
 8004dfa:	6965      	ldr	r5, [r4, #20]
 8004dfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e04:	3301      	adds	r3, #1
 8004e06:	444b      	add	r3, r9
 8004e08:	106d      	asrs	r5, r5, #1
 8004e0a:	429d      	cmp	r5, r3
 8004e0c:	bf38      	it	cc
 8004e0e:	461d      	movcc	r5, r3
 8004e10:	0553      	lsls	r3, r2, #21
 8004e12:	d531      	bpl.n	8004e78 <__ssputs_r+0xa0>
 8004e14:	4629      	mov	r1, r5
 8004e16:	f000 fb55 	bl	80054c4 <_malloc_r>
 8004e1a:	4606      	mov	r6, r0
 8004e1c:	b950      	cbnz	r0, 8004e34 <__ssputs_r+0x5c>
 8004e1e:	230c      	movs	r3, #12
 8004e20:	f8ca 3000 	str.w	r3, [sl]
 8004e24:	89a3      	ldrh	r3, [r4, #12]
 8004e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e2a:	81a3      	strh	r3, [r4, #12]
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e34:	6921      	ldr	r1, [r4, #16]
 8004e36:	464a      	mov	r2, r9
 8004e38:	f7ff ff98 	bl	8004d6c <memcpy>
 8004e3c:	89a3      	ldrh	r3, [r4, #12]
 8004e3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e46:	81a3      	strh	r3, [r4, #12]
 8004e48:	6126      	str	r6, [r4, #16]
 8004e4a:	6165      	str	r5, [r4, #20]
 8004e4c:	444e      	add	r6, r9
 8004e4e:	eba5 0509 	sub.w	r5, r5, r9
 8004e52:	6026      	str	r6, [r4, #0]
 8004e54:	60a5      	str	r5, [r4, #8]
 8004e56:	463e      	mov	r6, r7
 8004e58:	42be      	cmp	r6, r7
 8004e5a:	d900      	bls.n	8004e5e <__ssputs_r+0x86>
 8004e5c:	463e      	mov	r6, r7
 8004e5e:	6820      	ldr	r0, [r4, #0]
 8004e60:	4632      	mov	r2, r6
 8004e62:	4641      	mov	r1, r8
 8004e64:	f000 faa8 	bl	80053b8 <memmove>
 8004e68:	68a3      	ldr	r3, [r4, #8]
 8004e6a:	1b9b      	subs	r3, r3, r6
 8004e6c:	60a3      	str	r3, [r4, #8]
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	4433      	add	r3, r6
 8004e72:	6023      	str	r3, [r4, #0]
 8004e74:	2000      	movs	r0, #0
 8004e76:	e7db      	b.n	8004e30 <__ssputs_r+0x58>
 8004e78:	462a      	mov	r2, r5
 8004e7a:	f000 fb97 	bl	80055ac <_realloc_r>
 8004e7e:	4606      	mov	r6, r0
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d1e1      	bne.n	8004e48 <__ssputs_r+0x70>
 8004e84:	6921      	ldr	r1, [r4, #16]
 8004e86:	4650      	mov	r0, sl
 8004e88:	f000 fab0 	bl	80053ec <_free_r>
 8004e8c:	e7c7      	b.n	8004e1e <__ssputs_r+0x46>
	...

08004e90 <_svfiprintf_r>:
 8004e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e94:	4698      	mov	r8, r3
 8004e96:	898b      	ldrh	r3, [r1, #12]
 8004e98:	061b      	lsls	r3, r3, #24
 8004e9a:	b09d      	sub	sp, #116	; 0x74
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	460d      	mov	r5, r1
 8004ea0:	4614      	mov	r4, r2
 8004ea2:	d50e      	bpl.n	8004ec2 <_svfiprintf_r+0x32>
 8004ea4:	690b      	ldr	r3, [r1, #16]
 8004ea6:	b963      	cbnz	r3, 8004ec2 <_svfiprintf_r+0x32>
 8004ea8:	2140      	movs	r1, #64	; 0x40
 8004eaa:	f000 fb0b 	bl	80054c4 <_malloc_r>
 8004eae:	6028      	str	r0, [r5, #0]
 8004eb0:	6128      	str	r0, [r5, #16]
 8004eb2:	b920      	cbnz	r0, 8004ebe <_svfiprintf_r+0x2e>
 8004eb4:	230c      	movs	r3, #12
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebc:	e0d1      	b.n	8005062 <_svfiprintf_r+0x1d2>
 8004ebe:	2340      	movs	r3, #64	; 0x40
 8004ec0:	616b      	str	r3, [r5, #20]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ec6:	2320      	movs	r3, #32
 8004ec8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ecc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ed0:	2330      	movs	r3, #48	; 0x30
 8004ed2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800507c <_svfiprintf_r+0x1ec>
 8004ed6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004eda:	f04f 0901 	mov.w	r9, #1
 8004ede:	4623      	mov	r3, r4
 8004ee0:	469a      	mov	sl, r3
 8004ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ee6:	b10a      	cbz	r2, 8004eec <_svfiprintf_r+0x5c>
 8004ee8:	2a25      	cmp	r2, #37	; 0x25
 8004eea:	d1f9      	bne.n	8004ee0 <_svfiprintf_r+0x50>
 8004eec:	ebba 0b04 	subs.w	fp, sl, r4
 8004ef0:	d00b      	beq.n	8004f0a <_svfiprintf_r+0x7a>
 8004ef2:	465b      	mov	r3, fp
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	4638      	mov	r0, r7
 8004efa:	f7ff ff6d 	bl	8004dd8 <__ssputs_r>
 8004efe:	3001      	adds	r0, #1
 8004f00:	f000 80aa 	beq.w	8005058 <_svfiprintf_r+0x1c8>
 8004f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f06:	445a      	add	r2, fp
 8004f08:	9209      	str	r2, [sp, #36]	; 0x24
 8004f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 80a2 	beq.w	8005058 <_svfiprintf_r+0x1c8>
 8004f14:	2300      	movs	r3, #0
 8004f16:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f1e:	f10a 0a01 	add.w	sl, sl, #1
 8004f22:	9304      	str	r3, [sp, #16]
 8004f24:	9307      	str	r3, [sp, #28]
 8004f26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f2a:	931a      	str	r3, [sp, #104]	; 0x68
 8004f2c:	4654      	mov	r4, sl
 8004f2e:	2205      	movs	r2, #5
 8004f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f34:	4851      	ldr	r0, [pc, #324]	; (800507c <_svfiprintf_r+0x1ec>)
 8004f36:	f7fb f95b 	bl	80001f0 <memchr>
 8004f3a:	9a04      	ldr	r2, [sp, #16]
 8004f3c:	b9d8      	cbnz	r0, 8004f76 <_svfiprintf_r+0xe6>
 8004f3e:	06d0      	lsls	r0, r2, #27
 8004f40:	bf44      	itt	mi
 8004f42:	2320      	movmi	r3, #32
 8004f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f48:	0711      	lsls	r1, r2, #28
 8004f4a:	bf44      	itt	mi
 8004f4c:	232b      	movmi	r3, #43	; 0x2b
 8004f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f52:	f89a 3000 	ldrb.w	r3, [sl]
 8004f56:	2b2a      	cmp	r3, #42	; 0x2a
 8004f58:	d015      	beq.n	8004f86 <_svfiprintf_r+0xf6>
 8004f5a:	9a07      	ldr	r2, [sp, #28]
 8004f5c:	4654      	mov	r4, sl
 8004f5e:	2000      	movs	r0, #0
 8004f60:	f04f 0c0a 	mov.w	ip, #10
 8004f64:	4621      	mov	r1, r4
 8004f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f6a:	3b30      	subs	r3, #48	; 0x30
 8004f6c:	2b09      	cmp	r3, #9
 8004f6e:	d94e      	bls.n	800500e <_svfiprintf_r+0x17e>
 8004f70:	b1b0      	cbz	r0, 8004fa0 <_svfiprintf_r+0x110>
 8004f72:	9207      	str	r2, [sp, #28]
 8004f74:	e014      	b.n	8004fa0 <_svfiprintf_r+0x110>
 8004f76:	eba0 0308 	sub.w	r3, r0, r8
 8004f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	9304      	str	r3, [sp, #16]
 8004f82:	46a2      	mov	sl, r4
 8004f84:	e7d2      	b.n	8004f2c <_svfiprintf_r+0x9c>
 8004f86:	9b03      	ldr	r3, [sp, #12]
 8004f88:	1d19      	adds	r1, r3, #4
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	9103      	str	r1, [sp, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	bfbb      	ittet	lt
 8004f92:	425b      	neglt	r3, r3
 8004f94:	f042 0202 	orrlt.w	r2, r2, #2
 8004f98:	9307      	strge	r3, [sp, #28]
 8004f9a:	9307      	strlt	r3, [sp, #28]
 8004f9c:	bfb8      	it	lt
 8004f9e:	9204      	strlt	r2, [sp, #16]
 8004fa0:	7823      	ldrb	r3, [r4, #0]
 8004fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8004fa4:	d10c      	bne.n	8004fc0 <_svfiprintf_r+0x130>
 8004fa6:	7863      	ldrb	r3, [r4, #1]
 8004fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8004faa:	d135      	bne.n	8005018 <_svfiprintf_r+0x188>
 8004fac:	9b03      	ldr	r3, [sp, #12]
 8004fae:	1d1a      	adds	r2, r3, #4
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	9203      	str	r2, [sp, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	bfb8      	it	lt
 8004fb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fbc:	3402      	adds	r4, #2
 8004fbe:	9305      	str	r3, [sp, #20]
 8004fc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800508c <_svfiprintf_r+0x1fc>
 8004fc4:	7821      	ldrb	r1, [r4, #0]
 8004fc6:	2203      	movs	r2, #3
 8004fc8:	4650      	mov	r0, sl
 8004fca:	f7fb f911 	bl	80001f0 <memchr>
 8004fce:	b140      	cbz	r0, 8004fe2 <_svfiprintf_r+0x152>
 8004fd0:	2340      	movs	r3, #64	; 0x40
 8004fd2:	eba0 000a 	sub.w	r0, r0, sl
 8004fd6:	fa03 f000 	lsl.w	r0, r3, r0
 8004fda:	9b04      	ldr	r3, [sp, #16]
 8004fdc:	4303      	orrs	r3, r0
 8004fde:	3401      	adds	r4, #1
 8004fe0:	9304      	str	r3, [sp, #16]
 8004fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fe6:	4826      	ldr	r0, [pc, #152]	; (8005080 <_svfiprintf_r+0x1f0>)
 8004fe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fec:	2206      	movs	r2, #6
 8004fee:	f7fb f8ff 	bl	80001f0 <memchr>
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	d038      	beq.n	8005068 <_svfiprintf_r+0x1d8>
 8004ff6:	4b23      	ldr	r3, [pc, #140]	; (8005084 <_svfiprintf_r+0x1f4>)
 8004ff8:	bb1b      	cbnz	r3, 8005042 <_svfiprintf_r+0x1b2>
 8004ffa:	9b03      	ldr	r3, [sp, #12]
 8004ffc:	3307      	adds	r3, #7
 8004ffe:	f023 0307 	bic.w	r3, r3, #7
 8005002:	3308      	adds	r3, #8
 8005004:	9303      	str	r3, [sp, #12]
 8005006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005008:	4433      	add	r3, r6
 800500a:	9309      	str	r3, [sp, #36]	; 0x24
 800500c:	e767      	b.n	8004ede <_svfiprintf_r+0x4e>
 800500e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005012:	460c      	mov	r4, r1
 8005014:	2001      	movs	r0, #1
 8005016:	e7a5      	b.n	8004f64 <_svfiprintf_r+0xd4>
 8005018:	2300      	movs	r3, #0
 800501a:	3401      	adds	r4, #1
 800501c:	9305      	str	r3, [sp, #20]
 800501e:	4619      	mov	r1, r3
 8005020:	f04f 0c0a 	mov.w	ip, #10
 8005024:	4620      	mov	r0, r4
 8005026:	f810 2b01 	ldrb.w	r2, [r0], #1
 800502a:	3a30      	subs	r2, #48	; 0x30
 800502c:	2a09      	cmp	r2, #9
 800502e:	d903      	bls.n	8005038 <_svfiprintf_r+0x1a8>
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0c5      	beq.n	8004fc0 <_svfiprintf_r+0x130>
 8005034:	9105      	str	r1, [sp, #20]
 8005036:	e7c3      	b.n	8004fc0 <_svfiprintf_r+0x130>
 8005038:	fb0c 2101 	mla	r1, ip, r1, r2
 800503c:	4604      	mov	r4, r0
 800503e:	2301      	movs	r3, #1
 8005040:	e7f0      	b.n	8005024 <_svfiprintf_r+0x194>
 8005042:	ab03      	add	r3, sp, #12
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	462a      	mov	r2, r5
 8005048:	4b0f      	ldr	r3, [pc, #60]	; (8005088 <_svfiprintf_r+0x1f8>)
 800504a:	a904      	add	r1, sp, #16
 800504c:	4638      	mov	r0, r7
 800504e:	f3af 8000 	nop.w
 8005052:	1c42      	adds	r2, r0, #1
 8005054:	4606      	mov	r6, r0
 8005056:	d1d6      	bne.n	8005006 <_svfiprintf_r+0x176>
 8005058:	89ab      	ldrh	r3, [r5, #12]
 800505a:	065b      	lsls	r3, r3, #25
 800505c:	f53f af2c 	bmi.w	8004eb8 <_svfiprintf_r+0x28>
 8005060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005062:	b01d      	add	sp, #116	; 0x74
 8005064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005068:	ab03      	add	r3, sp, #12
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	462a      	mov	r2, r5
 800506e:	4b06      	ldr	r3, [pc, #24]	; (8005088 <_svfiprintf_r+0x1f8>)
 8005070:	a904      	add	r1, sp, #16
 8005072:	4638      	mov	r0, r7
 8005074:	f000 f87a 	bl	800516c <_printf_i>
 8005078:	e7eb      	b.n	8005052 <_svfiprintf_r+0x1c2>
 800507a:	bf00      	nop
 800507c:	0800574c 	.word	0x0800574c
 8005080:	08005756 	.word	0x08005756
 8005084:	00000000 	.word	0x00000000
 8005088:	08004dd9 	.word	0x08004dd9
 800508c:	08005752 	.word	0x08005752

08005090 <_printf_common>:
 8005090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005094:	4616      	mov	r6, r2
 8005096:	4699      	mov	r9, r3
 8005098:	688a      	ldr	r2, [r1, #8]
 800509a:	690b      	ldr	r3, [r1, #16]
 800509c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050a0:	4293      	cmp	r3, r2
 80050a2:	bfb8      	it	lt
 80050a4:	4613      	movlt	r3, r2
 80050a6:	6033      	str	r3, [r6, #0]
 80050a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050ac:	4607      	mov	r7, r0
 80050ae:	460c      	mov	r4, r1
 80050b0:	b10a      	cbz	r2, 80050b6 <_printf_common+0x26>
 80050b2:	3301      	adds	r3, #1
 80050b4:	6033      	str	r3, [r6, #0]
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	0699      	lsls	r1, r3, #26
 80050ba:	bf42      	ittt	mi
 80050bc:	6833      	ldrmi	r3, [r6, #0]
 80050be:	3302      	addmi	r3, #2
 80050c0:	6033      	strmi	r3, [r6, #0]
 80050c2:	6825      	ldr	r5, [r4, #0]
 80050c4:	f015 0506 	ands.w	r5, r5, #6
 80050c8:	d106      	bne.n	80050d8 <_printf_common+0x48>
 80050ca:	f104 0a19 	add.w	sl, r4, #25
 80050ce:	68e3      	ldr	r3, [r4, #12]
 80050d0:	6832      	ldr	r2, [r6, #0]
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	42ab      	cmp	r3, r5
 80050d6:	dc26      	bgt.n	8005126 <_printf_common+0x96>
 80050d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050dc:	1e13      	subs	r3, r2, #0
 80050de:	6822      	ldr	r2, [r4, #0]
 80050e0:	bf18      	it	ne
 80050e2:	2301      	movne	r3, #1
 80050e4:	0692      	lsls	r2, r2, #26
 80050e6:	d42b      	bmi.n	8005140 <_printf_common+0xb0>
 80050e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050ec:	4649      	mov	r1, r9
 80050ee:	4638      	mov	r0, r7
 80050f0:	47c0      	blx	r8
 80050f2:	3001      	adds	r0, #1
 80050f4:	d01e      	beq.n	8005134 <_printf_common+0xa4>
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	68e5      	ldr	r5, [r4, #12]
 80050fa:	6832      	ldr	r2, [r6, #0]
 80050fc:	f003 0306 	and.w	r3, r3, #6
 8005100:	2b04      	cmp	r3, #4
 8005102:	bf08      	it	eq
 8005104:	1aad      	subeq	r5, r5, r2
 8005106:	68a3      	ldr	r3, [r4, #8]
 8005108:	6922      	ldr	r2, [r4, #16]
 800510a:	bf0c      	ite	eq
 800510c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005110:	2500      	movne	r5, #0
 8005112:	4293      	cmp	r3, r2
 8005114:	bfc4      	itt	gt
 8005116:	1a9b      	subgt	r3, r3, r2
 8005118:	18ed      	addgt	r5, r5, r3
 800511a:	2600      	movs	r6, #0
 800511c:	341a      	adds	r4, #26
 800511e:	42b5      	cmp	r5, r6
 8005120:	d11a      	bne.n	8005158 <_printf_common+0xc8>
 8005122:	2000      	movs	r0, #0
 8005124:	e008      	b.n	8005138 <_printf_common+0xa8>
 8005126:	2301      	movs	r3, #1
 8005128:	4652      	mov	r2, sl
 800512a:	4649      	mov	r1, r9
 800512c:	4638      	mov	r0, r7
 800512e:	47c0      	blx	r8
 8005130:	3001      	adds	r0, #1
 8005132:	d103      	bne.n	800513c <_printf_common+0xac>
 8005134:	f04f 30ff 	mov.w	r0, #4294967295
 8005138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513c:	3501      	adds	r5, #1
 800513e:	e7c6      	b.n	80050ce <_printf_common+0x3e>
 8005140:	18e1      	adds	r1, r4, r3
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	2030      	movs	r0, #48	; 0x30
 8005146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800514a:	4422      	add	r2, r4
 800514c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005154:	3302      	adds	r3, #2
 8005156:	e7c7      	b.n	80050e8 <_printf_common+0x58>
 8005158:	2301      	movs	r3, #1
 800515a:	4622      	mov	r2, r4
 800515c:	4649      	mov	r1, r9
 800515e:	4638      	mov	r0, r7
 8005160:	47c0      	blx	r8
 8005162:	3001      	adds	r0, #1
 8005164:	d0e6      	beq.n	8005134 <_printf_common+0xa4>
 8005166:	3601      	adds	r6, #1
 8005168:	e7d9      	b.n	800511e <_printf_common+0x8e>
	...

0800516c <_printf_i>:
 800516c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005170:	7e0f      	ldrb	r7, [r1, #24]
 8005172:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005174:	2f78      	cmp	r7, #120	; 0x78
 8005176:	4691      	mov	r9, r2
 8005178:	4680      	mov	r8, r0
 800517a:	460c      	mov	r4, r1
 800517c:	469a      	mov	sl, r3
 800517e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005182:	d807      	bhi.n	8005194 <_printf_i+0x28>
 8005184:	2f62      	cmp	r7, #98	; 0x62
 8005186:	d80a      	bhi.n	800519e <_printf_i+0x32>
 8005188:	2f00      	cmp	r7, #0
 800518a:	f000 80d8 	beq.w	800533e <_printf_i+0x1d2>
 800518e:	2f58      	cmp	r7, #88	; 0x58
 8005190:	f000 80a3 	beq.w	80052da <_printf_i+0x16e>
 8005194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800519c:	e03a      	b.n	8005214 <_printf_i+0xa8>
 800519e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051a2:	2b15      	cmp	r3, #21
 80051a4:	d8f6      	bhi.n	8005194 <_printf_i+0x28>
 80051a6:	a101      	add	r1, pc, #4	; (adr r1, 80051ac <_printf_i+0x40>)
 80051a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051ac:	08005205 	.word	0x08005205
 80051b0:	08005219 	.word	0x08005219
 80051b4:	08005195 	.word	0x08005195
 80051b8:	08005195 	.word	0x08005195
 80051bc:	08005195 	.word	0x08005195
 80051c0:	08005195 	.word	0x08005195
 80051c4:	08005219 	.word	0x08005219
 80051c8:	08005195 	.word	0x08005195
 80051cc:	08005195 	.word	0x08005195
 80051d0:	08005195 	.word	0x08005195
 80051d4:	08005195 	.word	0x08005195
 80051d8:	08005325 	.word	0x08005325
 80051dc:	08005249 	.word	0x08005249
 80051e0:	08005307 	.word	0x08005307
 80051e4:	08005195 	.word	0x08005195
 80051e8:	08005195 	.word	0x08005195
 80051ec:	08005347 	.word	0x08005347
 80051f0:	08005195 	.word	0x08005195
 80051f4:	08005249 	.word	0x08005249
 80051f8:	08005195 	.word	0x08005195
 80051fc:	08005195 	.word	0x08005195
 8005200:	0800530f 	.word	0x0800530f
 8005204:	682b      	ldr	r3, [r5, #0]
 8005206:	1d1a      	adds	r2, r3, #4
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	602a      	str	r2, [r5, #0]
 800520c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005214:	2301      	movs	r3, #1
 8005216:	e0a3      	b.n	8005360 <_printf_i+0x1f4>
 8005218:	6820      	ldr	r0, [r4, #0]
 800521a:	6829      	ldr	r1, [r5, #0]
 800521c:	0606      	lsls	r6, r0, #24
 800521e:	f101 0304 	add.w	r3, r1, #4
 8005222:	d50a      	bpl.n	800523a <_printf_i+0xce>
 8005224:	680e      	ldr	r6, [r1, #0]
 8005226:	602b      	str	r3, [r5, #0]
 8005228:	2e00      	cmp	r6, #0
 800522a:	da03      	bge.n	8005234 <_printf_i+0xc8>
 800522c:	232d      	movs	r3, #45	; 0x2d
 800522e:	4276      	negs	r6, r6
 8005230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005234:	485e      	ldr	r0, [pc, #376]	; (80053b0 <_printf_i+0x244>)
 8005236:	230a      	movs	r3, #10
 8005238:	e019      	b.n	800526e <_printf_i+0x102>
 800523a:	680e      	ldr	r6, [r1, #0]
 800523c:	602b      	str	r3, [r5, #0]
 800523e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005242:	bf18      	it	ne
 8005244:	b236      	sxthne	r6, r6
 8005246:	e7ef      	b.n	8005228 <_printf_i+0xbc>
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	6820      	ldr	r0, [r4, #0]
 800524c:	1d19      	adds	r1, r3, #4
 800524e:	6029      	str	r1, [r5, #0]
 8005250:	0601      	lsls	r1, r0, #24
 8005252:	d501      	bpl.n	8005258 <_printf_i+0xec>
 8005254:	681e      	ldr	r6, [r3, #0]
 8005256:	e002      	b.n	800525e <_printf_i+0xf2>
 8005258:	0646      	lsls	r6, r0, #25
 800525a:	d5fb      	bpl.n	8005254 <_printf_i+0xe8>
 800525c:	881e      	ldrh	r6, [r3, #0]
 800525e:	4854      	ldr	r0, [pc, #336]	; (80053b0 <_printf_i+0x244>)
 8005260:	2f6f      	cmp	r7, #111	; 0x6f
 8005262:	bf0c      	ite	eq
 8005264:	2308      	moveq	r3, #8
 8005266:	230a      	movne	r3, #10
 8005268:	2100      	movs	r1, #0
 800526a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800526e:	6865      	ldr	r5, [r4, #4]
 8005270:	60a5      	str	r5, [r4, #8]
 8005272:	2d00      	cmp	r5, #0
 8005274:	bfa2      	ittt	ge
 8005276:	6821      	ldrge	r1, [r4, #0]
 8005278:	f021 0104 	bicge.w	r1, r1, #4
 800527c:	6021      	strge	r1, [r4, #0]
 800527e:	b90e      	cbnz	r6, 8005284 <_printf_i+0x118>
 8005280:	2d00      	cmp	r5, #0
 8005282:	d04d      	beq.n	8005320 <_printf_i+0x1b4>
 8005284:	4615      	mov	r5, r2
 8005286:	fbb6 f1f3 	udiv	r1, r6, r3
 800528a:	fb03 6711 	mls	r7, r3, r1, r6
 800528e:	5dc7      	ldrb	r7, [r0, r7]
 8005290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005294:	4637      	mov	r7, r6
 8005296:	42bb      	cmp	r3, r7
 8005298:	460e      	mov	r6, r1
 800529a:	d9f4      	bls.n	8005286 <_printf_i+0x11a>
 800529c:	2b08      	cmp	r3, #8
 800529e:	d10b      	bne.n	80052b8 <_printf_i+0x14c>
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	07de      	lsls	r6, r3, #31
 80052a4:	d508      	bpl.n	80052b8 <_printf_i+0x14c>
 80052a6:	6923      	ldr	r3, [r4, #16]
 80052a8:	6861      	ldr	r1, [r4, #4]
 80052aa:	4299      	cmp	r1, r3
 80052ac:	bfde      	ittt	le
 80052ae:	2330      	movle	r3, #48	; 0x30
 80052b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052b8:	1b52      	subs	r2, r2, r5
 80052ba:	6122      	str	r2, [r4, #16]
 80052bc:	f8cd a000 	str.w	sl, [sp]
 80052c0:	464b      	mov	r3, r9
 80052c2:	aa03      	add	r2, sp, #12
 80052c4:	4621      	mov	r1, r4
 80052c6:	4640      	mov	r0, r8
 80052c8:	f7ff fee2 	bl	8005090 <_printf_common>
 80052cc:	3001      	adds	r0, #1
 80052ce:	d14c      	bne.n	800536a <_printf_i+0x1fe>
 80052d0:	f04f 30ff 	mov.w	r0, #4294967295
 80052d4:	b004      	add	sp, #16
 80052d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052da:	4835      	ldr	r0, [pc, #212]	; (80053b0 <_printf_i+0x244>)
 80052dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052e0:	6829      	ldr	r1, [r5, #0]
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80052e8:	6029      	str	r1, [r5, #0]
 80052ea:	061d      	lsls	r5, r3, #24
 80052ec:	d514      	bpl.n	8005318 <_printf_i+0x1ac>
 80052ee:	07df      	lsls	r7, r3, #31
 80052f0:	bf44      	itt	mi
 80052f2:	f043 0320 	orrmi.w	r3, r3, #32
 80052f6:	6023      	strmi	r3, [r4, #0]
 80052f8:	b91e      	cbnz	r6, 8005302 <_printf_i+0x196>
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	f023 0320 	bic.w	r3, r3, #32
 8005300:	6023      	str	r3, [r4, #0]
 8005302:	2310      	movs	r3, #16
 8005304:	e7b0      	b.n	8005268 <_printf_i+0xfc>
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	f043 0320 	orr.w	r3, r3, #32
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	2378      	movs	r3, #120	; 0x78
 8005310:	4828      	ldr	r0, [pc, #160]	; (80053b4 <_printf_i+0x248>)
 8005312:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005316:	e7e3      	b.n	80052e0 <_printf_i+0x174>
 8005318:	0659      	lsls	r1, r3, #25
 800531a:	bf48      	it	mi
 800531c:	b2b6      	uxthmi	r6, r6
 800531e:	e7e6      	b.n	80052ee <_printf_i+0x182>
 8005320:	4615      	mov	r5, r2
 8005322:	e7bb      	b.n	800529c <_printf_i+0x130>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	6826      	ldr	r6, [r4, #0]
 8005328:	6961      	ldr	r1, [r4, #20]
 800532a:	1d18      	adds	r0, r3, #4
 800532c:	6028      	str	r0, [r5, #0]
 800532e:	0635      	lsls	r5, r6, #24
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	d501      	bpl.n	8005338 <_printf_i+0x1cc>
 8005334:	6019      	str	r1, [r3, #0]
 8005336:	e002      	b.n	800533e <_printf_i+0x1d2>
 8005338:	0670      	lsls	r0, r6, #25
 800533a:	d5fb      	bpl.n	8005334 <_printf_i+0x1c8>
 800533c:	8019      	strh	r1, [r3, #0]
 800533e:	2300      	movs	r3, #0
 8005340:	6123      	str	r3, [r4, #16]
 8005342:	4615      	mov	r5, r2
 8005344:	e7ba      	b.n	80052bc <_printf_i+0x150>
 8005346:	682b      	ldr	r3, [r5, #0]
 8005348:	1d1a      	adds	r2, r3, #4
 800534a:	602a      	str	r2, [r5, #0]
 800534c:	681d      	ldr	r5, [r3, #0]
 800534e:	6862      	ldr	r2, [r4, #4]
 8005350:	2100      	movs	r1, #0
 8005352:	4628      	mov	r0, r5
 8005354:	f7fa ff4c 	bl	80001f0 <memchr>
 8005358:	b108      	cbz	r0, 800535e <_printf_i+0x1f2>
 800535a:	1b40      	subs	r0, r0, r5
 800535c:	6060      	str	r0, [r4, #4]
 800535e:	6863      	ldr	r3, [r4, #4]
 8005360:	6123      	str	r3, [r4, #16]
 8005362:	2300      	movs	r3, #0
 8005364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005368:	e7a8      	b.n	80052bc <_printf_i+0x150>
 800536a:	6923      	ldr	r3, [r4, #16]
 800536c:	462a      	mov	r2, r5
 800536e:	4649      	mov	r1, r9
 8005370:	4640      	mov	r0, r8
 8005372:	47d0      	blx	sl
 8005374:	3001      	adds	r0, #1
 8005376:	d0ab      	beq.n	80052d0 <_printf_i+0x164>
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	079b      	lsls	r3, r3, #30
 800537c:	d413      	bmi.n	80053a6 <_printf_i+0x23a>
 800537e:	68e0      	ldr	r0, [r4, #12]
 8005380:	9b03      	ldr	r3, [sp, #12]
 8005382:	4298      	cmp	r0, r3
 8005384:	bfb8      	it	lt
 8005386:	4618      	movlt	r0, r3
 8005388:	e7a4      	b.n	80052d4 <_printf_i+0x168>
 800538a:	2301      	movs	r3, #1
 800538c:	4632      	mov	r2, r6
 800538e:	4649      	mov	r1, r9
 8005390:	4640      	mov	r0, r8
 8005392:	47d0      	blx	sl
 8005394:	3001      	adds	r0, #1
 8005396:	d09b      	beq.n	80052d0 <_printf_i+0x164>
 8005398:	3501      	adds	r5, #1
 800539a:	68e3      	ldr	r3, [r4, #12]
 800539c:	9903      	ldr	r1, [sp, #12]
 800539e:	1a5b      	subs	r3, r3, r1
 80053a0:	42ab      	cmp	r3, r5
 80053a2:	dcf2      	bgt.n	800538a <_printf_i+0x21e>
 80053a4:	e7eb      	b.n	800537e <_printf_i+0x212>
 80053a6:	2500      	movs	r5, #0
 80053a8:	f104 0619 	add.w	r6, r4, #25
 80053ac:	e7f5      	b.n	800539a <_printf_i+0x22e>
 80053ae:	bf00      	nop
 80053b0:	0800575d 	.word	0x0800575d
 80053b4:	0800576e 	.word	0x0800576e

080053b8 <memmove>:
 80053b8:	4288      	cmp	r0, r1
 80053ba:	b510      	push	{r4, lr}
 80053bc:	eb01 0402 	add.w	r4, r1, r2
 80053c0:	d902      	bls.n	80053c8 <memmove+0x10>
 80053c2:	4284      	cmp	r4, r0
 80053c4:	4623      	mov	r3, r4
 80053c6:	d807      	bhi.n	80053d8 <memmove+0x20>
 80053c8:	1e43      	subs	r3, r0, #1
 80053ca:	42a1      	cmp	r1, r4
 80053cc:	d008      	beq.n	80053e0 <memmove+0x28>
 80053ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053d6:	e7f8      	b.n	80053ca <memmove+0x12>
 80053d8:	4402      	add	r2, r0
 80053da:	4601      	mov	r1, r0
 80053dc:	428a      	cmp	r2, r1
 80053de:	d100      	bne.n	80053e2 <memmove+0x2a>
 80053e0:	bd10      	pop	{r4, pc}
 80053e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053ea:	e7f7      	b.n	80053dc <memmove+0x24>

080053ec <_free_r>:
 80053ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ee:	2900      	cmp	r1, #0
 80053f0:	d044      	beq.n	800547c <_free_r+0x90>
 80053f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053f6:	9001      	str	r0, [sp, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f1a1 0404 	sub.w	r4, r1, #4
 80053fe:	bfb8      	it	lt
 8005400:	18e4      	addlt	r4, r4, r3
 8005402:	f000 f913 	bl	800562c <__malloc_lock>
 8005406:	4a1e      	ldr	r2, [pc, #120]	; (8005480 <_free_r+0x94>)
 8005408:	9801      	ldr	r0, [sp, #4]
 800540a:	6813      	ldr	r3, [r2, #0]
 800540c:	b933      	cbnz	r3, 800541c <_free_r+0x30>
 800540e:	6063      	str	r3, [r4, #4]
 8005410:	6014      	str	r4, [r2, #0]
 8005412:	b003      	add	sp, #12
 8005414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005418:	f000 b90e 	b.w	8005638 <__malloc_unlock>
 800541c:	42a3      	cmp	r3, r4
 800541e:	d908      	bls.n	8005432 <_free_r+0x46>
 8005420:	6825      	ldr	r5, [r4, #0]
 8005422:	1961      	adds	r1, r4, r5
 8005424:	428b      	cmp	r3, r1
 8005426:	bf01      	itttt	eq
 8005428:	6819      	ldreq	r1, [r3, #0]
 800542a:	685b      	ldreq	r3, [r3, #4]
 800542c:	1949      	addeq	r1, r1, r5
 800542e:	6021      	streq	r1, [r4, #0]
 8005430:	e7ed      	b.n	800540e <_free_r+0x22>
 8005432:	461a      	mov	r2, r3
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	b10b      	cbz	r3, 800543c <_free_r+0x50>
 8005438:	42a3      	cmp	r3, r4
 800543a:	d9fa      	bls.n	8005432 <_free_r+0x46>
 800543c:	6811      	ldr	r1, [r2, #0]
 800543e:	1855      	adds	r5, r2, r1
 8005440:	42a5      	cmp	r5, r4
 8005442:	d10b      	bne.n	800545c <_free_r+0x70>
 8005444:	6824      	ldr	r4, [r4, #0]
 8005446:	4421      	add	r1, r4
 8005448:	1854      	adds	r4, r2, r1
 800544a:	42a3      	cmp	r3, r4
 800544c:	6011      	str	r1, [r2, #0]
 800544e:	d1e0      	bne.n	8005412 <_free_r+0x26>
 8005450:	681c      	ldr	r4, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	6053      	str	r3, [r2, #4]
 8005456:	4421      	add	r1, r4
 8005458:	6011      	str	r1, [r2, #0]
 800545a:	e7da      	b.n	8005412 <_free_r+0x26>
 800545c:	d902      	bls.n	8005464 <_free_r+0x78>
 800545e:	230c      	movs	r3, #12
 8005460:	6003      	str	r3, [r0, #0]
 8005462:	e7d6      	b.n	8005412 <_free_r+0x26>
 8005464:	6825      	ldr	r5, [r4, #0]
 8005466:	1961      	adds	r1, r4, r5
 8005468:	428b      	cmp	r3, r1
 800546a:	bf04      	itt	eq
 800546c:	6819      	ldreq	r1, [r3, #0]
 800546e:	685b      	ldreq	r3, [r3, #4]
 8005470:	6063      	str	r3, [r4, #4]
 8005472:	bf04      	itt	eq
 8005474:	1949      	addeq	r1, r1, r5
 8005476:	6021      	streq	r1, [r4, #0]
 8005478:	6054      	str	r4, [r2, #4]
 800547a:	e7ca      	b.n	8005412 <_free_r+0x26>
 800547c:	b003      	add	sp, #12
 800547e:	bd30      	pop	{r4, r5, pc}
 8005480:	20012f54 	.word	0x20012f54

08005484 <sbrk_aligned>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	4e0e      	ldr	r6, [pc, #56]	; (80054c0 <sbrk_aligned+0x3c>)
 8005488:	460c      	mov	r4, r1
 800548a:	6831      	ldr	r1, [r6, #0]
 800548c:	4605      	mov	r5, r0
 800548e:	b911      	cbnz	r1, 8005496 <sbrk_aligned+0x12>
 8005490:	f000 f8bc 	bl	800560c <_sbrk_r>
 8005494:	6030      	str	r0, [r6, #0]
 8005496:	4621      	mov	r1, r4
 8005498:	4628      	mov	r0, r5
 800549a:	f000 f8b7 	bl	800560c <_sbrk_r>
 800549e:	1c43      	adds	r3, r0, #1
 80054a0:	d00a      	beq.n	80054b8 <sbrk_aligned+0x34>
 80054a2:	1cc4      	adds	r4, r0, #3
 80054a4:	f024 0403 	bic.w	r4, r4, #3
 80054a8:	42a0      	cmp	r0, r4
 80054aa:	d007      	beq.n	80054bc <sbrk_aligned+0x38>
 80054ac:	1a21      	subs	r1, r4, r0
 80054ae:	4628      	mov	r0, r5
 80054b0:	f000 f8ac 	bl	800560c <_sbrk_r>
 80054b4:	3001      	adds	r0, #1
 80054b6:	d101      	bne.n	80054bc <sbrk_aligned+0x38>
 80054b8:	f04f 34ff 	mov.w	r4, #4294967295
 80054bc:	4620      	mov	r0, r4
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	20012f58 	.word	0x20012f58

080054c4 <_malloc_r>:
 80054c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c8:	1ccd      	adds	r5, r1, #3
 80054ca:	f025 0503 	bic.w	r5, r5, #3
 80054ce:	3508      	adds	r5, #8
 80054d0:	2d0c      	cmp	r5, #12
 80054d2:	bf38      	it	cc
 80054d4:	250c      	movcc	r5, #12
 80054d6:	2d00      	cmp	r5, #0
 80054d8:	4607      	mov	r7, r0
 80054da:	db01      	blt.n	80054e0 <_malloc_r+0x1c>
 80054dc:	42a9      	cmp	r1, r5
 80054de:	d905      	bls.n	80054ec <_malloc_r+0x28>
 80054e0:	230c      	movs	r3, #12
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	2600      	movs	r6, #0
 80054e6:	4630      	mov	r0, r6
 80054e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054ec:	4e2e      	ldr	r6, [pc, #184]	; (80055a8 <_malloc_r+0xe4>)
 80054ee:	f000 f89d 	bl	800562c <__malloc_lock>
 80054f2:	6833      	ldr	r3, [r6, #0]
 80054f4:	461c      	mov	r4, r3
 80054f6:	bb34      	cbnz	r4, 8005546 <_malloc_r+0x82>
 80054f8:	4629      	mov	r1, r5
 80054fa:	4638      	mov	r0, r7
 80054fc:	f7ff ffc2 	bl	8005484 <sbrk_aligned>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	4604      	mov	r4, r0
 8005504:	d14d      	bne.n	80055a2 <_malloc_r+0xde>
 8005506:	6834      	ldr	r4, [r6, #0]
 8005508:	4626      	mov	r6, r4
 800550a:	2e00      	cmp	r6, #0
 800550c:	d140      	bne.n	8005590 <_malloc_r+0xcc>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	4631      	mov	r1, r6
 8005512:	4638      	mov	r0, r7
 8005514:	eb04 0803 	add.w	r8, r4, r3
 8005518:	f000 f878 	bl	800560c <_sbrk_r>
 800551c:	4580      	cmp	r8, r0
 800551e:	d13a      	bne.n	8005596 <_malloc_r+0xd2>
 8005520:	6821      	ldr	r1, [r4, #0]
 8005522:	3503      	adds	r5, #3
 8005524:	1a6d      	subs	r5, r5, r1
 8005526:	f025 0503 	bic.w	r5, r5, #3
 800552a:	3508      	adds	r5, #8
 800552c:	2d0c      	cmp	r5, #12
 800552e:	bf38      	it	cc
 8005530:	250c      	movcc	r5, #12
 8005532:	4629      	mov	r1, r5
 8005534:	4638      	mov	r0, r7
 8005536:	f7ff ffa5 	bl	8005484 <sbrk_aligned>
 800553a:	3001      	adds	r0, #1
 800553c:	d02b      	beq.n	8005596 <_malloc_r+0xd2>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	442b      	add	r3, r5
 8005542:	6023      	str	r3, [r4, #0]
 8005544:	e00e      	b.n	8005564 <_malloc_r+0xa0>
 8005546:	6822      	ldr	r2, [r4, #0]
 8005548:	1b52      	subs	r2, r2, r5
 800554a:	d41e      	bmi.n	800558a <_malloc_r+0xc6>
 800554c:	2a0b      	cmp	r2, #11
 800554e:	d916      	bls.n	800557e <_malloc_r+0xba>
 8005550:	1961      	adds	r1, r4, r5
 8005552:	42a3      	cmp	r3, r4
 8005554:	6025      	str	r5, [r4, #0]
 8005556:	bf18      	it	ne
 8005558:	6059      	strne	r1, [r3, #4]
 800555a:	6863      	ldr	r3, [r4, #4]
 800555c:	bf08      	it	eq
 800555e:	6031      	streq	r1, [r6, #0]
 8005560:	5162      	str	r2, [r4, r5]
 8005562:	604b      	str	r3, [r1, #4]
 8005564:	4638      	mov	r0, r7
 8005566:	f104 060b 	add.w	r6, r4, #11
 800556a:	f000 f865 	bl	8005638 <__malloc_unlock>
 800556e:	f026 0607 	bic.w	r6, r6, #7
 8005572:	1d23      	adds	r3, r4, #4
 8005574:	1af2      	subs	r2, r6, r3
 8005576:	d0b6      	beq.n	80054e6 <_malloc_r+0x22>
 8005578:	1b9b      	subs	r3, r3, r6
 800557a:	50a3      	str	r3, [r4, r2]
 800557c:	e7b3      	b.n	80054e6 <_malloc_r+0x22>
 800557e:	6862      	ldr	r2, [r4, #4]
 8005580:	42a3      	cmp	r3, r4
 8005582:	bf0c      	ite	eq
 8005584:	6032      	streq	r2, [r6, #0]
 8005586:	605a      	strne	r2, [r3, #4]
 8005588:	e7ec      	b.n	8005564 <_malloc_r+0xa0>
 800558a:	4623      	mov	r3, r4
 800558c:	6864      	ldr	r4, [r4, #4]
 800558e:	e7b2      	b.n	80054f6 <_malloc_r+0x32>
 8005590:	4634      	mov	r4, r6
 8005592:	6876      	ldr	r6, [r6, #4]
 8005594:	e7b9      	b.n	800550a <_malloc_r+0x46>
 8005596:	230c      	movs	r3, #12
 8005598:	603b      	str	r3, [r7, #0]
 800559a:	4638      	mov	r0, r7
 800559c:	f000 f84c 	bl	8005638 <__malloc_unlock>
 80055a0:	e7a1      	b.n	80054e6 <_malloc_r+0x22>
 80055a2:	6025      	str	r5, [r4, #0]
 80055a4:	e7de      	b.n	8005564 <_malloc_r+0xa0>
 80055a6:	bf00      	nop
 80055a8:	20012f54 	.word	0x20012f54

080055ac <_realloc_r>:
 80055ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055b0:	4680      	mov	r8, r0
 80055b2:	4614      	mov	r4, r2
 80055b4:	460e      	mov	r6, r1
 80055b6:	b921      	cbnz	r1, 80055c2 <_realloc_r+0x16>
 80055b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055bc:	4611      	mov	r1, r2
 80055be:	f7ff bf81 	b.w	80054c4 <_malloc_r>
 80055c2:	b92a      	cbnz	r2, 80055d0 <_realloc_r+0x24>
 80055c4:	f7ff ff12 	bl	80053ec <_free_r>
 80055c8:	4625      	mov	r5, r4
 80055ca:	4628      	mov	r0, r5
 80055cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055d0:	f000 f838 	bl	8005644 <_malloc_usable_size_r>
 80055d4:	4284      	cmp	r4, r0
 80055d6:	4607      	mov	r7, r0
 80055d8:	d802      	bhi.n	80055e0 <_realloc_r+0x34>
 80055da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055de:	d812      	bhi.n	8005606 <_realloc_r+0x5a>
 80055e0:	4621      	mov	r1, r4
 80055e2:	4640      	mov	r0, r8
 80055e4:	f7ff ff6e 	bl	80054c4 <_malloc_r>
 80055e8:	4605      	mov	r5, r0
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d0ed      	beq.n	80055ca <_realloc_r+0x1e>
 80055ee:	42bc      	cmp	r4, r7
 80055f0:	4622      	mov	r2, r4
 80055f2:	4631      	mov	r1, r6
 80055f4:	bf28      	it	cs
 80055f6:	463a      	movcs	r2, r7
 80055f8:	f7ff fbb8 	bl	8004d6c <memcpy>
 80055fc:	4631      	mov	r1, r6
 80055fe:	4640      	mov	r0, r8
 8005600:	f7ff fef4 	bl	80053ec <_free_r>
 8005604:	e7e1      	b.n	80055ca <_realloc_r+0x1e>
 8005606:	4635      	mov	r5, r6
 8005608:	e7df      	b.n	80055ca <_realloc_r+0x1e>
	...

0800560c <_sbrk_r>:
 800560c:	b538      	push	{r3, r4, r5, lr}
 800560e:	4d06      	ldr	r5, [pc, #24]	; (8005628 <_sbrk_r+0x1c>)
 8005610:	2300      	movs	r3, #0
 8005612:	4604      	mov	r4, r0
 8005614:	4608      	mov	r0, r1
 8005616:	602b      	str	r3, [r5, #0]
 8005618:	f7fb fc44 	bl	8000ea4 <_sbrk>
 800561c:	1c43      	adds	r3, r0, #1
 800561e:	d102      	bne.n	8005626 <_sbrk_r+0x1a>
 8005620:	682b      	ldr	r3, [r5, #0]
 8005622:	b103      	cbz	r3, 8005626 <_sbrk_r+0x1a>
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	bd38      	pop	{r3, r4, r5, pc}
 8005628:	20012f5c 	.word	0x20012f5c

0800562c <__malloc_lock>:
 800562c:	4801      	ldr	r0, [pc, #4]	; (8005634 <__malloc_lock+0x8>)
 800562e:	f000 b811 	b.w	8005654 <__retarget_lock_acquire_recursive>
 8005632:	bf00      	nop
 8005634:	20012f60 	.word	0x20012f60

08005638 <__malloc_unlock>:
 8005638:	4801      	ldr	r0, [pc, #4]	; (8005640 <__malloc_unlock+0x8>)
 800563a:	f000 b80c 	b.w	8005656 <__retarget_lock_release_recursive>
 800563e:	bf00      	nop
 8005640:	20012f60 	.word	0x20012f60

08005644 <_malloc_usable_size_r>:
 8005644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005648:	1f18      	subs	r0, r3, #4
 800564a:	2b00      	cmp	r3, #0
 800564c:	bfbc      	itt	lt
 800564e:	580b      	ldrlt	r3, [r1, r0]
 8005650:	18c0      	addlt	r0, r0, r3
 8005652:	4770      	bx	lr

08005654 <__retarget_lock_acquire_recursive>:
 8005654:	4770      	bx	lr

08005656 <__retarget_lock_release_recursive>:
 8005656:	4770      	bx	lr

08005658 <_init>:
 8005658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565a:	bf00      	nop
 800565c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565e:	bc08      	pop	{r3}
 8005660:	469e      	mov	lr, r3
 8005662:	4770      	bx	lr

08005664 <_fini>:
 8005664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005666:	bf00      	nop
 8005668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566a:	bc08      	pop	{r3}
 800566c:	469e      	mov	lr, r3
 800566e:	4770      	bx	lr
