
05Led_Notify_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006000  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  080061a0  080061a0  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800636c  0800636c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800636c  0800636c  0001636c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006374  08006374  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006374  08006374  00016374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006378  08006378  00016378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800637c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014420  20000014  08006390  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014434  08006390  00024434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dbb  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027fa  00000000  00000000  00031dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00034600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  000356c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c78  00000000  00000000  00036638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ff0  00000000  00000000  0004e2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098932  00000000  00000000  000602a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8bd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045d8  00000000  00000000  000f8c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006188 	.word	0x08006188

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08006188 	.word	0x08006188

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012e60 	.word	0x20012e60

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
TaskHandle_t task4_handle;

TaskHandle_t volatile next_task_handle = NULL;

int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af02      	add	r7, sp, #8
	BaseType_t status;

	HAL_Init();
 800057e:	f000 fc27 	bl	8000dd0 <HAL_Init>

	SystemClock_Config();
 8000582:	f000 f967 	bl	8000854 <SystemClock_Config>

	MX_GPIO_Init();
 8000586:	f000 f9cf 	bl	8000928 <MX_GPIO_Init>

	//enable CYCCNT register
	DWT_CTRL |= (1 << 0);
 800058a:	4b3a      	ldr	r3, [pc, #232]	; (8000674 <main+0xfc>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a39      	ldr	r2, [pc, #228]	; (8000674 <main+0xfc>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6013      	str	r3, [r2, #0]

//	SEGGER_UART_init(500000);

	SEGGER_SYSVIEW_Conf();
 8000596:	f003 fc55 	bl	8003e44 <SEGGER_SYSVIEW_Conf>

	SEGGER_SYSVIEW_Start();
 800059a:	f004 ffcb 	bl	8005534 <SEGGER_SYSVIEW_Start>

	status = xTaskCreate(led_green_handler, "Led1_Task", 200, NULL, 3, &task1_handle);
 800059e:	4b36      	ldr	r3, [pc, #216]	; (8000678 <main+0x100>)
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2303      	movs	r3, #3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2300      	movs	r3, #0
 80005a8:	22c8      	movs	r2, #200	; 0xc8
 80005aa:	4934      	ldr	r1, [pc, #208]	; (800067c <main+0x104>)
 80005ac:	4834      	ldr	r0, [pc, #208]	; (8000680 <main+0x108>)
 80005ae:	f001 feed 	bl	800238c <xTaskCreate>
 80005b2:	6178      	str	r0, [r7, #20]

	configASSERT(status == pdPASS);
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d00a      	beq.n	80005d0 <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005be:	f383 8811 	msr	BASEPRI, r3
 80005c2:	f3bf 8f6f 	isb	sy
 80005c6:	f3bf 8f4f 	dsb	sy
 80005ca:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005cc:	bf00      	nop
 80005ce:	e7fe      	b.n	80005ce <main+0x56>

	next_task_handle = task1_handle;
 80005d0:	4b29      	ldr	r3, [pc, #164]	; (8000678 <main+0x100>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a2b      	ldr	r2, [pc, #172]	; (8000684 <main+0x10c>)
 80005d6:	6013      	str	r3, [r2, #0]

	status = xTaskCreate(led_orange_handler, "Led2_Task", 200, NULL, 2, &task2_handle);
 80005d8:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <main+0x110>)
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	2302      	movs	r3, #2
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	2300      	movs	r3, #0
 80005e2:	22c8      	movs	r2, #200	; 0xc8
 80005e4:	4929      	ldr	r1, [pc, #164]	; (800068c <main+0x114>)
 80005e6:	482a      	ldr	r0, [pc, #168]	; (8000690 <main+0x118>)
 80005e8:	f001 fed0 	bl	800238c <xTaskCreate>
 80005ec:	6178      	str	r0, [r7, #20]

	configASSERT(status == pdPASS);
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d00a      	beq.n	800060a <main+0x92>
        __asm volatile
 80005f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f8:	f383 8811 	msr	BASEPRI, r3
 80005fc:	f3bf 8f6f 	isb	sy
 8000600:	f3bf 8f4f 	dsb	sy
 8000604:	60fb      	str	r3, [r7, #12]
    }
 8000606:	bf00      	nop
 8000608:	e7fe      	b.n	8000608 <main+0x90>

	status = xTaskCreate(led_red_handler, "Led3_Task", 200, NULL, 1, &task3_handle);
 800060a:	4b22      	ldr	r3, [pc, #136]	; (8000694 <main+0x11c>)
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2301      	movs	r3, #1
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	22c8      	movs	r2, #200	; 0xc8
 8000616:	4920      	ldr	r1, [pc, #128]	; (8000698 <main+0x120>)
 8000618:	4820      	ldr	r0, [pc, #128]	; (800069c <main+0x124>)
 800061a:	f001 feb7 	bl	800238c <xTaskCreate>
 800061e:	6178      	str	r0, [r7, #20]

	configASSERT(status == pdPASS);
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d00a      	beq.n	800063c <main+0xc4>
        __asm volatile
 8000626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800062a:	f383 8811 	msr	BASEPRI, r3
 800062e:	f3bf 8f6f 	isb	sy
 8000632:	f3bf 8f4f 	dsb	sy
 8000636:	60bb      	str	r3, [r7, #8]
    }
 8000638:	bf00      	nop
 800063a:	e7fe      	b.n	800063a <main+0xc2>

	status = xTaskCreate(button_handler, "Button_Task", 200, NULL, 4, &task4_handle);
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <main+0x128>)
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2304      	movs	r3, #4
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2300      	movs	r3, #0
 8000646:	22c8      	movs	r2, #200	; 0xc8
 8000648:	4916      	ldr	r1, [pc, #88]	; (80006a4 <main+0x12c>)
 800064a:	4817      	ldr	r0, [pc, #92]	; (80006a8 <main+0x130>)
 800064c:	f001 fe9e 	bl	800238c <xTaskCreate>
 8000650:	6178      	str	r0, [r7, #20]

	configASSERT(status == pdPASS);
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d00a      	beq.n	800066e <main+0xf6>
        __asm volatile
 8000658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065c:	f383 8811 	msr	BASEPRI, r3
 8000660:	f3bf 8f6f 	isb	sy
 8000664:	f3bf 8f4f 	dsb	sy
 8000668:	607b      	str	r3, [r7, #4]
    }
 800066a:	bf00      	nop
 800066c:	e7fe      	b.n	800066c <main+0xf4>

	//start the freeRTOS scheduler
	vTaskStartScheduler();
 800066e:	f002 f90d 	bl	800288c <vTaskStartScheduler>

  while (1)
 8000672:	e7fe      	b.n	8000672 <main+0xfa>
 8000674:	e0001000 	.word	0xe0001000
 8000678:	20000030 	.word	0x20000030
 800067c:	080061a0 	.word	0x080061a0
 8000680:	080006ad 	.word	0x080006ad
 8000684:	20000040 	.word	0x20000040
 8000688:	20000034 	.word	0x20000034
 800068c:	080061ac 	.word	0x080061ac
 8000690:	0800071d 	.word	0x0800071d
 8000694:	20000038 	.word	0x20000038
 8000698:	080061b8 	.word	0x080061b8
 800069c:	0800078d 	.word	0x0800078d
 80006a0:	2000003c 	.word	0x2000003c
 80006a4:	080061c4 	.word	0x080061c4
 80006a8:	08000805 	.word	0x08000805

080006ac <led_green_handler>:
}



static void led_green_handler(void* parameters)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	6078      	str	r0, [r7, #4]
	BaseType_t  status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80006b4:	4814      	ldr	r0, [pc, #80]	; (8000708 <led_green_handler+0x5c>)
 80006b6:	f005 fcad 	bl	8006014 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80006ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006be:	4813      	ldr	r0, [pc, #76]	; (800070c <led_green_handler+0x60>)
 80006c0:	f000 fe5f 	bl	8001382 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80006c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2300      	movs	r3, #0
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	2000      	movs	r0, #0
 80006d2:	f002 fc8d 	bl	8002ff0 <xTaskGenericNotifyWait>
 80006d6:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d1ea      	bne.n	80006b4 <led_green_handler+0x8>
		{
			vTaskSuspendAll();
 80006de:	f002 f931 	bl	8002944 <vTaskSuspendAll>
			next_task_handle = task2_handle;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <led_green_handler+0x64>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <led_green_handler+0x68>)
 80006e8:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 80006ea:	f002 f939 	bl	8002960 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <led_green_handler+0x60>)
 80006f6:	f000 fe2b 	bl	8001350 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green LED task");
 80006fa:	4807      	ldr	r0, [pc, #28]	; (8000718 <led_green_handler+0x6c>)
 80006fc:	f005 fc8a 	bl	8006014 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000700:	2000      	movs	r0, #0
 8000702:	f001 ffdd 	bl	80026c0 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000706:	e7d5      	b.n	80006b4 <led_green_handler+0x8>
 8000708:	080061d0 	.word	0x080061d0
 800070c:	40020c00 	.word	0x40020c00
 8000710:	20000034 	.word	0x20000034
 8000714:	20000040 	.word	0x20000040
 8000718:	080061e4 	.word	0x080061e4

0800071c <led_orange_handler>:
	}
}


static void led_orange_handler(void* parameters)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af02      	add	r7, sp, #8
 8000722:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000724:	4814      	ldr	r0, [pc, #80]	; (8000778 <led_orange_handler+0x5c>)
 8000726:	f005 fc75 	bl	8006014 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800072a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072e:	4813      	ldr	r0, [pc, #76]	; (800077c <led_orange_handler+0x60>)
 8000730:	f000 fe27 	bl	8001382 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000734:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2300      	movs	r3, #0
 800073c:	2200      	movs	r2, #0
 800073e:	2100      	movs	r1, #0
 8000740:	2000      	movs	r0, #0
 8000742:	f002 fc55 	bl	8002ff0 <xTaskGenericNotifyWait>
 8000746:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d1ea      	bne.n	8000724 <led_orange_handler+0x8>
		{
			vTaskSuspendAll();
 800074e:	f002 f8f9 	bl	8002944 <vTaskSuspendAll>
			next_task_handle = task3_handle;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <led_orange_handler+0x64>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a0b      	ldr	r2, [pc, #44]	; (8000784 <led_orange_handler+0x68>)
 8000758:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 800075a:	f002 f901 	bl	8002960 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <led_orange_handler+0x60>)
 8000766:	f000 fdf3 	bl	8001350 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete orange LED task");
 800076a:	4807      	ldr	r0, [pc, #28]	; (8000788 <led_orange_handler+0x6c>)
 800076c:	f005 fc52 	bl	8006014 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000770:	2000      	movs	r0, #0
 8000772:	f001 ffa5 	bl	80026c0 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000776:	e7d5      	b.n	8000724 <led_orange_handler+0x8>
 8000778:	080061fc 	.word	0x080061fc
 800077c:	40020c00 	.word	0x40020c00
 8000780:	20000038 	.word	0x20000038
 8000784:	20000040 	.word	0x20000040
 8000788:	08006210 	.word	0x08006210

0800078c <led_red_handler>:
	}
}


static void led_red_handler(void* parameters)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af02      	add	r7, sp, #8
 8000792:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000794:	4816      	ldr	r0, [pc, #88]	; (80007f0 <led_red_handler+0x64>)
 8000796:	f005 fc3d 	bl	8006014 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800079a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <led_red_handler+0x68>)
 80007a0:	f000 fdef 	bl	8001382 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 80007a4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2300      	movs	r3, #0
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	2000      	movs	r0, #0
 80007b2:	f002 fc1d 	bl	8002ff0 <xTaskGenericNotifyWait>
 80007b6:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d1ea      	bne.n	8000794 <led_red_handler+0x8>
		{
			vTaskSuspendAll();
 80007be:	f002 f8c1 	bl	8002944 <vTaskSuspendAll>
			next_task_handle = NULL;
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <led_red_handler+0x6c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 80007c8:	f002 f8ca 	bl	8002960 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <led_red_handler+0x68>)
 80007d4:	f000 fdbc 	bl	8001350 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete red LED task");
 80007d8:	4808      	ldr	r0, [pc, #32]	; (80007fc <led_red_handler+0x70>)
 80007da:	f005 fc1b 	bl	8006014 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(task4_handle);
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <led_red_handler+0x74>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 ff6c 	bl	80026c0 <vTaskDelete>
			vTaskDelete(NULL);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f001 ff69 	bl	80026c0 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80007ee:	e7d1      	b.n	8000794 <led_red_handler+0x8>
 80007f0:	08006228 	.word	0x08006228
 80007f4:	40020c00 	.word	0x40020c00
 80007f8:	20000040 	.word	0x20000040
 80007fc:	0800623c 	.word	0x0800623c
 8000800:	2000003c 	.word	0x2000003c

08000804 <button_handler>:
}



static void button_handler(void* parameters)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af02      	add	r7, sp, #8
 800080a:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000814:	2101      	movs	r1, #1
 8000816:	480d      	ldr	r0, [pc, #52]	; (800084c <button_handler+0x48>)
 8000818:	f000 fd82 	bl	8001320 <HAL_GPIO_ReadPin>
 800081c:	4603      	mov	r3, r0
 800081e:	73bb      	strb	r3, [r7, #14]

		if(btn_read)
 8000820:	7bbb      	ldrb	r3, [r7, #14]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d00b      	beq.n	800083e <button_handler+0x3a>
		{
			if(! prev_read)
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d108      	bne.n	800083e <button_handler+0x3a>
				xTaskNotify(next_task_handle,0,eNoAction);
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <button_handler+0x4c>)
 800082e:	6818      	ldr	r0, [r3, #0]
 8000830:	2300      	movs	r3, #0
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2300      	movs	r3, #0
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	f002 fc61 	bl	8003100 <xTaskGenericNotify>
		}
		prev_read = btn_read;
 800083e:	7bbb      	ldrb	r3, [r7, #14]
 8000840:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000842:	200a      	movs	r0, #10
 8000844:	f001 ffea 	bl	800281c <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000848:	e7e4      	b.n	8000814 <button_handler+0x10>
 800084a:	bf00      	nop
 800084c:	40020000 	.word	0x40020000
 8000850:	20000040 	.word	0x20000040

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	; 0x50
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0320 	add.w	r3, r7, #32
 800085e:	2230      	movs	r2, #48	; 0x30
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f005 fc88 	bl	8006178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	4b28      	ldr	r3, [pc, #160]	; (8000920 <SystemClock_Config+0xcc>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	4a27      	ldr	r2, [pc, #156]	; (8000920 <SystemClock_Config+0xcc>)
 8000882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000886:	6413      	str	r3, [r2, #64]	; 0x40
 8000888:	4b25      	ldr	r3, [pc, #148]	; (8000920 <SystemClock_Config+0xcc>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <SystemClock_Config+0xd0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a21      	ldr	r2, [pc, #132]	; (8000924 <SystemClock_Config+0xd0>)
 800089e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <SystemClock_Config+0xd0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b4:	2301      	movs	r3, #1
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b8:	2310      	movs	r3, #16
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008bc:	2302      	movs	r3, #2
 80008be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c0:	2300      	movs	r3, #0
 80008c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c4:	2308      	movs	r3, #8
 80008c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008c8:	23c0      	movs	r3, #192	; 0xc0
 80008ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008cc:	2304      	movs	r3, #4
 80008ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80008d0:	2308      	movs	r3, #8
 80008d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d4:	f107 0320 	add.w	r3, r7, #32
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fd6d 	bl	80013b8 <HAL_RCC_OscConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008e4:	f000 f990 	bl	8000c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e8:	230f      	movs	r3, #15
 80008ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ec:	2302      	movs	r3, #2
 80008ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2103      	movs	r1, #3
 8000906:	4618      	mov	r0, r3
 8000908:	f000 ffce 	bl	80018a8 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000912:	f000 f979 	bl	8000c08 <Error_Handler>
  }
}
 8000916:	bf00      	nop
 8000918:	3750      	adds	r7, #80	; 0x50
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40007000 	.word	0x40007000

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	; 0x30
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
 8000942:	4ba2      	ldr	r3, [pc, #648]	; (8000bcc <MX_GPIO_Init+0x2a4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4aa1      	ldr	r2, [pc, #644]	; (8000bcc <MX_GPIO_Init+0x2a4>)
 8000948:	f043 0310 	orr.w	r3, r3, #16
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b9f      	ldr	r3, [pc, #636]	; (8000bcc <MX_GPIO_Init+0x2a4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0310 	and.w	r3, r3, #16
 8000956:	61bb      	str	r3, [r7, #24]
 8000958:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	4b9b      	ldr	r3, [pc, #620]	; (8000bcc <MX_GPIO_Init+0x2a4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a9a      	ldr	r2, [pc, #616]	; (8000bcc <MX_GPIO_Init+0x2a4>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b98      	ldr	r3, [pc, #608]	; (8000bcc <MX_GPIO_Init+0x2a4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	4b94      	ldr	r3, [pc, #592]	; (8000bcc <MX_GPIO_Init+0x2a4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a93      	ldr	r2, [pc, #588]	; (8000bcc <MX_GPIO_Init+0x2a4>)
 8000980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b91      	ldr	r3, [pc, #580]	; (8000bcc <MX_GPIO_Init+0x2a4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b8d      	ldr	r3, [pc, #564]	; (8000bcc <MX_GPIO_Init+0x2a4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a8c      	ldr	r2, [pc, #560]	; (8000bcc <MX_GPIO_Init+0x2a4>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b8a      	ldr	r3, [pc, #552]	; (8000bcc <MX_GPIO_Init+0x2a4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	4b86      	ldr	r3, [pc, #536]	; (8000bcc <MX_GPIO_Init+0x2a4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a85      	ldr	r2, [pc, #532]	; (8000bcc <MX_GPIO_Init+0x2a4>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b83      	ldr	r3, [pc, #524]	; (8000bcc <MX_GPIO_Init+0x2a4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b7f      	ldr	r3, [pc, #508]	; (8000bcc <MX_GPIO_Init+0x2a4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a7e      	ldr	r2, [pc, #504]	; (8000bcc <MX_GPIO_Init+0x2a4>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b7c      	ldr	r3, [pc, #496]	; (8000bcc <MX_GPIO_Init+0x2a4>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2108      	movs	r1, #8
 80009ea:	4879      	ldr	r0, [pc, #484]	; (8000bd0 <MX_GPIO_Init+0x2a8>)
 80009ec:	f000 fcb0 	bl	8001350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2101      	movs	r1, #1
 80009f4:	4877      	ldr	r0, [pc, #476]	; (8000bd4 <MX_GPIO_Init+0x2ac>)
 80009f6:	f000 fcab 	bl	8001350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009fa:	2200      	movs	r2, #0
 80009fc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a00:	4875      	ldr	r0, [pc, #468]	; (8000bd8 <MX_GPIO_Init+0x2b0>)
 8000a02:	f000 fca5 	bl	8001350 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a06:	2304      	movs	r3, #4
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	486d      	ldr	r0, [pc, #436]	; (8000bd0 <MX_GPIO_Init+0x2a8>)
 8000a1a:	f000 fafd 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a1e:	2308      	movs	r3, #8
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4866      	ldr	r0, [pc, #408]	; (8000bd0 <MX_GPIO_Init+0x2a8>)
 8000a36:	f000 faef 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000a3a:	2332      	movs	r3, #50	; 0x32
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a3e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4860      	ldr	r0, [pc, #384]	; (8000bd0 <MX_GPIO_Init+0x2a8>)
 8000a50:	f000 fae2 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	485a      	ldr	r0, [pc, #360]	; (8000bd4 <MX_GPIO_Init+0x2ac>)
 8000a6c:	f000 fad4 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a70:	2308      	movs	r3, #8
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a80:	2305      	movs	r3, #5
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4852      	ldr	r0, [pc, #328]	; (8000bd4 <MX_GPIO_Init+0x2ac>)
 8000a8c:	f000 fac4 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a94:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	484d      	ldr	r0, [pc, #308]	; (8000bdc <MX_GPIO_Init+0x2b4>)
 8000aa6:	f000 fab7 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000aaa:	2310      	movs	r3, #16
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aba:	2306      	movs	r3, #6
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4845      	ldr	r0, [pc, #276]	; (8000bdc <MX_GPIO_Init+0x2b4>)
 8000ac6:	f000 faa7 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000aca:	23e0      	movs	r3, #224	; 0xe0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ada:	2305      	movs	r3, #5
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	483d      	ldr	r0, [pc, #244]	; (8000bdc <MX_GPIO_Init+0x2b4>)
 8000ae6:	f000 fa97 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000aea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000afc:	2305      	movs	r3, #5
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	4836      	ldr	r0, [pc, #216]	; (8000be0 <MX_GPIO_Init+0x2b8>)
 8000b08:	f000 fa86 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b0c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b10:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	482c      	ldr	r0, [pc, #176]	; (8000bd8 <MX_GPIO_Init+0x2b0>)
 8000b26:	f000 fa77 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b2a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b3c:	2306      	movs	r3, #6
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	4823      	ldr	r0, [pc, #140]	; (8000bd4 <MX_GPIO_Init+0x2ac>)
 8000b48:	f000 fa66 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000b4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	481e      	ldr	r0, [pc, #120]	; (8000bdc <MX_GPIO_Init+0x2b4>)
 8000b62:	f000 fa59 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000b66:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b78:	230a      	movs	r3, #10
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	4816      	ldr	r0, [pc, #88]	; (8000bdc <MX_GPIO_Init+0x2b4>)
 8000b84:	f000 fa48 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b88:	2320      	movs	r3, #32
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <MX_GPIO_Init+0x2b0>)
 8000b9c:	f000 fa3c 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ba0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba6:	2312      	movs	r3, #18
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4808      	ldr	r0, [pc, #32]	; (8000be0 <MX_GPIO_Init+0x2b8>)
 8000bbe:	f000 fa2b 	bl	8001018 <HAL_GPIO_Init>

}
 8000bc2:	bf00      	nop
 8000bc4:	3730      	adds	r7, #48	; 0x30
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020400 	.word	0x40020400

08000be4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d101      	bne.n	8000bfa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bf6:	f000 f90d 	bl	8000e14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40014400 	.word	0x40014400

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c52:	f002 fd41 	bl	80036d8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800

08000c64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08c      	sub	sp, #48	; 0x30
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	2019      	movs	r0, #25
 8000c7a:	f000 f9a3 	bl	8000fc4 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c7e:	2019      	movs	r0, #25
 8000c80:	f000 f9bc 	bl	8000ffc <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <HAL_InitTick+0xa4>)
 8000c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8c:	4a1e      	ldr	r2, [pc, #120]	; (8000d08 <HAL_InitTick+0xa4>)
 8000c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c92:	6453      	str	r3, [r2, #68]	; 0x44
 8000c94:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <HAL_InitTick+0xa4>)
 8000c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca0:	f107 0210 	add.w	r2, r7, #16
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 f808 	bl	8001cc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000cb0:	f000 fff2 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbc:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <HAL_InitTick+0xa8>)
 8000cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc2:	0c9b      	lsrs	r3, r3, #18
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_InitTick+0xac>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <HAL_InitTick+0xb0>)
 8000ccc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_InitTick+0xac>)
 8000cd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cd4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000cd6:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <HAL_InitTick+0xac>)
 8000cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cda:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_InitTick+0xac>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_InitTick+0xac>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <HAL_InitTick+0xac>)
 8000cea:	f001 f81b 	bl	8001d24 <HAL_TIM_Base_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d104      	bne.n	8000cfe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000cf4:	4806      	ldr	r0, [pc, #24]	; (8000d10 <HAL_InitTick+0xac>)
 8000cf6:	f001 f86f 	bl	8001dd8 <HAL_TIM_Base_Start_IT>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3730      	adds	r7, #48	; 0x30
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	431bde83 	.word	0x431bde83
 8000d10:	20000044 	.word	0x20000044
 8000d14:	40014400 	.word	0x40014400

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d4a:	f001 f8a7 	bl	8001e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000044 	.word	0x20000044

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <SystemInit+0x20>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <SystemInit+0x20>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d82:	490e      	ldr	r1, [pc, #56]	; (8000dbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d84:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d98:	4c0b      	ldr	r4, [pc, #44]	; (8000dc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000da6:	f7ff ffd7 	bl	8000d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000daa:	f005 f9a3 	bl	80060f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dae:	f7ff fbe3 	bl	8000578 <main>
  bx  lr    
 8000db2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000dc0:	0800637c 	.word	0x0800637c
  ldr r2, =_sbss
 8000dc4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000dc8:	20014434 	.word	0x20014434

08000dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <HAL_Init+0x40>)
 8000dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_Init+0x40>)
 8000de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_Init+0x40>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f8d8 	bl	8000fae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	200f      	movs	r0, #15
 8000e00:	f7ff ff30 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e04:	f7ff ff06 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023c00 	.word	0x40023c00

08000e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x20>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x24>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <HAL_IncTick+0x24>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008
 8000e38:	2000008c 	.word	0x2000008c

08000e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <HAL_GetTick+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	2000008c 	.word	0x2000008c

08000e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db0b      	blt.n	8000ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 021f 	and.w	r2, r3, #31
 8000ed0:	4907      	ldr	r1, [pc, #28]	; (8000ef0 <__NVIC_EnableIRQ+0x38>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	2001      	movs	r0, #1
 8000eda:	fa00 f202 	lsl.w	r2, r0, r2
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db0a      	blt.n	8000f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	490c      	ldr	r1, [pc, #48]	; (8000f40 <__NVIC_SetPriority+0x4c>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	0112      	lsls	r2, r2, #4
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	440b      	add	r3, r1
 8000f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f1c:	e00a      	b.n	8000f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4908      	ldr	r1, [pc, #32]	; (8000f44 <__NVIC_SetPriority+0x50>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	0112      	lsls	r2, r2, #4
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	440b      	add	r3, r1
 8000f32:	761a      	strb	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f1c3 0307 	rsb	r3, r3, #7
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	bf28      	it	cs
 8000f66:	2304      	movcs	r3, #4
 8000f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d902      	bls.n	8000f78 <NVIC_EncodePriority+0x30>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3b03      	subs	r3, #3
 8000f76:	e000      	b.n	8000f7a <NVIC_EncodePriority+0x32>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	4313      	orrs	r3, r2
         );
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3724      	adds	r7, #36	; 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ff4c 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd6:	f7ff ff61 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 8000fda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	68b9      	ldr	r1, [r7, #8]
 8000fe0:	6978      	ldr	r0, [r7, #20]
 8000fe2:	f7ff ffb1 	bl	8000f48 <NVIC_EncodePriority>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fec:	4611      	mov	r1, r2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff80 	bl	8000ef4 <__NVIC_SetPriority>
}
 8000ff4:	bf00      	nop
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ff54 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	; 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	e159      	b.n	80012e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001034:	2201      	movs	r2, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	429a      	cmp	r2, r3
 800104e:	f040 8148 	bne.w	80012e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	2b01      	cmp	r3, #1
 800105c:	d005      	beq.n	800106a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001066:	2b02      	cmp	r3, #2
 8001068:	d130      	bne.n	80010cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	68da      	ldr	r2, [r3, #12]
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a0:	2201      	movs	r2, #1
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	091b      	lsrs	r3, r3, #4
 80010b6:	f003 0201 	and.w	r2, r3, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d017      	beq.n	8001108 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2203      	movs	r2, #3
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d123      	bne.n	800115c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	08da      	lsrs	r2, r3, #3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3208      	adds	r2, #8
 800111c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	220f      	movs	r2, #15
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	691a      	ldr	r2, [r3, #16]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	08da      	lsrs	r2, r3, #3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3208      	adds	r2, #8
 8001156:	69b9      	ldr	r1, [r7, #24]
 8001158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0203 	and.w	r2, r3, #3
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 80a2 	beq.w	80012e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b57      	ldr	r3, [pc, #348]	; (8001300 <HAL_GPIO_Init+0x2e8>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	4a56      	ldr	r2, [pc, #344]	; (8001300 <HAL_GPIO_Init+0x2e8>)
 80011a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ac:	6453      	str	r3, [r2, #68]	; 0x44
 80011ae:	4b54      	ldr	r3, [pc, #336]	; (8001300 <HAL_GPIO_Init+0x2e8>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ba:	4a52      	ldr	r2, [pc, #328]	; (8001304 <HAL_GPIO_Init+0x2ec>)
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	3302      	adds	r3, #2
 80011c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	220f      	movs	r2, #15
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a49      	ldr	r2, [pc, #292]	; (8001308 <HAL_GPIO_Init+0x2f0>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d019      	beq.n	800121a <HAL_GPIO_Init+0x202>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a48      	ldr	r2, [pc, #288]	; (800130c <HAL_GPIO_Init+0x2f4>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d013      	beq.n	8001216 <HAL_GPIO_Init+0x1fe>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a47      	ldr	r2, [pc, #284]	; (8001310 <HAL_GPIO_Init+0x2f8>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d00d      	beq.n	8001212 <HAL_GPIO_Init+0x1fa>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a46      	ldr	r2, [pc, #280]	; (8001314 <HAL_GPIO_Init+0x2fc>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d007      	beq.n	800120e <HAL_GPIO_Init+0x1f6>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a45      	ldr	r2, [pc, #276]	; (8001318 <HAL_GPIO_Init+0x300>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d101      	bne.n	800120a <HAL_GPIO_Init+0x1f2>
 8001206:	2304      	movs	r3, #4
 8001208:	e008      	b.n	800121c <HAL_GPIO_Init+0x204>
 800120a:	2307      	movs	r3, #7
 800120c:	e006      	b.n	800121c <HAL_GPIO_Init+0x204>
 800120e:	2303      	movs	r3, #3
 8001210:	e004      	b.n	800121c <HAL_GPIO_Init+0x204>
 8001212:	2302      	movs	r3, #2
 8001214:	e002      	b.n	800121c <HAL_GPIO_Init+0x204>
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <HAL_GPIO_Init+0x204>
 800121a:	2300      	movs	r3, #0
 800121c:	69fa      	ldr	r2, [r7, #28]
 800121e:	f002 0203 	and.w	r2, r2, #3
 8001222:	0092      	lsls	r2, r2, #2
 8001224:	4093      	lsls	r3, r2
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800122c:	4935      	ldr	r1, [pc, #212]	; (8001304 <HAL_GPIO_Init+0x2ec>)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3302      	adds	r3, #2
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123a:	4b38      	ldr	r3, [pc, #224]	; (800131c <HAL_GPIO_Init+0x304>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800125e:	4a2f      	ldr	r2, [pc, #188]	; (800131c <HAL_GPIO_Init+0x304>)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001264:	4b2d      	ldr	r3, [pc, #180]	; (800131c <HAL_GPIO_Init+0x304>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001288:	4a24      	ldr	r2, [pc, #144]	; (800131c <HAL_GPIO_Init+0x304>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800128e:	4b23      	ldr	r3, [pc, #140]	; (800131c <HAL_GPIO_Init+0x304>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012b2:	4a1a      	ldr	r2, [pc, #104]	; (800131c <HAL_GPIO_Init+0x304>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <HAL_GPIO_Init+0x304>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012dc:	4a0f      	ldr	r2, [pc, #60]	; (800131c <HAL_GPIO_Init+0x304>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3301      	adds	r3, #1
 80012e6:	61fb      	str	r3, [r7, #28]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	2b0f      	cmp	r3, #15
 80012ec:	f67f aea2 	bls.w	8001034 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40013800 	.word	0x40013800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020400 	.word	0x40020400
 8001310:	40020800 	.word	0x40020800
 8001314:	40020c00 	.word	0x40020c00
 8001318:	40021000 	.word	0x40021000
 800131c:	40013c00 	.word	0x40013c00

08001320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	887b      	ldrh	r3, [r7, #2]
 8001332:	4013      	ands	r3, r2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001338:	2301      	movs	r3, #1
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	e001      	b.n	8001342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	807b      	strh	r3, [r7, #2]
 800135c:	4613      	mov	r3, r2
 800135e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001360:	787b      	ldrb	r3, [r7, #1]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001366:	887a      	ldrh	r2, [r7, #2]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800136c:	e003      	b.n	8001376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800136e:	887b      	ldrh	r3, [r7, #2]
 8001370:	041a      	lsls	r2, r3, #16
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	619a      	str	r2, [r3, #24]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001382:	b480      	push	{r7}
 8001384:	b085      	sub	sp, #20
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	460b      	mov	r3, r1
 800138c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001394:	887a      	ldrh	r2, [r7, #2]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4013      	ands	r3, r2
 800139a:	041a      	lsls	r2, r3, #16
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	43d9      	mvns	r1, r3
 80013a0:	887b      	ldrh	r3, [r7, #2]
 80013a2:	400b      	ands	r3, r1
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	619a      	str	r2, [r3, #24]
}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e267      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d075      	beq.n	80014c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013d6:	4b88      	ldr	r3, [pc, #544]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d00c      	beq.n	80013fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e2:	4b85      	ldr	r3, [pc, #532]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d112      	bne.n	8001414 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ee:	4b82      	ldr	r3, [pc, #520]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013fa:	d10b      	bne.n	8001414 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	4b7e      	ldr	r3, [pc, #504]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d05b      	beq.n	80014c0 <HAL_RCC_OscConfig+0x108>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d157      	bne.n	80014c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e242      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800141c:	d106      	bne.n	800142c <HAL_RCC_OscConfig+0x74>
 800141e:	4b76      	ldr	r3, [pc, #472]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a75      	ldr	r2, [pc, #468]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e01d      	b.n	8001468 <HAL_RCC_OscConfig+0xb0>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001434:	d10c      	bne.n	8001450 <HAL_RCC_OscConfig+0x98>
 8001436:	4b70      	ldr	r3, [pc, #448]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a6f      	ldr	r2, [pc, #444]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 800143c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	4b6d      	ldr	r3, [pc, #436]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a6c      	ldr	r2, [pc, #432]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	e00b      	b.n	8001468 <HAL_RCC_OscConfig+0xb0>
 8001450:	4b69      	ldr	r3, [pc, #420]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a68      	ldr	r2, [pc, #416]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b66      	ldr	r3, [pc, #408]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a65      	ldr	r2, [pc, #404]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d013      	beq.n	8001498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fce4 	bl	8000e3c <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001478:	f7ff fce0 	bl	8000e3c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	; 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e207      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148a:	4b5b      	ldr	r3, [pc, #364]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0xc0>
 8001496:	e014      	b.n	80014c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fcd0 	bl	8000e3c <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fccc 	bl	8000e3c <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e1f3      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b2:	4b51      	ldr	r3, [pc, #324]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0xe8>
 80014be:	e000      	b.n	80014c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d063      	beq.n	8001596 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ce:	4b4a      	ldr	r3, [pc, #296]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00b      	beq.n	80014f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014da:	4b47      	ldr	r3, [pc, #284]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d11c      	bne.n	8001520 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e6:	4b44      	ldr	r3, [pc, #272]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d116      	bne.n	8001520 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f2:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d005      	beq.n	800150a <HAL_RCC_OscConfig+0x152>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d001      	beq.n	800150a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e1c7      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150a:	4b3b      	ldr	r3, [pc, #236]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	4937      	ldr	r1, [pc, #220]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 800151a:	4313      	orrs	r3, r2
 800151c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151e:	e03a      	b.n	8001596 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d020      	beq.n	800156a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001528:	4b34      	ldr	r3, [pc, #208]	; (80015fc <HAL_RCC_OscConfig+0x244>)
 800152a:	2201      	movs	r2, #1
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff fc85 	bl	8000e3c <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001536:	f7ff fc81 	bl	8000e3c <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e1a8      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001548:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001554:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4925      	ldr	r1, [pc, #148]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001564:	4313      	orrs	r3, r2
 8001566:	600b      	str	r3, [r1, #0]
 8001568:	e015      	b.n	8001596 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800156a:	4b24      	ldr	r3, [pc, #144]	; (80015fc <HAL_RCC_OscConfig+0x244>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff fc64 	bl	8000e3c <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001578:	f7ff fc60 	bl	8000e3c <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e187      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d036      	beq.n	8001610 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d016      	beq.n	80015d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_RCC_OscConfig+0x248>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b0:	f7ff fc44 	bl	8000e3c <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b8:	f7ff fc40 	bl	8000e3c <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e167      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80015cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x200>
 80015d6:	e01b      	b.n	8001610 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_RCC_OscConfig+0x248>)
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015de:	f7ff fc2d 	bl	8000e3c <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e4:	e00e      	b.n	8001604 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e6:	f7ff fc29 	bl	8000e3c <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d907      	bls.n	8001604 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e150      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
 80015f8:	40023800 	.word	0x40023800
 80015fc:	42470000 	.word	0x42470000
 8001600:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001604:	4b88      	ldr	r3, [pc, #544]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1ea      	bne.n	80015e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 8097 	beq.w	800174c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001622:	4b81      	ldr	r3, [pc, #516]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10f      	bne.n	800164e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b7d      	ldr	r3, [pc, #500]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a7c      	ldr	r2, [pc, #496]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b7a      	ldr	r3, [pc, #488]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800164a:	2301      	movs	r3, #1
 800164c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164e:	4b77      	ldr	r3, [pc, #476]	; (800182c <HAL_RCC_OscConfig+0x474>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001656:	2b00      	cmp	r3, #0
 8001658:	d118      	bne.n	800168c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800165a:	4b74      	ldr	r3, [pc, #464]	; (800182c <HAL_RCC_OscConfig+0x474>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a73      	ldr	r2, [pc, #460]	; (800182c <HAL_RCC_OscConfig+0x474>)
 8001660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001666:	f7ff fbe9 	bl	8000e3c <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166e:	f7ff fbe5 	bl	8000e3c <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e10c      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001680:	4b6a      	ldr	r3, [pc, #424]	; (800182c <HAL_RCC_OscConfig+0x474>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d106      	bne.n	80016a2 <HAL_RCC_OscConfig+0x2ea>
 8001694:	4b64      	ldr	r3, [pc, #400]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001698:	4a63      	ldr	r2, [pc, #396]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6713      	str	r3, [r2, #112]	; 0x70
 80016a0:	e01c      	b.n	80016dc <HAL_RCC_OscConfig+0x324>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b05      	cmp	r3, #5
 80016a8:	d10c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x30c>
 80016aa:	4b5f      	ldr	r3, [pc, #380]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ae:	4a5e      	ldr	r2, [pc, #376]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	6713      	str	r3, [r2, #112]	; 0x70
 80016b6:	4b5c      	ldr	r3, [pc, #368]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ba:	4a5b      	ldr	r2, [pc, #364]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6713      	str	r3, [r2, #112]	; 0x70
 80016c2:	e00b      	b.n	80016dc <HAL_RCC_OscConfig+0x324>
 80016c4:	4b58      	ldr	r3, [pc, #352]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80016c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c8:	4a57      	ldr	r2, [pc, #348]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80016ca:	f023 0301 	bic.w	r3, r3, #1
 80016ce:	6713      	str	r3, [r2, #112]	; 0x70
 80016d0:	4b55      	ldr	r3, [pc, #340]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80016d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d4:	4a54      	ldr	r2, [pc, #336]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80016d6:	f023 0304 	bic.w	r3, r3, #4
 80016da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d015      	beq.n	8001710 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e4:	f7ff fbaa 	bl	8000e3c <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ea:	e00a      	b.n	8001702 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ec:	f7ff fba6 	bl	8000e3c <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e0cb      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001702:	4b49      	ldr	r3, [pc, #292]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0ee      	beq.n	80016ec <HAL_RCC_OscConfig+0x334>
 800170e:	e014      	b.n	800173a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001710:	f7ff fb94 	bl	8000e3c <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001716:	e00a      	b.n	800172e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001718:	f7ff fb90 	bl	8000e3c <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f241 3288 	movw	r2, #5000	; 0x1388
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e0b5      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172e:	4b3e      	ldr	r3, [pc, #248]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1ee      	bne.n	8001718 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800173a:	7dfb      	ldrb	r3, [r7, #23]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d105      	bne.n	800174c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001740:	4b39      	ldr	r3, [pc, #228]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	4a38      	ldr	r2, [pc, #224]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800174a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 80a1 	beq.w	8001898 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001756:	4b34      	ldr	r3, [pc, #208]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b08      	cmp	r3, #8
 8001760:	d05c      	beq.n	800181c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d141      	bne.n	80017ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176a:	4b31      	ldr	r3, [pc, #196]	; (8001830 <HAL_RCC_OscConfig+0x478>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fb64 	bl	8000e3c <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff fb60 	bl	8000e3c <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e087      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178a:	4b27      	ldr	r3, [pc, #156]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69da      	ldr	r2, [r3, #28]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	019b      	lsls	r3, r3, #6
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	3b01      	subs	r3, #1
 80017b0:	041b      	lsls	r3, r3, #16
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b8:	061b      	lsls	r3, r3, #24
 80017ba:	491b      	ldr	r1, [pc, #108]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <HAL_RCC_OscConfig+0x478>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fb39 	bl	8000e3c <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ce:	f7ff fb35 	bl	8000e3c <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e05c      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x416>
 80017ec:	e054      	b.n	8001898 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_RCC_OscConfig+0x478>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fb22 	bl	8000e3c <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff fb1e 	bl	8000e3c <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e045      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x444>
 800181a:	e03d      	b.n	8001898 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d107      	bne.n	8001834 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e038      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
 8001828:	40023800 	.word	0x40023800
 800182c:	40007000 	.word	0x40007000
 8001830:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_RCC_OscConfig+0x4ec>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d028      	beq.n	8001894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d121      	bne.n	8001894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185a:	429a      	cmp	r2, r3
 800185c:	d11a      	bne.n	8001894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001864:	4013      	ands	r3, r2
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800186a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800186c:	4293      	cmp	r3, r2
 800186e:	d111      	bne.n	8001894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	085b      	lsrs	r3, r3, #1
 800187c:	3b01      	subs	r3, #1
 800187e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001880:	429a      	cmp	r2, r3
 8001882:	d107      	bne.n	8001894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800

080018a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0cc      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018bc:	4b68      	ldr	r3, [pc, #416]	; (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d90c      	bls.n	80018e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b65      	ldr	r3, [pc, #404]	; (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b63      	ldr	r3, [pc, #396]	; (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0b8      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d020      	beq.n	8001932 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018fc:	4b59      	ldr	r3, [pc, #356]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	4a58      	ldr	r2, [pc, #352]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001906:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001914:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4a52      	ldr	r2, [pc, #328]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800191e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001920:	4b50      	ldr	r3, [pc, #320]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	494d      	ldr	r1, [pc, #308]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d044      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d107      	bne.n	8001956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d119      	bne.n	8001986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e07f      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d003      	beq.n	8001966 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001962:	2b03      	cmp	r3, #3
 8001964:	d107      	bne.n	8001976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001966:	4b3f      	ldr	r3, [pc, #252]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d109      	bne.n	8001986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e06f      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001976:	4b3b      	ldr	r3, [pc, #236]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e067      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001986:	4b37      	ldr	r3, [pc, #220]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f023 0203 	bic.w	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4934      	ldr	r1, [pc, #208]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	4313      	orrs	r3, r2
 8001996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001998:	f7ff fa50 	bl	8000e3c <HAL_GetTick>
 800199c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a0:	f7ff fa4c 	bl	8000e3c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e04f      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 020c 	and.w	r2, r3, #12
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d1eb      	bne.n	80019a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019c8:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d20c      	bcs.n	80019f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d6:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019de:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e032      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019fc:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	4916      	ldr	r1, [pc, #88]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d009      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	490e      	ldr	r1, [pc, #56]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a2e:	f000 f821 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 8001a32:	4602      	mov	r2, r0
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	490a      	ldr	r1, [pc, #40]	; (8001a68 <HAL_RCC_ClockConfig+0x1c0>)
 8001a40:	5ccb      	ldrb	r3, [r1, r3]
 8001a42:	fa22 f303 	lsr.w	r3, r2, r3
 8001a46:	4a09      	ldr	r2, [pc, #36]	; (8001a6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff f908 	bl	8000c64 <HAL_InitTick>

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023c00 	.word	0x40023c00
 8001a64:	40023800 	.word	0x40023800
 8001a68:	0800631c 	.word	0x0800631c
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000004 	.word	0x20000004

08001a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a78:	b094      	sub	sp, #80	; 0x50
 8001a7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a80:	2300      	movs	r3, #0
 8001a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a84:	2300      	movs	r3, #0
 8001a86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a8c:	4b79      	ldr	r3, [pc, #484]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d00d      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x40>
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	f200 80e1 	bhi.w	8001c60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d003      	beq.n	8001aae <HAL_RCC_GetSysClockFreq+0x3a>
 8001aa6:	e0db      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa8:	4b73      	ldr	r3, [pc, #460]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aaa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001aac:	e0db      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aae:	4b73      	ldr	r3, [pc, #460]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x208>)
 8001ab0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ab2:	e0d8      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ab4:	4b6f      	ldr	r3, [pc, #444]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001abc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001abe:	4b6d      	ldr	r3, [pc, #436]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d063      	beq.n	8001b92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aca:	4b6a      	ldr	r3, [pc, #424]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	099b      	lsrs	r3, r3, #6
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ad4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001adc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ade:	2300      	movs	r3, #0
 8001ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ae2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ae6:	4622      	mov	r2, r4
 8001ae8:	462b      	mov	r3, r5
 8001aea:	f04f 0000 	mov.w	r0, #0
 8001aee:	f04f 0100 	mov.w	r1, #0
 8001af2:	0159      	lsls	r1, r3, #5
 8001af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af8:	0150      	lsls	r0, r2, #5
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4621      	mov	r1, r4
 8001b00:	1a51      	subs	r1, r2, r1
 8001b02:	6139      	str	r1, [r7, #16]
 8001b04:	4629      	mov	r1, r5
 8001b06:	eb63 0301 	sbc.w	r3, r3, r1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b18:	4659      	mov	r1, fp
 8001b1a:	018b      	lsls	r3, r1, #6
 8001b1c:	4651      	mov	r1, sl
 8001b1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b22:	4651      	mov	r1, sl
 8001b24:	018a      	lsls	r2, r1, #6
 8001b26:	4651      	mov	r1, sl
 8001b28:	ebb2 0801 	subs.w	r8, r2, r1
 8001b2c:	4659      	mov	r1, fp
 8001b2e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b46:	4690      	mov	r8, r2
 8001b48:	4699      	mov	r9, r3
 8001b4a:	4623      	mov	r3, r4
 8001b4c:	eb18 0303 	adds.w	r3, r8, r3
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	462b      	mov	r3, r5
 8001b54:	eb49 0303 	adc.w	r3, r9, r3
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b66:	4629      	mov	r1, r5
 8001b68:	024b      	lsls	r3, r1, #9
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b70:	4621      	mov	r1, r4
 8001b72:	024a      	lsls	r2, r1, #9
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b84:	f7fe fb76 	bl	8000274 <__aeabi_uldivmod>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b90:	e058      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b92:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	099b      	lsrs	r3, r3, #6
 8001b98:	2200      	movs	r2, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ba2:	623b      	str	r3, [r7, #32]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bac:	4642      	mov	r2, r8
 8001bae:	464b      	mov	r3, r9
 8001bb0:	f04f 0000 	mov.w	r0, #0
 8001bb4:	f04f 0100 	mov.w	r1, #0
 8001bb8:	0159      	lsls	r1, r3, #5
 8001bba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bbe:	0150      	lsls	r0, r2, #5
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4641      	mov	r1, r8
 8001bc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bca:	4649      	mov	r1, r9
 8001bcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001be0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001be4:	ebb2 040a 	subs.w	r4, r2, sl
 8001be8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	00eb      	lsls	r3, r5, #3
 8001bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bfa:	00e2      	lsls	r2, r4, #3
 8001bfc:	4614      	mov	r4, r2
 8001bfe:	461d      	mov	r5, r3
 8001c00:	4643      	mov	r3, r8
 8001c02:	18e3      	adds	r3, r4, r3
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	464b      	mov	r3, r9
 8001c08:	eb45 0303 	adc.w	r3, r5, r3
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	028b      	lsls	r3, r1, #10
 8001c1e:	4621      	mov	r1, r4
 8001c20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c24:	4621      	mov	r1, r4
 8001c26:	028a      	lsls	r2, r1, #10
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	61fa      	str	r2, [r7, #28]
 8001c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c38:	f7fe fb1c 	bl	8000274 <__aeabi_uldivmod>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4613      	mov	r3, r2
 8001c42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	0c1b      	lsrs	r3, r3, #16
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c5e:	e002      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3750      	adds	r7, #80	; 0x50
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	00f42400 	.word	0x00f42400
 8001c7c:	007a1200 	.word	0x007a1200

08001c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000000 	.word	0x20000000

08001c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c9c:	f7ff fff0 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	0b5b      	lsrs	r3, r3, #13
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	4903      	ldr	r1, [pc, #12]	; (8001cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	0800632c 	.word	0x0800632c

08001cc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	220f      	movs	r2, #15
 8001cce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_RCC_GetClockConfig+0x5c>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0203 	and.w	r2, r3, #3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <HAL_RCC_GetClockConfig+0x5c>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <HAL_RCC_GetClockConfig+0x5c>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_RCC_GetClockConfig+0x5c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	08db      	lsrs	r3, r3, #3
 8001cfa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <HAL_RCC_GetClockConfig+0x60>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0207 	and.w	r2, r3, #7
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	601a      	str	r2, [r3, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40023c00 	.word	0x40023c00

08001d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e041      	b.n	8001dba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d106      	bne.n	8001d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f839 	bl	8001dc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3304      	adds	r3, #4
 8001d60:	4619      	mov	r1, r3
 8001d62:	4610      	mov	r0, r2
 8001d64:	f000 f9ca 	bl	80020fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d001      	beq.n	8001df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e044      	b.n	8001e7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a1e      	ldr	r2, [pc, #120]	; (8001e88 <HAL_TIM_Base_Start_IT+0xb0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d018      	beq.n	8001e44 <HAL_TIM_Base_Start_IT+0x6c>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e1a:	d013      	beq.n	8001e44 <HAL_TIM_Base_Start_IT+0x6c>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1a      	ldr	r2, [pc, #104]	; (8001e8c <HAL_TIM_Base_Start_IT+0xb4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00e      	beq.n	8001e44 <HAL_TIM_Base_Start_IT+0x6c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <HAL_TIM_Base_Start_IT+0xb8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d009      	beq.n	8001e44 <HAL_TIM_Base_Start_IT+0x6c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <HAL_TIM_Base_Start_IT+0xbc>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d004      	beq.n	8001e44 <HAL_TIM_Base_Start_IT+0x6c>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a16      	ldr	r2, [pc, #88]	; (8001e98 <HAL_TIM_Base_Start_IT+0xc0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d111      	bne.n	8001e68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d010      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 0201 	orr.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e66:	e007      	b.n	8001e78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	40000400 	.word	0x40000400
 8001e90:	40000800 	.word	0x40000800
 8001e94:	40000c00 	.word	0x40000c00
 8001e98:	40014000 	.word	0x40014000

08001e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d122      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d11b      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0202 	mvn.w	r2, #2
 8001ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8ee 	bl	80020c0 <HAL_TIM_IC_CaptureCallback>
 8001ee4:	e005      	b.n	8001ef2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f8e0 	bl	80020ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f8f1 	bl	80020d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d122      	bne.n	8001f4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d11b      	bne.n	8001f4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0204 	mvn.w	r2, #4
 8001f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2202      	movs	r2, #2
 8001f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8c4 	bl	80020c0 <HAL_TIM_IC_CaptureCallback>
 8001f38:	e005      	b.n	8001f46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f8b6 	bl	80020ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f8c7 	bl	80020d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d122      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d11b      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0208 	mvn.w	r2, #8
 8001f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2204      	movs	r2, #4
 8001f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f89a 	bl	80020c0 <HAL_TIM_IC_CaptureCallback>
 8001f8c:	e005      	b.n	8001f9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f88c 	bl	80020ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f89d 	bl	80020d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d122      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b10      	cmp	r3, #16
 8001fba:	d11b      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0210 	mvn.w	r2, #16
 8001fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2208      	movs	r2, #8
 8001fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f870 	bl	80020c0 <HAL_TIM_IC_CaptureCallback>
 8001fe0:	e005      	b.n	8001fee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f862 	bl	80020ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f873 	bl	80020d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d10e      	bne.n	8002020 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d107      	bne.n	8002020 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0201 	mvn.w	r2, #1
 8002018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fde2 	bl	8000be4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202a:	2b80      	cmp	r3, #128	; 0x80
 800202c:	d10e      	bne.n	800204c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002038:	2b80      	cmp	r3, #128	; 0x80
 800203a:	d107      	bne.n	800204c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f8e2 	bl	8002210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002056:	2b40      	cmp	r3, #64	; 0x40
 8002058:	d10e      	bne.n	8002078 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002064:	2b40      	cmp	r3, #64	; 0x40
 8002066:	d107      	bne.n	8002078 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f838 	bl	80020e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b20      	cmp	r3, #32
 8002084:	d10e      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0320 	and.w	r3, r3, #32
 8002090:	2b20      	cmp	r3, #32
 8002092:	d107      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0220 	mvn.w	r2, #32
 800209c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f8ac 	bl	80021fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a34      	ldr	r2, [pc, #208]	; (80021e0 <TIM_Base_SetConfig+0xe4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00f      	beq.n	8002134 <TIM_Base_SetConfig+0x38>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211a:	d00b      	beq.n	8002134 <TIM_Base_SetConfig+0x38>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a31      	ldr	r2, [pc, #196]	; (80021e4 <TIM_Base_SetConfig+0xe8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d007      	beq.n	8002134 <TIM_Base_SetConfig+0x38>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a30      	ldr	r2, [pc, #192]	; (80021e8 <TIM_Base_SetConfig+0xec>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d003      	beq.n	8002134 <TIM_Base_SetConfig+0x38>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a2f      	ldr	r2, [pc, #188]	; (80021ec <TIM_Base_SetConfig+0xf0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d108      	bne.n	8002146 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800213a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a25      	ldr	r2, [pc, #148]	; (80021e0 <TIM_Base_SetConfig+0xe4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01b      	beq.n	8002186 <TIM_Base_SetConfig+0x8a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002154:	d017      	beq.n	8002186 <TIM_Base_SetConfig+0x8a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a22      	ldr	r2, [pc, #136]	; (80021e4 <TIM_Base_SetConfig+0xe8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d013      	beq.n	8002186 <TIM_Base_SetConfig+0x8a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a21      	ldr	r2, [pc, #132]	; (80021e8 <TIM_Base_SetConfig+0xec>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00f      	beq.n	8002186 <TIM_Base_SetConfig+0x8a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a20      	ldr	r2, [pc, #128]	; (80021ec <TIM_Base_SetConfig+0xf0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00b      	beq.n	8002186 <TIM_Base_SetConfig+0x8a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a1f      	ldr	r2, [pc, #124]	; (80021f0 <TIM_Base_SetConfig+0xf4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d007      	beq.n	8002186 <TIM_Base_SetConfig+0x8a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <TIM_Base_SetConfig+0xf8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d003      	beq.n	8002186 <TIM_Base_SetConfig+0x8a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a1d      	ldr	r2, [pc, #116]	; (80021f8 <TIM_Base_SetConfig+0xfc>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d108      	bne.n	8002198 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4313      	orrs	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <TIM_Base_SetConfig+0xe4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d103      	bne.n	80021cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	615a      	str	r2, [r3, #20]
}
 80021d2:	bf00      	nop
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40010000 	.word	0x40010000
 80021e4:	40000400 	.word	0x40000400
 80021e8:	40000800 	.word	0x40000800
 80021ec:	40000c00 	.word	0x40000c00
 80021f0:	40014000 	.word	0x40014000
 80021f4:	40014400 	.word	0x40014400
 80021f8:	40014800 	.word	0x40014800

080021fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f103 0208 	add.w	r2, r3, #8
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f04f 32ff 	mov.w	r2, #4294967295
 800223c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f103 0208 	add.w	r2, r3, #8
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f103 0208 	add.w	r2, r3, #8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800227e:	b480      	push	{r7}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	601a      	str	r2, [r3, #0]
}
 80022ba:	bf00      	nop
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022c6:	b480      	push	{r7}
 80022c8:	b085      	sub	sp, #20
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d103      	bne.n	80022e6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	e00c      	b.n	8002300 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3308      	adds	r3, #8
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	e002      	b.n	80022f4 <vListInsert+0x2e>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d2f6      	bcs.n	80022ee <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	601a      	str	r2, [r3, #0]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6892      	ldr	r2, [r2, #8]
 800234e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6852      	ldr	r2, [r2, #4]
 8002358:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	d103      	bne.n	800236c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	1e5a      	subs	r2, r3, #1
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800238c:	b580      	push	{r7, lr}
 800238e:	b08c      	sub	sp, #48	; 0x30
 8002390:	af04      	add	r7, sp, #16
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	4613      	mov	r3, r2
 800239a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f001 fb43 	bl	8003a2c <pvPortMalloc>
 80023a6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00e      	beq.n	80023cc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023ae:	2058      	movs	r0, #88	; 0x58
 80023b0:	f001 fb3c 	bl	8003a2c <pvPortMalloc>
 80023b4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30
 80023c2:	e005      	b.n	80023d0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80023c4:	6978      	ldr	r0, [r7, #20]
 80023c6:	f001 fc11 	bl	8003bec <vPortFree>
 80023ca:	e001      	b.n	80023d0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d013      	beq.n	80023fe <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023d6:	88fa      	ldrh	r2, [r7, #6]
 80023d8:	2300      	movs	r3, #0
 80023da:	9303      	str	r3, [sp, #12]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	9302      	str	r3, [sp, #8]
 80023e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e2:	9301      	str	r3, [sp, #4]
 80023e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68b9      	ldr	r1, [r7, #8]
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f80e 	bl	800240e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80023f2:	69f8      	ldr	r0, [r7, #28]
 80023f4:	f000 f8b0 	bl	8002558 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80023f8:	2301      	movs	r3, #1
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	e002      	b.n	8002404 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002402:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002404:	69bb      	ldr	r3, [r7, #24]
    }
 8002406:	4618      	mov	r0, r3
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b088      	sub	sp, #32
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	461a      	mov	r2, r3
 8002426:	21a5      	movs	r1, #165	; 0xa5
 8002428:	f003 fea6 	bl	8006178 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002436:	3b01      	subs	r3, #1
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	f023 0307 	bic.w	r3, r3, #7
 8002444:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00a      	beq.n	8002466 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002454:	f383 8811 	msr	BASEPRI, r3
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	617b      	str	r3, [r7, #20]
    }
 8002462:	bf00      	nop
 8002464:	e7fe      	b.n	8002464 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01f      	beq.n	80024ac <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800246c:	2300      	movs	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	e012      	b.n	8002498 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	4413      	add	r3, r2
 8002478:	7819      	ldrb	r1, [r3, #0]
 800247a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	4413      	add	r3, r2
 8002480:	3334      	adds	r3, #52	; 0x34
 8002482:	460a      	mov	r2, r1
 8002484:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4413      	add	r3, r2
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d006      	beq.n	80024a0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3301      	adds	r3, #1
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	2b09      	cmp	r3, #9
 800249c:	d9e9      	bls.n	8002472 <prvInitialiseNewTask+0x64>
 800249e:	e000      	b.n	80024a2 <prvInitialiseNewTask+0x94>
            {
                break;
 80024a0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024aa:	e003      	b.n	80024b4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80024ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80024b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d90a      	bls.n	80024d0 <prvInitialiseNewTask+0xc2>
        __asm volatile
 80024ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024be:	f383 8811 	msr	BASEPRI, r3
 80024c2:	f3bf 8f6f 	isb	sy
 80024c6:	f3bf 8f4f 	dsb	sy
 80024ca:	613b      	str	r3, [r7, #16]
    }
 80024cc:	bf00      	nop
 80024ce:	e7fe      	b.n	80024ce <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d901      	bls.n	80024da <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024d6:	2304      	movs	r3, #4
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80024da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024de:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80024e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024e4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80024e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e8:	2200      	movs	r2, #0
 80024ea:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ee:	3304      	adds	r3, #4
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff feb7 	bl	8002264 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	3318      	adds	r3, #24
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff feb2 	bl	8002264 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002504:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002508:	f1c3 0205 	rsb	r2, r3, #5
 800250c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002514:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002518:	3350      	adds	r3, #80	; 0x50
 800251a:	2204      	movs	r2, #4
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f003 fe2a 	bl	8006178 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002526:	3354      	adds	r3, #84	; 0x54
 8002528:	2201      	movs	r2, #1
 800252a:	2100      	movs	r1, #0
 800252c:	4618      	mov	r0, r3
 800252e:	f003 fe23 	bl	8006178 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	68f9      	ldr	r1, [r7, #12]
 8002536:	69b8      	ldr	r0, [r7, #24]
 8002538:	f000 ffa2 	bl	8003480 <pxPortInitialiseStack>
 800253c:	4602      	mov	r2, r0
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800254c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800254e:	bf00      	nop
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002558:	b5b0      	push	{r4, r5, r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af02      	add	r7, sp, #8
 800255e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002560:	f001 f938 	bl	80037d4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002564:	4b4f      	ldr	r3, [pc, #316]	; (80026a4 <prvAddNewTaskToReadyList+0x14c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	4a4e      	ldr	r2, [pc, #312]	; (80026a4 <prvAddNewTaskToReadyList+0x14c>)
 800256c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800256e:	4b4e      	ldr	r3, [pc, #312]	; (80026a8 <prvAddNewTaskToReadyList+0x150>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002576:	4a4c      	ldr	r2, [pc, #304]	; (80026a8 <prvAddNewTaskToReadyList+0x150>)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800257c:	4b49      	ldr	r3, [pc, #292]	; (80026a4 <prvAddNewTaskToReadyList+0x14c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d110      	bne.n	80025a6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002584:	f000 fc9a 	bl	8002ebc <prvInitialiseTaskLists>
 8002588:	e00d      	b.n	80025a6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800258a:	4b48      	ldr	r3, [pc, #288]	; (80026ac <prvAddNewTaskToReadyList+0x154>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002592:	4b45      	ldr	r3, [pc, #276]	; (80026a8 <prvAddNewTaskToReadyList+0x150>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	429a      	cmp	r2, r3
 800259e:	d802      	bhi.n	80025a6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80025a0:	4a41      	ldr	r2, [pc, #260]	; (80026a8 <prvAddNewTaskToReadyList+0x150>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80025a6:	4b42      	ldr	r3, [pc, #264]	; (80026b0 <prvAddNewTaskToReadyList+0x158>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	3301      	adds	r3, #1
 80025ac:	4a40      	ldr	r2, [pc, #256]	; (80026b0 <prvAddNewTaskToReadyList+0x158>)
 80025ae:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80025b0:	4b3f      	ldr	r3, [pc, #252]	; (80026b0 <prvAddNewTaskToReadyList+0x158>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d016      	beq.n	80025ec <prvAddNewTaskToReadyList+0x94>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f003 fb15 	bl	8005bf0 <SEGGER_SYSVIEW_OnTaskCreate>
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	461d      	mov	r5, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	461c      	mov	r4, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	1ae3      	subs	r3, r4, r3
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	462b      	mov	r3, r5
 80025e8:	f001 fcce 	bl	8003f88 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f003 fb82 	bl	8005cf8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	2201      	movs	r2, #1
 80025fa:	409a      	lsls	r2, r3
 80025fc:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <prvAddNewTaskToReadyList+0x15c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4313      	orrs	r3, r2
 8002602:	4a2c      	ldr	r2, [pc, #176]	; (80026b4 <prvAddNewTaskToReadyList+0x15c>)
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800260a:	492b      	ldr	r1, [pc, #172]	; (80026b8 <prvAddNewTaskToReadyList+0x160>)
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	3304      	adds	r3, #4
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	3204      	adds	r2, #4
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	1d1a      	adds	r2, r3, #4
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4a1b      	ldr	r2, [pc, #108]	; (80026b8 <prvAddNewTaskToReadyList+0x160>)
 800264a:	441a      	add	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	615a      	str	r2, [r3, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002654:	4918      	ldr	r1, [pc, #96]	; (80026b8 <prvAddNewTaskToReadyList+0x160>)
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	1c59      	adds	r1, r3, #1
 8002664:	4814      	ldr	r0, [pc, #80]	; (80026b8 <prvAddNewTaskToReadyList+0x160>)
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4403      	add	r3, r0
 8002670:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002672:	f001 f8df 	bl	8003834 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002676:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <prvAddNewTaskToReadyList+0x154>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00e      	beq.n	800269c <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800267e:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <prvAddNewTaskToReadyList+0x150>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	429a      	cmp	r2, r3
 800268a:	d207      	bcs.n	800269c <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <prvAddNewTaskToReadyList+0x164>)
 800268e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bdb0      	pop	{r4, r5, r7, pc}
 80026a4:	20000168 	.word	0x20000168
 80026a8:	20000090 	.word	0x20000090
 80026ac:	20000174 	.word	0x20000174
 80026b0:	20000184 	.word	0x20000184
 80026b4:	20000170 	.word	0x20000170
 80026b8:	20000094 	.word	0x20000094
 80026bc:	e000ed04 	.word	0xe000ed04

080026c0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80026c8:	f001 f884 	bl	80037d4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d102      	bne.n	80026d8 <vTaskDelete+0x18>
 80026d2:	4b48      	ldr	r3, [pc, #288]	; (80027f4 <vTaskDelete+0x134>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	e000      	b.n	80026da <vTaskDelete+0x1a>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3304      	adds	r3, #4
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fe29 	bl	8002338 <uxListRemove>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d115      	bne.n	8002718 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f0:	4941      	ldr	r1, [pc, #260]	; (80027f8 <vTaskDelete+0x138>)
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10a      	bne.n	8002718 <vTaskDelete+0x58>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002706:	2201      	movs	r2, #1
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43da      	mvns	r2, r3
 800270e:	4b3b      	ldr	r3, [pc, #236]	; (80027fc <vTaskDelete+0x13c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4013      	ands	r3, r2
 8002714:	4a39      	ldr	r2, [pc, #228]	; (80027fc <vTaskDelete+0x13c>)
 8002716:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	d004      	beq.n	800272a <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	3318      	adds	r3, #24
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fe07 	bl	8002338 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800272a:	4b35      	ldr	r3, [pc, #212]	; (8002800 <vTaskDelete+0x140>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	3301      	adds	r3, #1
 8002730:	4a33      	ldr	r2, [pc, #204]	; (8002800 <vTaskDelete+0x140>)
 8002732:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002734:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <vTaskDelete+0x134>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	429a      	cmp	r2, r3
 800273c:	d118      	bne.n	8002770 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3304      	adds	r3, #4
 8002742:	4619      	mov	r1, r3
 8002744:	482f      	ldr	r0, [pc, #188]	; (8002804 <vTaskDelete+0x144>)
 8002746:	f7ff fd9a 	bl	800227e <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800274a:	4b2f      	ldr	r3, [pc, #188]	; (8002808 <vTaskDelete+0x148>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	3301      	adds	r3, #1
 8002750:	4a2d      	ldr	r2, [pc, #180]	; (8002808 <vTaskDelete+0x148>)
 8002752:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4618      	mov	r0, r3
 8002758:	f003 fb70 	bl	8005e3c <SEGGER_SYSVIEW_ShrinkId>
 800275c:	4603      	mov	r3, r0
 800275e:	4619      	mov	r1, r3
 8002760:	2022      	movs	r0, #34	; 0x22
 8002762:	f002 fdbf 	bl	80052e4 <SEGGER_SYSVIEW_RecordU32>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4618      	mov	r0, r3
 800276a:	f001 fc75 	bl	8004058 <SYSVIEW_DeleteTask>
 800276e:	e013      	b.n	8002798 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002770:	4b26      	ldr	r3, [pc, #152]	; (800280c <vTaskDelete+0x14c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	3b01      	subs	r3, #1
 8002776:	4a25      	ldr	r2, [pc, #148]	; (800280c <vTaskDelete+0x14c>)
 8002778:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4618      	mov	r0, r3
 800277e:	f003 fb5d 	bl	8005e3c <SEGGER_SYSVIEW_ShrinkId>
 8002782:	4603      	mov	r3, r0
 8002784:	4619      	mov	r1, r3
 8002786:	2022      	movs	r0, #34	; 0x22
 8002788:	f002 fdac 	bl	80052e4 <SEGGER_SYSVIEW_RecordU32>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4618      	mov	r0, r3
 8002790:	f001 fc62 	bl	8004058 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002794:	f000 fc10 	bl	8002fb8 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002798:	f001 f84c 	bl	8003834 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 800279c:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <vTaskDelete+0x134>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d002      	beq.n	80027ac <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fbf6 	bl	8002f98 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80027ac:	4b18      	ldr	r3, [pc, #96]	; (8002810 <vTaskDelete+0x150>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01b      	beq.n	80027ec <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <vTaskDelete+0x134>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d116      	bne.n	80027ec <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80027be:	4b15      	ldr	r3, [pc, #84]	; (8002814 <vTaskDelete+0x154>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <vTaskDelete+0x11c>
        __asm volatile
 80027c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ca:	f383 8811 	msr	BASEPRI, r3
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	60bb      	str	r3, [r7, #8]
    }
 80027d8:	bf00      	nop
 80027da:	e7fe      	b.n	80027da <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 80027dc:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <vTaskDelete+0x158>)
 80027de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20000090 	.word	0x20000090
 80027f8:	20000094 	.word	0x20000094
 80027fc:	20000170 	.word	0x20000170
 8002800:	20000184 	.word	0x20000184
 8002804:	2000013c 	.word	0x2000013c
 8002808:	20000150 	.word	0x20000150
 800280c:	20000168 	.word	0x20000168
 8002810:	20000174 	.word	0x20000174
 8002814:	20000190 	.word	0x20000190
 8002818:	e000ed04 	.word	0xe000ed04

0800281c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d01b      	beq.n	8002866 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <vTaskDelay+0x68>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <vTaskDelay+0x30>
        __asm volatile
 8002836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283a:	f383 8811 	msr	BASEPRI, r3
 800283e:	f3bf 8f6f 	isb	sy
 8002842:	f3bf 8f4f 	dsb	sy
 8002846:	60bb      	str	r3, [r7, #8]
    }
 8002848:	bf00      	nop
 800284a:	e7fe      	b.n	800284a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800284c:	f000 f87a 	bl	8002944 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	2023      	movs	r0, #35	; 0x23
 8002854:	f002 fd46 	bl	80052e4 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002858:	2100      	movs	r1, #0
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fd84 	bl	8003368 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002860:	f000 f87e 	bl	8002960 <xTaskResumeAll>
 8002864:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d107      	bne.n	800287c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <vTaskDelay+0x6c>)
 800286e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000190 	.word	0x20000190
 8002888:	e000ed04 	.word	0xe000ed04

0800288c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002892:	4b24      	ldr	r3, [pc, #144]	; (8002924 <vTaskStartScheduler+0x98>)
 8002894:	9301      	str	r3, [sp, #4]
 8002896:	2300      	movs	r3, #0
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	2300      	movs	r3, #0
 800289c:	2282      	movs	r2, #130	; 0x82
 800289e:	4922      	ldr	r1, [pc, #136]	; (8002928 <vTaskStartScheduler+0x9c>)
 80028a0:	4822      	ldr	r0, [pc, #136]	; (800292c <vTaskStartScheduler+0xa0>)
 80028a2:	f7ff fd73 	bl	800238c <xTaskCreate>
 80028a6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d124      	bne.n	80028f8 <vTaskStartScheduler+0x6c>
        __asm volatile
 80028ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b2:	f383 8811 	msr	BASEPRI, r3
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	60bb      	str	r3, [r7, #8]
    }
 80028c0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80028c2:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <vTaskStartScheduler+0xa4>)
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295
 80028c8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80028ca:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <vTaskStartScheduler+0xa8>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <vTaskStartScheduler+0xac>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80028d6:	4b19      	ldr	r3, [pc, #100]	; (800293c <vTaskStartScheduler+0xb0>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	4b12      	ldr	r3, [pc, #72]	; (8002924 <vTaskStartScheduler+0x98>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d102      	bne.n	80028e8 <vTaskStartScheduler+0x5c>
 80028e2:	f003 f969 	bl	8005bb8 <SEGGER_SYSVIEW_OnIdle>
 80028e6:	e004      	b.n	80028f2 <vTaskStartScheduler+0x66>
 80028e8:	4b14      	ldr	r3, [pc, #80]	; (800293c <vTaskStartScheduler+0xb0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f003 f9c1 	bl	8005c74 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80028f2:	f000 fe4f 	bl	8003594 <xPortStartScheduler>
 80028f6:	e00e      	b.n	8002916 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fe:	d10a      	bne.n	8002916 <vTaskStartScheduler+0x8a>
        __asm volatile
 8002900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002904:	f383 8811 	msr	BASEPRI, r3
 8002908:	f3bf 8f6f 	isb	sy
 800290c:	f3bf 8f4f 	dsb	sy
 8002910:	607b      	str	r3, [r7, #4]
    }
 8002912:	bf00      	nop
 8002914:	e7fe      	b.n	8002914 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <vTaskStartScheduler+0xb4>)
 8002918:	681b      	ldr	r3, [r3, #0]
}
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	2000018c 	.word	0x2000018c
 8002928:	08006250 	.word	0x08006250
 800292c:	08002e8d 	.word	0x08002e8d
 8002930:	20000188 	.word	0x20000188
 8002934:	20000174 	.word	0x20000174
 8002938:	2000016c 	.word	0x2000016c
 800293c:	20000090 	.word	0x20000090
 8002940:	2000000c 	.word	0x2000000c

08002944 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002948:	4b04      	ldr	r3, [pc, #16]	; (800295c <vTaskSuspendAll+0x18>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	3301      	adds	r3, #1
 800294e:	4a03      	ldr	r2, [pc, #12]	; (800295c <vTaskSuspendAll+0x18>)
 8002950:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002952:	bf00      	nop
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	20000190 	.word	0x20000190

08002960 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800296e:	4b73      	ldr	r3, [pc, #460]	; (8002b3c <xTaskResumeAll+0x1dc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10a      	bne.n	800298c <xTaskResumeAll+0x2c>
        __asm volatile
 8002976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297a:	f383 8811 	msr	BASEPRI, r3
 800297e:	f3bf 8f6f 	isb	sy
 8002982:	f3bf 8f4f 	dsb	sy
 8002986:	607b      	str	r3, [r7, #4]
    }
 8002988:	bf00      	nop
 800298a:	e7fe      	b.n	800298a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800298c:	f000 ff22 	bl	80037d4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002990:	4b6a      	ldr	r3, [pc, #424]	; (8002b3c <xTaskResumeAll+0x1dc>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3b01      	subs	r3, #1
 8002996:	4a69      	ldr	r2, [pc, #420]	; (8002b3c <xTaskResumeAll+0x1dc>)
 8002998:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800299a:	4b68      	ldr	r3, [pc, #416]	; (8002b3c <xTaskResumeAll+0x1dc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f040 80c4 	bne.w	8002b2c <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80029a4:	4b66      	ldr	r3, [pc, #408]	; (8002b40 <xTaskResumeAll+0x1e0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80bf 	beq.w	8002b2c <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029ae:	e08e      	b.n	8002ace <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029b0:	4b64      	ldr	r3, [pc, #400]	; (8002b44 <xTaskResumeAll+0x1e4>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	6a12      	ldr	r2, [r2, #32]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	69d2      	ldr	r2, [r2, #28]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3318      	adds	r3, #24
 80029da:	429a      	cmp	r2, r3
 80029dc:	d103      	bne.n	80029e6 <xTaskResumeAll+0x86>
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	6a1a      	ldr	r2, [r3, #32]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	2200      	movs	r2, #0
 80029ea:	629a      	str	r2, [r3, #40]	; 0x28
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	1e5a      	subs	r2, r3, #1
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	68d2      	ldr	r2, [r2, #12]
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	6892      	ldr	r2, [r2, #8]
 8002a0e:	605a      	str	r2, [r3, #4]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	3304      	adds	r3, #4
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d103      	bne.n	8002a24 <xTaskResumeAll+0xc4>
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	605a      	str	r2, [r3, #4]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2200      	movs	r2, #0
 8002a28:	615a      	str	r2, [r3, #20]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	1e5a      	subs	r2, r3, #1
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f003 f95e 	bl	8005cf8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	2201      	movs	r2, #1
 8002a42:	409a      	lsls	r2, r3
 8002a44:	4b40      	ldr	r3, [pc, #256]	; (8002b48 <xTaskResumeAll+0x1e8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	4a3f      	ldr	r2, [pc, #252]	; (8002b48 <xTaskResumeAll+0x1e8>)
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a52:	493e      	ldr	r1, [pc, #248]	; (8002b4c <xTaskResumeAll+0x1ec>)
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3304      	adds	r3, #4
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	609a      	str	r2, [r3, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	3204      	adds	r2, #4
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	1d1a      	adds	r2, r3, #4
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4a2e      	ldr	r2, [pc, #184]	; (8002b4c <xTaskResumeAll+0x1ec>)
 8002a92:	441a      	add	r2, r3
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	615a      	str	r2, [r3, #20]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9c:	492b      	ldr	r1, [pc, #172]	; (8002b4c <xTaskResumeAll+0x1ec>)
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	1c59      	adds	r1, r3, #1
 8002aac:	4827      	ldr	r0, [pc, #156]	; (8002b4c <xTaskResumeAll+0x1ec>)
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4403      	add	r3, r0
 8002ab8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002abe:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <xTaskResumeAll+0x1f0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d302      	bcc.n	8002ace <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002ac8:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <xTaskResumeAll+0x1f4>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ace:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <xTaskResumeAll+0x1e4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f47f af6c 	bne.w	80029b0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ade:	f000 fa6b 	bl	8002fb8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ae2:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <xTaskResumeAll+0x1f8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d010      	beq.n	8002b10 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002aee:	f000 f849 	bl	8002b84 <xTaskIncrementTick>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002af8:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <xTaskResumeAll+0x1f4>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f1      	bne.n	8002aee <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002b0a:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <xTaskResumeAll+0x1f8>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002b10:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <xTaskResumeAll+0x1f4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d009      	beq.n	8002b2c <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <xTaskResumeAll+0x1fc>)
 8002b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	f3bf 8f4f 	dsb	sy
 8002b28:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002b2c:	f000 fe82 	bl	8003834 <vPortExitCritical>

    return xAlreadyYielded;
 8002b30:	69bb      	ldr	r3, [r7, #24]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000190 	.word	0x20000190
 8002b40:	20000168 	.word	0x20000168
 8002b44:	20000128 	.word	0x20000128
 8002b48:	20000170 	.word	0x20000170
 8002b4c:	20000094 	.word	0x20000094
 8002b50:	20000090 	.word	0x20000090
 8002b54:	2000017c 	.word	0x2000017c
 8002b58:	20000178 	.word	0x20000178
 8002b5c:	e000ed04 	.word	0xe000ed04

08002b60 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b66:	f000 ff21 	bl	80039ac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002b6e:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <xTaskGetTickCountFromISR+0x20>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002b74:	683b      	ldr	r3, [r7, #0]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	2000016c 	.word	0x2000016c

08002b84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b8e:	4b7f      	ldr	r3, [pc, #508]	; (8002d8c <xTaskIncrementTick+0x208>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f040 80f0 	bne.w	8002d78 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b98:	4b7d      	ldr	r3, [pc, #500]	; (8002d90 <xTaskIncrementTick+0x20c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ba0:	4a7b      	ldr	r2, [pc, #492]	; (8002d90 <xTaskIncrementTick+0x20c>)
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d120      	bne.n	8002bee <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002bac:	4b79      	ldr	r3, [pc, #484]	; (8002d94 <xTaskIncrementTick+0x210>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <xTaskIncrementTick+0x48>
        __asm volatile
 8002bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bba:	f383 8811 	msr	BASEPRI, r3
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	607b      	str	r3, [r7, #4]
    }
 8002bc8:	bf00      	nop
 8002bca:	e7fe      	b.n	8002bca <xTaskIncrementTick+0x46>
 8002bcc:	4b71      	ldr	r3, [pc, #452]	; (8002d94 <xTaskIncrementTick+0x210>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	4b71      	ldr	r3, [pc, #452]	; (8002d98 <xTaskIncrementTick+0x214>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a6f      	ldr	r2, [pc, #444]	; (8002d94 <xTaskIncrementTick+0x210>)
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4a6f      	ldr	r2, [pc, #444]	; (8002d98 <xTaskIncrementTick+0x214>)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b6e      	ldr	r3, [pc, #440]	; (8002d9c <xTaskIncrementTick+0x218>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	4a6d      	ldr	r2, [pc, #436]	; (8002d9c <xTaskIncrementTick+0x218>)
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	f000 f9e5 	bl	8002fb8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002bee:	4b6c      	ldr	r3, [pc, #432]	; (8002da0 <xTaskIncrementTick+0x21c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6a3a      	ldr	r2, [r7, #32]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	f0c0 80aa 	bcc.w	8002d4e <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bfa:	4b66      	ldr	r3, [pc, #408]	; (8002d94 <xTaskIncrementTick+0x210>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d104      	bne.n	8002c0e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c04:	4b66      	ldr	r3, [pc, #408]	; (8002da0 <xTaskIncrementTick+0x21c>)
 8002c06:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0a:	601a      	str	r2, [r3, #0]
                    break;
 8002c0c:	e09f      	b.n	8002d4e <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c0e:	4b61      	ldr	r3, [pc, #388]	; (8002d94 <xTaskIncrementTick+0x210>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002c1e:	6a3a      	ldr	r2, [r7, #32]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d203      	bcs.n	8002c2e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002c26:	4a5e      	ldr	r2, [pc, #376]	; (8002da0 <xTaskIncrementTick+0x21c>)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002c2c:	e08f      	b.n	8002d4e <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	68d2      	ldr	r2, [r2, #12]
 8002c3c:	609a      	str	r2, [r3, #8]
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	6892      	ldr	r2, [r2, #8]
 8002c46:	605a      	str	r2, [r3, #4]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d103      	bne.n	8002c5c <xTaskIncrementTick+0xd8>
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	615a      	str	r2, [r3, #20]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	1e5a      	subs	r2, r3, #1
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01e      	beq.n	8002cb2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	6a12      	ldr	r2, [r2, #32]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	69d2      	ldr	r2, [r2, #28]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	3318      	adds	r3, #24
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d103      	bne.n	8002ca2 <xTaskIncrementTick+0x11e>
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	6a1a      	ldr	r2, [r3, #32]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	1e5a      	subs	r2, r3, #1
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f003 f81f 	bl	8005cf8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	4b38      	ldr	r3, [pc, #224]	; (8002da4 <xTaskIncrementTick+0x220>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	4a36      	ldr	r2, [pc, #216]	; (8002da4 <xTaskIncrementTick+0x220>)
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd0:	4935      	ldr	r1, [pc, #212]	; (8002da8 <xTaskIncrementTick+0x224>)
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	3304      	adds	r3, #4
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	60da      	str	r2, [r3, #12]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	3204      	adds	r2, #4
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	1d1a      	adds	r2, r3, #4
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4a26      	ldr	r2, [pc, #152]	; (8002da8 <xTaskIncrementTick+0x224>)
 8002d10:	441a      	add	r2, r3
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	615a      	str	r2, [r3, #20]
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1a:	4923      	ldr	r1, [pc, #140]	; (8002da8 <xTaskIncrementTick+0x224>)
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	1c59      	adds	r1, r3, #1
 8002d2a:	481f      	ldr	r0, [pc, #124]	; (8002da8 <xTaskIncrementTick+0x224>)
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4403      	add	r3, r0
 8002d36:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <xTaskIncrementTick+0x228>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	429a      	cmp	r2, r3
 8002d44:	f4ff af59 	bcc.w	8002bfa <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d4c:	e755      	b.n	8002bfa <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d4e:	4b17      	ldr	r3, [pc, #92]	; (8002dac <xTaskIncrementTick+0x228>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d54:	4914      	ldr	r1, [pc, #80]	; (8002da8 <xTaskIncrementTick+0x224>)
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d901      	bls.n	8002d6a <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 8002d66:	2301      	movs	r3, #1
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <xTaskIncrementTick+0x22c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 8002d72:	2301      	movs	r3, #1
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	e004      	b.n	8002d82 <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002d78:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <xTaskIncrementTick+0x230>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	4a0d      	ldr	r2, [pc, #52]	; (8002db4 <xTaskIncrementTick+0x230>)
 8002d80:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3728      	adds	r7, #40	; 0x28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20000190 	.word	0x20000190
 8002d90:	2000016c 	.word	0x2000016c
 8002d94:	20000120 	.word	0x20000120
 8002d98:	20000124 	.word	0x20000124
 8002d9c:	20000180 	.word	0x20000180
 8002da0:	20000188 	.word	0x20000188
 8002da4:	20000170 	.word	0x20000170
 8002da8:	20000094 	.word	0x20000094
 8002dac:	20000090 	.word	0x20000090
 8002db0:	2000017c 	.word	0x2000017c
 8002db4:	20000178 	.word	0x20000178

08002db8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002dbe:	4b2d      	ldr	r3, [pc, #180]	; (8002e74 <vTaskSwitchContext+0xbc>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002dc6:	4b2c      	ldr	r3, [pc, #176]	; (8002e78 <vTaskSwitchContext+0xc0>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002dcc:	e04d      	b.n	8002e6a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002dce:	4b2a      	ldr	r3, [pc, #168]	; (8002e78 <vTaskSwitchContext+0xc0>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dd4:	4b29      	ldr	r3, [pc, #164]	; (8002e7c <vTaskSwitchContext+0xc4>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002de2:	7afb      	ldrb	r3, [r7, #11]
 8002de4:	f1c3 031f 	rsb	r3, r3, #31
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	4925      	ldr	r1, [pc, #148]	; (8002e80 <vTaskSwitchContext+0xc8>)
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10a      	bne.n	8002e14 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e02:	f383 8811 	msr	BASEPRI, r3
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	607b      	str	r3, [r7, #4]
    }
 8002e10:	bf00      	nop
 8002e12:	e7fe      	b.n	8002e12 <vTaskSwitchContext+0x5a>
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4a18      	ldr	r2, [pc, #96]	; (8002e80 <vTaskSwitchContext+0xc8>)
 8002e20:	4413      	add	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	3308      	adds	r3, #8
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d104      	bne.n	8002e44 <vTaskSwitchContext+0x8c>
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	605a      	str	r2, [r3, #4]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <vTaskSwitchContext+0xcc>)
 8002e4c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <vTaskSwitchContext+0xcc>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <vTaskSwitchContext+0xd0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d102      	bne.n	8002e60 <vTaskSwitchContext+0xa8>
 8002e5a:	f002 fead 	bl	8005bb8 <SEGGER_SYSVIEW_OnIdle>
}
 8002e5e:	e004      	b.n	8002e6a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002e60:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <vTaskSwitchContext+0xcc>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f002 ff05 	bl	8005c74 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002e6a:	bf00      	nop
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000190 	.word	0x20000190
 8002e78:	2000017c 	.word	0x2000017c
 8002e7c:	20000170 	.word	0x20000170
 8002e80:	20000094 	.word	0x20000094
 8002e84:	20000090 	.word	0x20000090
 8002e88:	2000018c 	.word	0x2000018c

08002e8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002e94:	f000 f852 	bl	8002f3c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e98:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <prvIdleTask+0x28>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d9f9      	bls.n	8002e94 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <prvIdleTask+0x2c>)
 8002ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002eb0:	e7f0      	b.n	8002e94 <prvIdleTask+0x8>
 8002eb2:	bf00      	nop
 8002eb4:	20000094 	.word	0x20000094
 8002eb8:	e000ed04 	.word	0xe000ed04

08002ebc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
 8002ec6:	e00c      	b.n	8002ee2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4a12      	ldr	r2, [pc, #72]	; (8002f1c <prvInitialiseTaskLists+0x60>)
 8002ed4:	4413      	add	r3, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff f9a4 	bl	8002224 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d9ef      	bls.n	8002ec8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002ee8:	480d      	ldr	r0, [pc, #52]	; (8002f20 <prvInitialiseTaskLists+0x64>)
 8002eea:	f7ff f99b 	bl	8002224 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002eee:	480d      	ldr	r0, [pc, #52]	; (8002f24 <prvInitialiseTaskLists+0x68>)
 8002ef0:	f7ff f998 	bl	8002224 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002ef4:	480c      	ldr	r0, [pc, #48]	; (8002f28 <prvInitialiseTaskLists+0x6c>)
 8002ef6:	f7ff f995 	bl	8002224 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002efa:	480c      	ldr	r0, [pc, #48]	; (8002f2c <prvInitialiseTaskLists+0x70>)
 8002efc:	f7ff f992 	bl	8002224 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002f00:	480b      	ldr	r0, [pc, #44]	; (8002f30 <prvInitialiseTaskLists+0x74>)
 8002f02:	f7ff f98f 	bl	8002224 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002f06:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <prvInitialiseTaskLists+0x78>)
 8002f08:	4a05      	ldr	r2, [pc, #20]	; (8002f20 <prvInitialiseTaskLists+0x64>)
 8002f0a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <prvInitialiseTaskLists+0x7c>)
 8002f0e:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <prvInitialiseTaskLists+0x68>)
 8002f10:	601a      	str	r2, [r3, #0]
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000094 	.word	0x20000094
 8002f20:	200000f8 	.word	0x200000f8
 8002f24:	2000010c 	.word	0x2000010c
 8002f28:	20000128 	.word	0x20000128
 8002f2c:	2000013c 	.word	0x2000013c
 8002f30:	20000154 	.word	0x20000154
 8002f34:	20000120 	.word	0x20000120
 8002f38:	20000124 	.word	0x20000124

08002f3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f42:	e019      	b.n	8002f78 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002f44:	f000 fc46 	bl	80037d4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f48:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <prvCheckTasksWaitingTermination+0x50>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3304      	adds	r3, #4
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff f9ef 	bl	8002338 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <prvCheckTasksWaitingTermination+0x54>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	4a0b      	ldr	r2, [pc, #44]	; (8002f90 <prvCheckTasksWaitingTermination+0x54>)
 8002f62:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <prvCheckTasksWaitingTermination+0x58>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	4a0a      	ldr	r2, [pc, #40]	; (8002f94 <prvCheckTasksWaitingTermination+0x58>)
 8002f6c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002f6e:	f000 fc61 	bl	8003834 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f810 	bl	8002f98 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <prvCheckTasksWaitingTermination+0x58>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e1      	bne.n	8002f44 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002f80:	bf00      	nop
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	2000013c 	.word	0x2000013c
 8002f90:	20000168 	.word	0x20000168
 8002f94:	20000150 	.word	0x20000150

08002f98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fe21 	bl	8003bec <vPortFree>
                vPortFree( pxTCB );
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fe1e 	bl	8003bec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <prvResetNextTaskUnblockTime+0x30>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d104      	bne.n	8002fd0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <prvResetNextTaskUnblockTime+0x34>)
 8002fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fcc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002fce:	e005      	b.n	8002fdc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <prvResetNextTaskUnblockTime+0x30>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a04      	ldr	r2, [pc, #16]	; (8002fec <prvResetNextTaskUnblockTime+0x34>)
 8002fda:	6013      	str	r3, [r2, #0]
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000120 	.word	0x20000120
 8002fec:	20000188 	.word	0x20000188

08002ff0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
 8002ffc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	613b      	str	r3, [r7, #16]
    }
 8003016:	bf00      	nop
 8003018:	e7fe      	b.n	8003018 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800301a:	f000 fbdb 	bl	80037d4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800301e:	4b36      	ldr	r3, [pc, #216]	; (80030f8 <xTaskGenericNotifyWait+0x108>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4413      	add	r3, r2
 8003026:	3354      	adds	r3, #84	; 0x54
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d022      	beq.n	8003076 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003030:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <xTaskGenericNotifyWait+0x108>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	3214      	adds	r2, #20
 8003038:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	43d2      	mvns	r2, r2
 8003040:	4011      	ands	r1, r2
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	3214      	adds	r2, #20
 8003046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800304a:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <xTaskGenericNotifyWait+0x108>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4413      	add	r3, r2
 8003052:	3354      	adds	r3, #84	; 0x54
 8003054:	2201      	movs	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00b      	beq.n	8003076 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800305e:	2101      	movs	r1, #1
 8003060:	6a38      	ldr	r0, [r7, #32]
 8003062:	f000 f981 	bl	8003368 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003066:	4b25      	ldr	r3, [pc, #148]	; (80030fc <xTaskGenericNotifyWait+0x10c>)
 8003068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003076:	f000 fbdd 	bl	8003834 <vPortExitCritical>

        taskENTER_CRITICAL();
 800307a:	f000 fbab 	bl	80037d4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	4613      	mov	r3, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	2040      	movs	r0, #64	; 0x40
 800308c:	f002 f9c0 	bl	8005410 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003096:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <xTaskGenericNotifyWait+0x108>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	3214      	adds	r2, #20
 800309e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80030a6:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <xTaskGenericNotifyWait+0x108>)
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4413      	add	r3, r2
 80030ae:	3354      	adds	r3, #84	; 0x54
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d002      	beq.n	80030be <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	e00e      	b.n	80030dc <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80030be:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <xTaskGenericNotifyWait+0x108>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	3214      	adds	r2, #20
 80030c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	43d2      	mvns	r2, r2
 80030ce:	4011      	ands	r1, r2
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	3214      	adds	r2, #20
 80030d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80030d8:	2301      	movs	r3, #1
 80030da:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <xTaskGenericNotifyWait+0x108>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	3354      	adds	r3, #84	; 0x54
 80030e6:	2200      	movs	r2, #0
 80030e8:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80030ea:	f000 fba3 	bl	8003834 <vPortExitCritical>

        return xReturn;
 80030ee:	697b      	ldr	r3, [r7, #20]
    }
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20000090 	.word	0x20000090
 80030fc:	e000ed04 	.word	0xe000ed04

08003100 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003100:	b580      	push	{r7, lr}
 8003102:	b090      	sub	sp, #64	; 0x40
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800310e:	2301      	movs	r3, #1
 8003110:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <xTaskGenericNotify+0x2e>
        __asm volatile
 8003118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311c:	f383 8811 	msr	BASEPRI, r3
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	623b      	str	r3, [r7, #32]
    }
 800312a:	bf00      	nop
 800312c:	e7fe      	b.n	800312c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10a      	bne.n	800314a <xTaskGenericNotify+0x4a>
        __asm volatile
 8003134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	61fb      	str	r3, [r7, #28]
    }
 8003146:	bf00      	nop
 8003148:	e7fe      	b.n	8003148 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 800314e:	f000 fb41 	bl	80037d4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003154:	2b00      	cmp	r3, #0
 8003156:	d006      	beq.n	8003166 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	3214      	adds	r2, #20
 800315e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003164:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	4413      	add	r3, r2
 800316c:	3354      	adds	r3, #84	; 0x54
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	4413      	add	r3, r2
 800317a:	3354      	adds	r3, #84	; 0x54
 800317c:	2202      	movs	r2, #2
 800317e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	2b04      	cmp	r3, #4
 8003184:	d83b      	bhi.n	80031fe <xTaskGenericNotify+0xfe>
 8003186:	a201      	add	r2, pc, #4	; (adr r2, 800318c <xTaskGenericNotify+0x8c>)
 8003188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318c:	0800321d 	.word	0x0800321d
 8003190:	080031a1 	.word	0x080031a1
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031d5 	.word	0x080031d5
 800319c:	080031e3 	.word	0x080031e3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80031a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	3214      	adds	r2, #20
 80031a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	ea42 0103 	orr.w	r1, r2, r3
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	3214      	adds	r2, #20
 80031b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80031ba:	e032      	b.n	8003222 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80031bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	3214      	adds	r2, #20
 80031c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c6:	1c59      	adds	r1, r3, #1
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	3214      	adds	r2, #20
 80031ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80031d2:	e026      	b.n	8003222 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	3214      	adds	r2, #20
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80031e0:	e01f      	b.n	8003222 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80031e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d006      	beq.n	80031f8 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80031ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	3214      	adds	r2, #20
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80031f6:	e014      	b.n	8003222 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 80031fc:	e011      	b.n	8003222 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80031fe:	4b55      	ldr	r3, [pc, #340]	; (8003354 <xTaskGenericNotify+0x254>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00c      	beq.n	8003220 <xTaskGenericNotify+0x120>
        __asm volatile
 8003206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	61bb      	str	r3, [r7, #24]
    }
 8003218:	bf00      	nop
 800321a:	e7fe      	b.n	800321a <xTaskGenericNotify+0x11a>
                    break;
 800321c:	bf00      	nop
 800321e:	e000      	b.n	8003222 <xTaskGenericNotify+0x122>

                    break;
 8003220:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	4618      	mov	r0, r3
 8003226:	f002 fe09 	bl	8005e3c <SEGGER_SYSVIEW_ShrinkId>
 800322a:	4601      	mov	r1, r0
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	4613      	mov	r3, r2
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	203e      	movs	r0, #62	; 0x3e
 8003238:	f002 f8ea 	bl	8005410 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800323c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003240:	2b01      	cmp	r3, #1
 8003242:	d17f      	bne.n	8003344 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003250:	68d2      	ldr	r2, [r2, #12]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800325a:	6892      	ldr	r2, [r2, #8]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	3304      	adds	r3, #4
 8003266:	429a      	cmp	r2, r3
 8003268:	d103      	bne.n	8003272 <xTaskGenericNotify+0x172>
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003274:	2200      	movs	r2, #0
 8003276:	615a      	str	r2, [r3, #20]
 8003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	1e5a      	subs	r2, r3, #1
 800327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003280:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003284:	4618      	mov	r0, r3
 8003286:	f002 fd37 	bl	8005cf8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	2201      	movs	r2, #1
 8003290:	409a      	lsls	r2, r3
 8003292:	4b31      	ldr	r3, [pc, #196]	; (8003358 <xTaskGenericNotify+0x258>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4313      	orrs	r3, r2
 8003298:	4a2f      	ldr	r2, [pc, #188]	; (8003358 <xTaskGenericNotify+0x258>)
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a0:	492e      	ldr	r1, [pc, #184]	; (800335c <xTaskGenericNotify+0x25c>)
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	3304      	adds	r3, #4
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	60da      	str	r2, [r3, #12]
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c6:	3204      	adds	r2, #4
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	1d1a      	adds	r2, r3, #4
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	609a      	str	r2, [r3, #8]
 80032d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4a1f      	ldr	r2, [pc, #124]	; (800335c <xTaskGenericNotify+0x25c>)
 80032e0:	441a      	add	r2, r3
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	615a      	str	r2, [r3, #20]
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ea:	491c      	ldr	r1, [pc, #112]	; (800335c <xTaskGenericNotify+0x25c>)
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	1c59      	adds	r1, r3, #1
 80032fa:	4818      	ldr	r0, [pc, #96]	; (800335c <xTaskGenericNotify+0x25c>)
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4403      	add	r3, r0
 8003306:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <xTaskGenericNotify+0x226>
        __asm volatile
 8003310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	617b      	str	r3, [r7, #20]
    }
 8003322:	bf00      	nop
 8003324:	e7fe      	b.n	8003324 <xTaskGenericNotify+0x224>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332a:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <xTaskGenericNotify+0x260>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	429a      	cmp	r2, r3
 8003332:	d907      	bls.n	8003344 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <xTaskGenericNotify+0x264>)
 8003336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003344:	f000 fa76 	bl	8003834 <vPortExitCritical>

        return xReturn;
 8003348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800334a:	4618      	mov	r0, r3
 800334c:	3738      	adds	r7, #56	; 0x38
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	2000016c 	.word	0x2000016c
 8003358:	20000170 	.word	0x20000170
 800335c:	20000094 	.word	0x20000094
 8003360:	20000090 	.word	0x20000090
 8003364:	e000ed04 	.word	0xe000ed04

08003368 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003372:	4b3c      	ldr	r3, [pc, #240]	; (8003464 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003378:	4b3b      	ldr	r3, [pc, #236]	; (8003468 <prvAddCurrentTaskToDelayedList+0x100>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3304      	adds	r3, #4
 800337e:	4618      	mov	r0, r3
 8003380:	f7fe ffda 	bl	8002338 <uxListRemove>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10b      	bne.n	80033a2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800338a:	4b37      	ldr	r3, [pc, #220]	; (8003468 <prvAddCurrentTaskToDelayedList+0x100>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	2201      	movs	r2, #1
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43da      	mvns	r2, r3
 8003398:	4b34      	ldr	r3, [pc, #208]	; (800346c <prvAddCurrentTaskToDelayedList+0x104>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4013      	ands	r3, r2
 800339e:	4a33      	ldr	r2, [pc, #204]	; (800346c <prvAddCurrentTaskToDelayedList+0x104>)
 80033a0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d124      	bne.n	80033f4 <prvAddCurrentTaskToDelayedList+0x8c>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d021      	beq.n	80033f4 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033b0:	4b2f      	ldr	r3, [pc, #188]	; (8003470 <prvAddCurrentTaskToDelayedList+0x108>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	4b2c      	ldr	r3, [pc, #176]	; (8003468 <prvAddCurrentTaskToDelayedList+0x100>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	4b2a      	ldr	r3, [pc, #168]	; (8003468 <prvAddCurrentTaskToDelayedList+0x100>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	6892      	ldr	r2, [r2, #8]
 80033c6:	60da      	str	r2, [r3, #12]
 80033c8:	4b27      	ldr	r3, [pc, #156]	; (8003468 <prvAddCurrentTaskToDelayedList+0x100>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	3204      	adds	r2, #4
 80033d2:	605a      	str	r2, [r3, #4]
 80033d4:	4b24      	ldr	r3, [pc, #144]	; (8003468 <prvAddCurrentTaskToDelayedList+0x100>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	1d1a      	adds	r2, r3, #4
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	4b22      	ldr	r3, [pc, #136]	; (8003468 <prvAddCurrentTaskToDelayedList+0x100>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a23      	ldr	r2, [pc, #140]	; (8003470 <prvAddCurrentTaskToDelayedList+0x108>)
 80033e4:	615a      	str	r2, [r3, #20]
 80033e6:	4b22      	ldr	r3, [pc, #136]	; (8003470 <prvAddCurrentTaskToDelayedList+0x108>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3301      	adds	r3, #1
 80033ec:	4a20      	ldr	r2, [pc, #128]	; (8003470 <prvAddCurrentTaskToDelayedList+0x108>)
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80033f2:	e032      	b.n	800345a <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4413      	add	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <prvAddCurrentTaskToDelayedList+0x100>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	429a      	cmp	r2, r3
 800340a:	d20f      	bcs.n	800342c <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800340c:	4b16      	ldr	r3, [pc, #88]	; (8003468 <prvAddCurrentTaskToDelayedList+0x100>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2104      	movs	r1, #4
 8003412:	4618      	mov	r0, r3
 8003414:	f002 fcb2 	bl	8005d7c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003418:	4b16      	ldr	r3, [pc, #88]	; (8003474 <prvAddCurrentTaskToDelayedList+0x10c>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4b12      	ldr	r3, [pc, #72]	; (8003468 <prvAddCurrentTaskToDelayedList+0x100>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3304      	adds	r3, #4
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	f7fe ff4e 	bl	80022c6 <vListInsert>
}
 800342a:	e016      	b.n	800345a <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800342c:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <prvAddCurrentTaskToDelayedList+0x100>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2104      	movs	r1, #4
 8003432:	4618      	mov	r0, r3
 8003434:	f002 fca2 	bl	8005d7c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003438:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <prvAddCurrentTaskToDelayedList+0x110>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <prvAddCurrentTaskToDelayedList+0x100>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3304      	adds	r3, #4
 8003442:	4619      	mov	r1, r3
 8003444:	4610      	mov	r0, r2
 8003446:	f7fe ff3e 	bl	80022c6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800344a:	4b0c      	ldr	r3, [pc, #48]	; (800347c <prvAddCurrentTaskToDelayedList+0x114>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	429a      	cmp	r2, r3
 8003452:	d202      	bcs.n	800345a <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8003454:	4a09      	ldr	r2, [pc, #36]	; (800347c <prvAddCurrentTaskToDelayedList+0x114>)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6013      	str	r3, [r2, #0]
}
 800345a:	bf00      	nop
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	2000016c 	.word	0x2000016c
 8003468:	20000090 	.word	0x20000090
 800346c:	20000170 	.word	0x20000170
 8003470:	20000154 	.word	0x20000154
 8003474:	20000124 	.word	0x20000124
 8003478:	20000120 	.word	0x20000120
 800347c:	20000188 	.word	0x20000188

08003480 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3b04      	subs	r3, #4
 8003490:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003498:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	3b04      	subs	r3, #4
 800349e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f023 0201 	bic.w	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	3b04      	subs	r3, #4
 80034ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80034b0:	4a0c      	ldr	r2, [pc, #48]	; (80034e4 <pxPortInitialiseStack+0x64>)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	3b14      	subs	r3, #20
 80034ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3b04      	subs	r3, #4
 80034c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f06f 0202 	mvn.w	r2, #2
 80034ce:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	3b20      	subs	r3, #32
 80034d4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80034d6:	68fb      	ldr	r3, [r7, #12]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	080034e9 	.word	0x080034e9

080034e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80034f2:	4b12      	ldr	r3, [pc, #72]	; (800353c <prvTaskExitError+0x54>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fa:	d00a      	beq.n	8003512 <prvTaskExitError+0x2a>
        __asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	60fb      	str	r3, [r7, #12]
    }
 800350e:	bf00      	nop
 8003510:	e7fe      	b.n	8003510 <prvTaskExitError+0x28>
        __asm volatile
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	60bb      	str	r3, [r7, #8]
    }
 8003524:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003526:	bf00      	nop
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0fc      	beq.n	8003528 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800352e:	bf00      	nop
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	20000010 	.word	0x20000010

08003540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003540:	4b07      	ldr	r3, [pc, #28]	; (8003560 <pxCurrentTCBConst2>)
 8003542:	6819      	ldr	r1, [r3, #0]
 8003544:	6808      	ldr	r0, [r1, #0]
 8003546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800354a:	f380 8809 	msr	PSP, r0
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f04f 0000 	mov.w	r0, #0
 8003556:	f380 8811 	msr	BASEPRI, r0
 800355a:	4770      	bx	lr
 800355c:	f3af 8000 	nop.w

08003560 <pxCurrentTCBConst2>:
 8003560:	20000090 	.word	0x20000090
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop

08003568 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003568:	4808      	ldr	r0, [pc, #32]	; (800358c <prvPortStartFirstTask+0x24>)
 800356a:	6800      	ldr	r0, [r0, #0]
 800356c:	6800      	ldr	r0, [r0, #0]
 800356e:	f380 8808 	msr	MSP, r0
 8003572:	f04f 0000 	mov.w	r0, #0
 8003576:	f380 8814 	msr	CONTROL, r0
 800357a:	b662      	cpsie	i
 800357c:	b661      	cpsie	f
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	df00      	svc	0
 8003588:	bf00      	nop
 800358a:	0000      	.short	0x0000
 800358c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop

08003594 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800359a:	4b46      	ldr	r3, [pc, #280]	; (80036b4 <xPortStartScheduler+0x120>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a46      	ldr	r2, [pc, #280]	; (80036b8 <xPortStartScheduler+0x124>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d10a      	bne.n	80035ba <xPortStartScheduler+0x26>
        __asm volatile
 80035a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	613b      	str	r3, [r7, #16]
    }
 80035b6:	bf00      	nop
 80035b8:	e7fe      	b.n	80035b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80035ba:	4b3e      	ldr	r3, [pc, #248]	; (80036b4 <xPortStartScheduler+0x120>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a3f      	ldr	r2, [pc, #252]	; (80036bc <xPortStartScheduler+0x128>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d10a      	bne.n	80035da <xPortStartScheduler+0x46>
        __asm volatile
 80035c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	60fb      	str	r3, [r7, #12]
    }
 80035d6:	bf00      	nop
 80035d8:	e7fe      	b.n	80035d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035da:	4b39      	ldr	r3, [pc, #228]	; (80036c0 <xPortStartScheduler+0x12c>)
 80035dc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	22ff      	movs	r2, #255	; 0xff
 80035ea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <xPortStartScheduler+0x130>)
 8003600:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003602:	4b31      	ldr	r3, [pc, #196]	; (80036c8 <xPortStartScheduler+0x134>)
 8003604:	2207      	movs	r2, #7
 8003606:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003608:	e009      	b.n	800361e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800360a:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <xPortStartScheduler+0x134>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3b01      	subs	r3, #1
 8003610:	4a2d      	ldr	r2, [pc, #180]	; (80036c8 <xPortStartScheduler+0x134>)
 8003612:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	b2db      	uxtb	r3, r3
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	b2db      	uxtb	r3, r3
 800361c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003626:	2b80      	cmp	r3, #128	; 0x80
 8003628:	d0ef      	beq.n	800360a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800362a:	4b27      	ldr	r3, [pc, #156]	; (80036c8 <xPortStartScheduler+0x134>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f1c3 0307 	rsb	r3, r3, #7
 8003632:	2b04      	cmp	r3, #4
 8003634:	d00a      	beq.n	800364c <xPortStartScheduler+0xb8>
        __asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	60bb      	str	r3, [r7, #8]
    }
 8003648:	bf00      	nop
 800364a:	e7fe      	b.n	800364a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800364c:	4b1e      	ldr	r3, [pc, #120]	; (80036c8 <xPortStartScheduler+0x134>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <xPortStartScheduler+0x134>)
 8003654:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003656:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <xPortStartScheduler+0x134>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800365e:	4a1a      	ldr	r2, [pc, #104]	; (80036c8 <xPortStartScheduler+0x134>)
 8003660:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	b2da      	uxtb	r2, r3
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800366a:	4b18      	ldr	r3, [pc, #96]	; (80036cc <xPortStartScheduler+0x138>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a17      	ldr	r2, [pc, #92]	; (80036cc <xPortStartScheduler+0x138>)
 8003670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003674:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003676:	4b15      	ldr	r3, [pc, #84]	; (80036cc <xPortStartScheduler+0x138>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a14      	ldr	r2, [pc, #80]	; (80036cc <xPortStartScheduler+0x138>)
 800367c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003680:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003682:	f000 f963 	bl	800394c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003686:	4b12      	ldr	r3, [pc, #72]	; (80036d0 <xPortStartScheduler+0x13c>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800368c:	f000 f982 	bl	8003994 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003690:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <xPortStartScheduler+0x140>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a0f      	ldr	r2, [pc, #60]	; (80036d4 <xPortStartScheduler+0x140>)
 8003696:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800369a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800369c:	f7ff ff64 	bl	8003568 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80036a0:	f7ff fb8a 	bl	8002db8 <vTaskSwitchContext>
    prvTaskExitError();
 80036a4:	f7ff ff20 	bl	80034e8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	e000ed00 	.word	0xe000ed00
 80036b8:	410fc271 	.word	0x410fc271
 80036bc:	410fc270 	.word	0x410fc270
 80036c0:	e000e400 	.word	0xe000e400
 80036c4:	20000194 	.word	0x20000194
 80036c8:	20000198 	.word	0x20000198
 80036cc:	e000ed20 	.word	0xe000ed20
 80036d0:	20000010 	.word	0x20000010
 80036d4:	e000ef34 	.word	0xe000ef34

080036d8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80036de:	4b37      	ldr	r3, [pc, #220]	; (80037bc <vInitPrioGroupValue+0xe4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a37      	ldr	r2, [pc, #220]	; (80037c0 <vInitPrioGroupValue+0xe8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d10a      	bne.n	80036fe <vInitPrioGroupValue+0x26>
        __asm volatile
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	613b      	str	r3, [r7, #16]
    }
 80036fa:	bf00      	nop
 80036fc:	e7fe      	b.n	80036fc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80036fe:	4b2f      	ldr	r3, [pc, #188]	; (80037bc <vInitPrioGroupValue+0xe4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a30      	ldr	r2, [pc, #192]	; (80037c4 <vInitPrioGroupValue+0xec>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d10a      	bne.n	800371e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	60fb      	str	r3, [r7, #12]
    }
 800371a:	bf00      	nop
 800371c:	e7fe      	b.n	800371c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800371e:	4b2a      	ldr	r3, [pc, #168]	; (80037c8 <vInitPrioGroupValue+0xf0>)
 8003720:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	22ff      	movs	r2, #255	; 0xff
 800372e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003740:	b2da      	uxtb	r2, r3
 8003742:	4b22      	ldr	r3, [pc, #136]	; (80037cc <vInitPrioGroupValue+0xf4>)
 8003744:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003746:	4b22      	ldr	r3, [pc, #136]	; (80037d0 <vInitPrioGroupValue+0xf8>)
 8003748:	2207      	movs	r2, #7
 800374a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800374c:	e009      	b.n	8003762 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <vInitPrioGroupValue+0xf8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3b01      	subs	r3, #1
 8003754:	4a1e      	ldr	r2, [pc, #120]	; (80037d0 <vInitPrioGroupValue+0xf8>)
 8003756:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	b2db      	uxtb	r3, r3
 8003760:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376a:	2b80      	cmp	r3, #128	; 0x80
 800376c:	d0ef      	beq.n	800374e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800376e:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <vInitPrioGroupValue+0xf8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f1c3 0307 	rsb	r3, r3, #7
 8003776:	2b04      	cmp	r3, #4
 8003778:	d00a      	beq.n	8003790 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	60bb      	str	r3, [r7, #8]
    }
 800378c:	bf00      	nop
 800378e:	e7fe      	b.n	800378e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <vInitPrioGroupValue+0xf8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	021b      	lsls	r3, r3, #8
 8003796:	4a0e      	ldr	r2, [pc, #56]	; (80037d0 <vInitPrioGroupValue+0xf8>)
 8003798:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800379a:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <vInitPrioGroupValue+0xf8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037a2:	4a0b      	ldr	r2, [pc, #44]	; (80037d0 <vInitPrioGroupValue+0xf8>)
 80037a4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	e000ed00 	.word	0xe000ed00
 80037c0:	410fc271 	.word	0x410fc271
 80037c4:	410fc270 	.word	0x410fc270
 80037c8:	e000e400 	.word	0xe000e400
 80037cc:	20000194 	.word	0x20000194
 80037d0:	20000198 	.word	0x20000198

080037d4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
        __asm volatile
 80037da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	607b      	str	r3, [r7, #4]
    }
 80037ec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80037ee:	4b0f      	ldr	r3, [pc, #60]	; (800382c <vPortEnterCritical+0x58>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3301      	adds	r3, #1
 80037f4:	4a0d      	ldr	r2, [pc, #52]	; (800382c <vPortEnterCritical+0x58>)
 80037f6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80037f8:	4b0c      	ldr	r3, [pc, #48]	; (800382c <vPortEnterCritical+0x58>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d10f      	bne.n	8003820 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <vPortEnterCritical+0x5c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <vPortEnterCritical+0x4c>
        __asm volatile
 800380a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380e:	f383 8811 	msr	BASEPRI, r3
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	603b      	str	r3, [r7, #0]
    }
 800381c:	bf00      	nop
 800381e:	e7fe      	b.n	800381e <vPortEnterCritical+0x4a>
    }
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	20000010 	.word	0x20000010
 8003830:	e000ed04 	.word	0xe000ed04

08003834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800383a:	4b12      	ldr	r3, [pc, #72]	; (8003884 <vPortExitCritical+0x50>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <vPortExitCritical+0x24>
        __asm volatile
 8003842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	607b      	str	r3, [r7, #4]
    }
 8003854:	bf00      	nop
 8003856:	e7fe      	b.n	8003856 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <vPortExitCritical+0x50>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3b01      	subs	r3, #1
 800385e:	4a09      	ldr	r2, [pc, #36]	; (8003884 <vPortExitCritical+0x50>)
 8003860:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <vPortExitCritical+0x50>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d105      	bne.n	8003876 <vPortExitCritical+0x42>
 800386a:	2300      	movs	r3, #0
 800386c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003874:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000010 	.word	0x20000010
	...

08003890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003890:	f3ef 8009 	mrs	r0, PSP
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <pxCurrentTCBConst>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	f01e 0f10 	tst.w	lr, #16
 80038a0:	bf08      	it	eq
 80038a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80038a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038aa:	6010      	str	r0, [r2, #0]
 80038ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80038b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80038b4:	f380 8811 	msr	BASEPRI, r0
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f7ff fa7a 	bl	8002db8 <vTaskSwitchContext>
 80038c4:	f04f 0000 	mov.w	r0, #0
 80038c8:	f380 8811 	msr	BASEPRI, r0
 80038cc:	bc09      	pop	{r0, r3}
 80038ce:	6819      	ldr	r1, [r3, #0]
 80038d0:	6808      	ldr	r0, [r1, #0]
 80038d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d6:	f01e 0f10 	tst.w	lr, #16
 80038da:	bf08      	it	eq
 80038dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80038e0:	f380 8809 	msr	PSP, r0
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	f3af 8000 	nop.w

080038f0 <pxCurrentTCBConst>:
 80038f0:	20000090 	.word	0x20000090
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80038f4:	bf00      	nop
 80038f6:	bf00      	nop

080038f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
        __asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	607b      	str	r3, [r7, #4]
    }
 8003910:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003912:	f002 f8d7 	bl	8005ac4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003916:	f7ff f935 	bl	8002b84 <xTaskIncrementTick>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003920:	f002 f92e 	bl	8005b80 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003924:	4b08      	ldr	r3, [pc, #32]	; (8003948 <SysTick_Handler+0x50>)
 8003926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e001      	b.n	8003932 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800392e:	f002 f90b 	bl	8005b48 <SEGGER_SYSVIEW_RecordExitISR>
 8003932:	2300      	movs	r3, #0
 8003934:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	f383 8811 	msr	BASEPRI, r3
    }
 800393c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	e000ed04 	.word	0xe000ed04

0800394c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <vPortSetupTimerInterrupt+0x34>)
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003956:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <vPortSetupTimerInterrupt+0x38>)
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <vPortSetupTimerInterrupt+0x3c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0a      	ldr	r2, [pc, #40]	; (800398c <vPortSetupTimerInterrupt+0x40>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	099b      	lsrs	r3, r3, #6
 8003968:	4a09      	ldr	r2, [pc, #36]	; (8003990 <vPortSetupTimerInterrupt+0x44>)
 800396a:	3b01      	subs	r3, #1
 800396c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800396e:	4b04      	ldr	r3, [pc, #16]	; (8003980 <vPortSetupTimerInterrupt+0x34>)
 8003970:	2207      	movs	r2, #7
 8003972:	601a      	str	r2, [r3, #0]
}
 8003974:	bf00      	nop
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	e000e010 	.word	0xe000e010
 8003984:	e000e018 	.word	0xe000e018
 8003988:	20000000 	.word	0x20000000
 800398c:	10624dd3 	.word	0x10624dd3
 8003990:	e000e014 	.word	0xe000e014

08003994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80039a4 <vPortEnableVFP+0x10>
 8003998:	6801      	ldr	r1, [r0, #0]
 800399a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800399e:	6001      	str	r1, [r0, #0]
 80039a0:	4770      	bx	lr
 80039a2:	0000      	.short	0x0000
 80039a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop

080039ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80039b2:	f3ef 8305 	mrs	r3, IPSR
 80039b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b0f      	cmp	r3, #15
 80039bc:	d914      	bls.n	80039e8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80039be:	4a17      	ldr	r2, [pc, #92]	; (8003a1c <vPortValidateInterruptPriority+0x70>)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4413      	add	r3, r2
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80039c8:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <vPortValidateInterruptPriority+0x74>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	7afa      	ldrb	r2, [r7, #11]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d20a      	bcs.n	80039e8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80039d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	607b      	str	r3, [r7, #4]
    }
 80039e4:	bf00      	nop
 80039e6:	e7fe      	b.n	80039e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80039e8:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <vPortValidateInterruptPriority+0x78>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <vPortValidateInterruptPriority+0x7c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d90a      	bls.n	8003a0e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	603b      	str	r3, [r7, #0]
    }
 8003a0a:	bf00      	nop
 8003a0c:	e7fe      	b.n	8003a0c <vPortValidateInterruptPriority+0x60>
    }
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	e000e3f0 	.word	0xe000e3f0
 8003a20:	20000194 	.word	0x20000194
 8003a24:	e000ed0c 	.word	0xe000ed0c
 8003a28:	20000198 	.word	0x20000198

08003a2c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	; 0x28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003a38:	f7fe ff84 	bl	8002944 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003a3c:	4b65      	ldr	r3, [pc, #404]	; (8003bd4 <pvPortMalloc+0x1a8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003a44:	f000 f934 	bl	8003cb0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a48:	4b63      	ldr	r3, [pc, #396]	; (8003bd8 <pvPortMalloc+0x1ac>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f040 80a7 	bne.w	8003ba4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d02d      	beq.n	8003ab8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d227      	bcs.n	8003ab8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003a68:	2208      	movs	r2, #8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d021      	beq.n	8003abe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f023 0307 	bic.w	r3, r3, #7
 8003a80:	3308      	adds	r3, #8
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d214      	bcs.n	8003ab2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f023 0307 	bic.w	r3, r3, #7
 8003a8e:	3308      	adds	r3, #8
 8003a90:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d010      	beq.n	8003abe <pvPortMalloc+0x92>
        __asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	617b      	str	r3, [r7, #20]
    }
 8003aae:	bf00      	nop
 8003ab0:	e7fe      	b.n	8003ab0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ab6:	e002      	b.n	8003abe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	e000      	b.n	8003ac0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003abe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d06e      	beq.n	8003ba4 <pvPortMalloc+0x178>
 8003ac6:	4b45      	ldr	r3, [pc, #276]	; (8003bdc <pvPortMalloc+0x1b0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d869      	bhi.n	8003ba4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003ad0:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <pvPortMalloc+0x1b4>)
 8003ad2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003ad4:	4b42      	ldr	r3, [pc, #264]	; (8003be0 <pvPortMalloc+0x1b4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ada:	e004      	b.n	8003ae6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d903      	bls.n	8003af8 <pvPortMalloc+0xcc>
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f1      	bne.n	8003adc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003af8:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <pvPortMalloc+0x1a8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d050      	beq.n	8003ba4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2208      	movs	r2, #8
 8003b08:	4413      	add	r3, r2
 8003b0a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	1ad2      	subs	r2, r2, r3
 8003b1c:	2308      	movs	r3, #8
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d91f      	bls.n	8003b64 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <pvPortMalloc+0x120>
        __asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	613b      	str	r3, [r7, #16]
    }
 8003b48:	bf00      	nop
 8003b4a:	e7fe      	b.n	8003b4a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	1ad2      	subs	r2, r2, r3
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b5e:	69b8      	ldr	r0, [r7, #24]
 8003b60:	f000 f908 	bl	8003d74 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b64:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <pvPortMalloc+0x1b0>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	4a1b      	ldr	r2, [pc, #108]	; (8003bdc <pvPortMalloc+0x1b0>)
 8003b70:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b72:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <pvPortMalloc+0x1b0>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b1b      	ldr	r3, [pc, #108]	; (8003be4 <pvPortMalloc+0x1b8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d203      	bcs.n	8003b86 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b7e:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <pvPortMalloc+0x1b0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a18      	ldr	r2, [pc, #96]	; (8003be4 <pvPortMalloc+0x1b8>)
 8003b84:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <pvPortMalloc+0x1ac>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <pvPortMalloc+0x1bc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	4a11      	ldr	r2, [pc, #68]	; (8003be8 <pvPortMalloc+0x1bc>)
 8003ba2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003ba4:	f7fe fedc 	bl	8002960 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <pvPortMalloc+0x19c>
        __asm volatile
 8003bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	60fb      	str	r3, [r7, #12]
    }
 8003bc4:	bf00      	nop
 8003bc6:	e7fe      	b.n	8003bc6 <pvPortMalloc+0x19a>
    return pvReturn;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3728      	adds	r7, #40	; 0x28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20012da4 	.word	0x20012da4
 8003bd8:	20012db8 	.word	0x20012db8
 8003bdc:	20012da8 	.word	0x20012da8
 8003be0:	20012d9c 	.word	0x20012d9c
 8003be4:	20012dac 	.word	0x20012dac
 8003be8:	20012db0 	.word	0x20012db0

08003bec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d04d      	beq.n	8003c9a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003bfe:	2308      	movs	r3, #8
 8003c00:	425b      	negs	r3, r3
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4413      	add	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <vPortFree+0xb8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <vPortFree+0x44>
        __asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	60fb      	str	r3, [r7, #12]
    }
 8003c2c:	bf00      	nop
 8003c2e:	e7fe      	b.n	8003c2e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <vPortFree+0x62>
        __asm volatile
 8003c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	60bb      	str	r3, [r7, #8]
    }
 8003c4a:	bf00      	nop
 8003c4c:	e7fe      	b.n	8003c4c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	4b14      	ldr	r3, [pc, #80]	; (8003ca4 <vPortFree+0xb8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01e      	beq.n	8003c9a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d11a      	bne.n	8003c9a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <vPortFree+0xb8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	401a      	ands	r2, r3
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003c74:	f7fe fe66 	bl	8002944 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <vPortFree+0xbc>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4413      	add	r3, r2
 8003c82:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <vPortFree+0xbc>)
 8003c84:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c86:	6938      	ldr	r0, [r7, #16]
 8003c88:	f000 f874 	bl	8003d74 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003c8c:	4b07      	ldr	r3, [pc, #28]	; (8003cac <vPortFree+0xc0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3301      	adds	r3, #1
 8003c92:	4a06      	ldr	r2, [pc, #24]	; (8003cac <vPortFree+0xc0>)
 8003c94:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003c96:	f7fe fe63 	bl	8002960 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003c9a:	bf00      	nop
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20012db8 	.word	0x20012db8
 8003ca8:	20012da8 	.word	0x20012da8
 8003cac:	20012db4 	.word	0x20012db4

08003cb0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003cb6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003cba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003cbc:	4b27      	ldr	r3, [pc, #156]	; (8003d5c <prvHeapInit+0xac>)
 8003cbe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00c      	beq.n	8003ce4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3307      	adds	r3, #7
 8003cce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0307 	bic.w	r3, r3, #7
 8003cd6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	4a1f      	ldr	r2, [pc, #124]	; (8003d5c <prvHeapInit+0xac>)
 8003ce0:	4413      	add	r3, r2
 8003ce2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ce8:	4a1d      	ldr	r2, [pc, #116]	; (8003d60 <prvHeapInit+0xb0>)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003cee:	4b1c      	ldr	r3, [pc, #112]	; (8003d60 <prvHeapInit+0xb0>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0307 	bic.w	r3, r3, #7
 8003d0a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4a15      	ldr	r2, [pc, #84]	; (8003d64 <prvHeapInit+0xb4>)
 8003d10:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003d12:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <prvHeapInit+0xb4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2200      	movs	r2, #0
 8003d18:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003d1a:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <prvHeapInit+0xb4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	1ad2      	subs	r2, r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <prvHeapInit+0xb4>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	4a0a      	ldr	r2, [pc, #40]	; (8003d68 <prvHeapInit+0xb8>)
 8003d3e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	4a09      	ldr	r2, [pc, #36]	; (8003d6c <prvHeapInit+0xbc>)
 8003d46:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d48:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <prvHeapInit+0xc0>)
 8003d4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d4e:	601a      	str	r2, [r3, #0]
}
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	2000019c 	.word	0x2000019c
 8003d60:	20012d9c 	.word	0x20012d9c
 8003d64:	20012da4 	.word	0x20012da4
 8003d68:	20012dac 	.word	0x20012dac
 8003d6c:	20012da8 	.word	0x20012da8
 8003d70:	20012db8 	.word	0x20012db8

08003d74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d7c:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <prvInsertBlockIntoFreeList+0xac>)
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	e002      	b.n	8003d88 <prvInsertBlockIntoFreeList+0x14>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d8f7      	bhi.n	8003d82 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d108      	bne.n	8003db6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	441a      	add	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	441a      	add	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d118      	bne.n	8003dfc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <prvInsertBlockIntoFreeList+0xb0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d00d      	beq.n	8003df2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	441a      	add	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	e008      	b.n	8003e04 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003df2:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <prvInsertBlockIntoFreeList+0xb0>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	e003      	b.n	8003e04 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d002      	beq.n	8003e12 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e12:	bf00      	nop
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20012d9c 	.word	0x20012d9c
 8003e24:	20012da4 	.word	0x20012da4

08003e28 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003e2c:	4803      	ldr	r0, [pc, #12]	; (8003e3c <_cbSendSystemDesc+0x14>)
 8003e2e:	f001 fdf3 	bl	8005a18 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003e32:	4803      	ldr	r0, [pc, #12]	; (8003e40 <_cbSendSystemDesc+0x18>)
 8003e34:	f001 fdf0 	bl	8005a18 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003e38:	bf00      	nop
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	08006258 	.word	0x08006258
 8003e40:	080062a0 	.word	0x080062a0

08003e44 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <SEGGER_SYSVIEW_Conf+0x20>)
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <SEGGER_SYSVIEW_Conf+0x20>)
 8003e4e:	6819      	ldr	r1, [r3, #0]
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <SEGGER_SYSVIEW_Conf+0x24>)
 8003e52:	4a06      	ldr	r2, [pc, #24]	; (8003e6c <SEGGER_SYSVIEW_Conf+0x28>)
 8003e54:	f001 f9d4 	bl	8005200 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003e58:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003e5c:	f001 fa14 	bl	8005288 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003e60:	bf00      	nop
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20000000 	.word	0x20000000
 8003e68:	08003e29 	.word	0x08003e29
 8003e6c:	08006334 	.word	0x08006334

08003e70 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003e76:	2300      	movs	r3, #0
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	e033      	b.n	8003ee4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003e7c:	491e      	ldr	r1, [pc, #120]	; (8003ef8 <_cbSendTaskList+0x88>)
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	491a      	ldr	r1, [pc, #104]	; (8003ef8 <_cbSendTaskList+0x88>)
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	6819      	ldr	r1, [r3, #0]
 8003e9e:	4c16      	ldr	r4, [pc, #88]	; (8003ef8 <_cbSendTaskList+0x88>)
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4423      	add	r3, r4
 8003eac:	3308      	adds	r3, #8
 8003eae:	681c      	ldr	r4, [r3, #0]
 8003eb0:	4d11      	ldr	r5, [pc, #68]	; (8003ef8 <_cbSendTaskList+0x88>)
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	442b      	add	r3, r5
 8003ebe:	330c      	adds	r3, #12
 8003ec0:	681d      	ldr	r5, [r3, #0]
 8003ec2:	4e0d      	ldr	r6, [pc, #52]	; (8003ef8 <_cbSendTaskList+0x88>)
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4433      	add	r3, r6
 8003ed0:	3310      	adds	r3, #16
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	462b      	mov	r3, r5
 8003ed8:	4622      	mov	r2, r4
 8003eda:	f000 f979 	bl	80041d0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	607b      	str	r3, [r7, #4]
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <_cbSendTaskList+0x8c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d3c6      	bcc.n	8003e7c <_cbSendTaskList+0xc>
  }
}
 8003eee:	bf00      	nop
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ef8:	20012dbc 	.word	0x20012dbc
 8003efc:	20012e5c 	.word	0x20012e5c

08003f00 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003f08:	f7fe fe2a 	bl	8002b60 <xTaskGetTickCountFromISR>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2200      	movs	r2, #0
 8003f10:	469a      	mov	sl, r3
 8003f12:	4693      	mov	fp, r2
 8003f14:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003f18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	f04f 0a00 	mov.w	sl, #0
 8003f24:	f04f 0b00 	mov.w	fp, #0
 8003f28:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003f2c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003f30:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003f34:	4652      	mov	r2, sl
 8003f36:	465b      	mov	r3, fp
 8003f38:	1a14      	subs	r4, r2, r0
 8003f3a:	eb63 0501 	sbc.w	r5, r3, r1
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	00ab      	lsls	r3, r5, #2
 8003f48:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003f4c:	00a2      	lsls	r2, r4, #2
 8003f4e:	4614      	mov	r4, r2
 8003f50:	461d      	mov	r5, r3
 8003f52:	eb14 0800 	adds.w	r8, r4, r0
 8003f56:	eb45 0901 	adc.w	r9, r5, r1
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f6e:	4690      	mov	r8, r2
 8003f70:	4699      	mov	r9, r3
 8003f72:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003f76:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003f88 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003f96:	2205      	movs	r2, #5
 8003f98:	492b      	ldr	r1, [pc, #172]	; (8004048 <SYSVIEW_AddTask+0xc0>)
 8003f9a:	68b8      	ldr	r0, [r7, #8]
 8003f9c:	f002 f8ce 	bl	800613c <memcmp>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d04b      	beq.n	800403e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003fa6:	4b29      	ldr	r3, [pc, #164]	; (800404c <SYSVIEW_AddTask+0xc4>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b07      	cmp	r3, #7
 8003fac:	d903      	bls.n	8003fb6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003fae:	4828      	ldr	r0, [pc, #160]	; (8004050 <SYSVIEW_AddTask+0xc8>)
 8003fb0:	f002 f844 	bl	800603c <SEGGER_SYSVIEW_Warn>
    return;
 8003fb4:	e044      	b.n	8004040 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003fb6:	4b25      	ldr	r3, [pc, #148]	; (800404c <SYSVIEW_AddTask+0xc4>)
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4926      	ldr	r1, [pc, #152]	; (8004054 <SYSVIEW_AddTask+0xcc>)
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003fca:	4b20      	ldr	r3, [pc, #128]	; (800404c <SYSVIEW_AddTask+0xc4>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4921      	ldr	r1, [pc, #132]	; (8004054 <SYSVIEW_AddTask+0xcc>)
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	3304      	adds	r3, #4
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003fe0:	4b1a      	ldr	r3, [pc, #104]	; (800404c <SYSVIEW_AddTask+0xc4>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	491b      	ldr	r1, [pc, #108]	; (8004054 <SYSVIEW_AddTask+0xcc>)
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	3308      	adds	r3, #8
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003ff6:	4b15      	ldr	r3, [pc, #84]	; (800404c <SYSVIEW_AddTask+0xc4>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4916      	ldr	r1, [pc, #88]	; (8004054 <SYSVIEW_AddTask+0xcc>)
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	330c      	adds	r3, #12
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800400c:	4b0f      	ldr	r3, [pc, #60]	; (800404c <SYSVIEW_AddTask+0xc4>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4910      	ldr	r1, [pc, #64]	; (8004054 <SYSVIEW_AddTask+0xcc>)
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	3310      	adds	r3, #16
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <SYSVIEW_AddTask+0xc4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3301      	adds	r3, #1
 8004028:	4a08      	ldr	r2, [pc, #32]	; (800404c <SYSVIEW_AddTask+0xc4>)
 800402a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f8ca 	bl	80041d0 <SYSVIEW_SendTaskInfo>
 800403c:	e000      	b.n	8004040 <SYSVIEW_AddTask+0xb8>
    return;
 800403e:	bf00      	nop

}
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	080062b0 	.word	0x080062b0
 800404c:	20012e5c 	.word	0x20012e5c
 8004050:	080062b8 	.word	0x080062b8
 8004054:	20012dbc 	.word	0x20012dbc

08004058 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004060:	4b59      	ldr	r3, [pc, #356]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80ab 	beq.w	80041c0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	e00d      	b.n	800408c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004070:	4956      	ldr	r1, [pc, #344]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	429a      	cmp	r2, r3
 8004084:	d008      	beq.n	8004098 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3301      	adds	r3, #1
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	4b4e      	ldr	r3, [pc, #312]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	429a      	cmp	r2, r3
 8004094:	d3ec      	bcc.n	8004070 <SYSVIEW_DeleteTask+0x18>
 8004096:	e000      	b.n	800409a <SYSVIEW_DeleteTask+0x42>
      break;
 8004098:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800409a:	4b4b      	ldr	r3, [pc, #300]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3b01      	subs	r3, #1
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d111      	bne.n	80040ca <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4a46      	ldr	r2, [pc, #280]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 80040b2:	4413      	add	r3, r2
 80040b4:	2214      	movs	r2, #20
 80040b6:	2100      	movs	r1, #0
 80040b8:	4618      	mov	r0, r3
 80040ba:	f002 f85d 	bl	8006178 <memset>
    _NumTasks--;
 80040be:	4b42      	ldr	r3, [pc, #264]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	4a40      	ldr	r2, [pc, #256]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	e07b      	b.n	80041c2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80040ca:	4b3f      	ldr	r3, [pc, #252]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d276      	bcs.n	80041c2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80040d4:	4b3c      	ldr	r3, [pc, #240]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	1e5a      	subs	r2, r3, #1
 80040da:	493c      	ldr	r1, [pc, #240]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	6819      	ldr	r1, [r3, #0]
 80040e8:	4838      	ldr	r0, [pc, #224]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4403      	add	r3, r0
 80040f6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80040f8:	4b33      	ldr	r3, [pc, #204]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	1e5a      	subs	r2, r3, #1
 80040fe:	4933      	ldr	r1, [pc, #204]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	3304      	adds	r3, #4
 800410c:	6819      	ldr	r1, [r3, #0]
 800410e:	482f      	ldr	r0, [pc, #188]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4403      	add	r3, r0
 800411c:	3304      	adds	r3, #4
 800411e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004120:	4b29      	ldr	r3, [pc, #164]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	1e5a      	subs	r2, r3, #1
 8004126:	4929      	ldr	r1, [pc, #164]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	3308      	adds	r3, #8
 8004134:	6819      	ldr	r1, [r3, #0]
 8004136:	4825      	ldr	r0, [pc, #148]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4403      	add	r3, r0
 8004144:	3308      	adds	r3, #8
 8004146:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004148:	4b1f      	ldr	r3, [pc, #124]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	1e5a      	subs	r2, r3, #1
 800414e:	491f      	ldr	r1, [pc, #124]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	330c      	adds	r3, #12
 800415c:	6819      	ldr	r1, [r3, #0]
 800415e:	481b      	ldr	r0, [pc, #108]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4403      	add	r3, r0
 800416c:	330c      	adds	r3, #12
 800416e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8004170:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	1e5a      	subs	r2, r3, #1
 8004176:	4915      	ldr	r1, [pc, #84]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	3310      	adds	r3, #16
 8004184:	6819      	ldr	r1, [r3, #0]
 8004186:	4811      	ldr	r0, [pc, #68]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4403      	add	r3, r0
 8004194:	3310      	adds	r3, #16
 8004196:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	1e5a      	subs	r2, r3, #1
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4a09      	ldr	r2, [pc, #36]	; (80041cc <SYSVIEW_DeleteTask+0x174>)
 80041a8:	4413      	add	r3, r2
 80041aa:	2214      	movs	r2, #20
 80041ac:	2100      	movs	r1, #0
 80041ae:	4618      	mov	r0, r3
 80041b0:	f001 ffe2 	bl	8006178 <memset>
    _NumTasks--;
 80041b4:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	4a03      	ldr	r2, [pc, #12]	; (80041c8 <SYSVIEW_DeleteTask+0x170>)
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	e000      	b.n	80041c2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80041c0:	bf00      	nop
  }
}
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	20012e5c 	.word	0x20012e5c
 80041cc:	20012dbc 	.word	0x20012dbc

080041d0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08a      	sub	sp, #40	; 0x28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80041de:	f107 0314 	add.w	r3, r7, #20
 80041e2:	2214      	movs	r2, #20
 80041e4:	2100      	movs	r1, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	f001 ffc6 	bl	8006178 <memset>
  TaskInfo.TaskID     = TaskID;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004200:	f107 0314 	add.w	r3, r7, #20
 8004204:	4618      	mov	r0, r3
 8004206:	f001 fb0f 	bl	8005828 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800420a:	bf00      	nop
 800420c:	3728      	adds	r7, #40	; 0x28
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
	...

08004214 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800421a:	4b26      	ldr	r3, [pc, #152]	; (80042b4 <_DoInit+0xa0>)
 800421c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800421e:	22a8      	movs	r2, #168	; 0xa8
 8004220:	2100      	movs	r1, #0
 8004222:	6838      	ldr	r0, [r7, #0]
 8004224:	f001 ffa8 	bl	8006178 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2203      	movs	r2, #3
 800422c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2203      	movs	r2, #3
 8004232:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	4a20      	ldr	r2, [pc, #128]	; (80042b8 <_DoInit+0xa4>)
 8004238:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	4a1f      	ldr	r2, [pc, #124]	; (80042bc <_DoInit+0xa8>)
 800423e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004246:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2200      	movs	r2, #0
 800424c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2200      	movs	r2, #0
 8004252:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2200      	movs	r2, #0
 8004258:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	4a16      	ldr	r2, [pc, #88]	; (80042b8 <_DoInit+0xa4>)
 800425e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	4a17      	ldr	r2, [pc, #92]	; (80042c0 <_DoInit+0xac>)
 8004264:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2210      	movs	r2, #16
 800426a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2200      	movs	r2, #0
 8004270:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2200      	movs	r2, #0
 8004276:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2200      	movs	r2, #0
 800427c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800427e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004282:	2300      	movs	r3, #0
 8004284:	607b      	str	r3, [r7, #4]
 8004286:	e00c      	b.n	80042a2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f1c3 030f 	rsb	r3, r3, #15
 800428e:	4a0d      	ldr	r2, [pc, #52]	; (80042c4 <_DoInit+0xb0>)
 8004290:	5cd1      	ldrb	r1, [r2, r3]
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4413      	add	r3, r2
 8004298:	460a      	mov	r2, r1
 800429a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3301      	adds	r3, #1
 80042a0:	607b      	str	r3, [r7, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b0f      	cmp	r3, #15
 80042a6:	d9ef      	bls.n	8004288 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80042a8:	f3bf 8f5f 	dmb	sy
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20012e60 	.word	0x20012e60
 80042b8:	08006308 	.word	0x08006308
 80042bc:	20012f08 	.word	0x20012f08
 80042c0:	20013308 	.word	0x20013308
 80042c4:	0800633c 	.word	0x0800633c

080042c8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08c      	sub	sp, #48	; 0x30
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80042d4:	4b3e      	ldr	r3, [pc, #248]	; (80043d0 <SEGGER_RTT_ReadNoLock+0x108>)
 80042d6:	623b      	str	r3, [r7, #32]
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <SEGGER_RTT_ReadNoLock+0x1e>
 80042e2:	f7ff ff97 	bl	8004214 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4613      	mov	r3, r2
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	4413      	add	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	3360      	adds	r3, #96	; 0x60
 80042f2:	4a37      	ldr	r2, [pc, #220]	; (80043d0 <SEGGER_RTT_ReadNoLock+0x108>)
 80042f4:	4413      	add	r3, r2
 80042f6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004308:	2300      	movs	r3, #0
 800430a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800430c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	429a      	cmp	r2, r3
 8004312:	d92b      	bls.n	800436c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4293      	cmp	r3, r2
 8004324:	bf28      	it	cs
 8004326:	4613      	movcs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	4413      	add	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	6939      	ldr	r1, [r7, #16]
 8004338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800433a:	f001 ff0f 	bl	800615c <memcpy>
    NumBytesRead += NumBytesRem;
 800433e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	4413      	add	r3, r2
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	4413      	add	r3, r2
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	4413      	add	r3, r2
 800435c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004364:	429a      	cmp	r2, r3
 8004366:	d101      	bne.n	800436c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004368:	2300      	movs	r3, #0
 800436a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4293      	cmp	r3, r2
 800437a:	bf28      	it	cs
 800437c:	4613      	movcs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d019      	beq.n	80043ba <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438c:	4413      	add	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	6939      	ldr	r1, [r7, #16]
 8004394:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004396:	f001 fee1 	bl	800615c <memcpy>
    NumBytesRead += NumBytesRem;
 800439a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	4413      	add	r3, r2
 80043a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80043a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	4413      	add	r3, r2
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80043b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	4413      	add	r3, r2
 80043b8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043c4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3730      	adds	r7, #48	; 0x30
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	20012e60 	.word	0x20012e60

080043d4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80043e2:	4b3d      	ldr	r3, [pc, #244]	; (80044d8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80043f0:	f7ff ff10 	bl	8004214 <_DoInit>
  SEGGER_RTT_LOCK();
 80043f4:	f3ef 8311 	mrs	r3, BASEPRI
 80043f8:	f04f 0120 	mov.w	r1, #32
 80043fc:	f381 8811 	msr	BASEPRI, r1
 8004400:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004402:	4b35      	ldr	r3, [pc, #212]	; (80044d8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004404:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800440a:	6939      	ldr	r1, [r7, #16]
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	4613      	mov	r3, r2
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	4413      	add	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	440b      	add	r3, r1
 800441a:	3304      	adds	r3, #4
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d008      	beq.n	8004434 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	3301      	adds	r3, #1
 8004426:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	429a      	cmp	r2, r3
 8004430:	dbeb      	blt.n	800440a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004432:	e000      	b.n	8004436 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004434:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	429a      	cmp	r2, r3
 800443e:	da3f      	bge.n	80044c0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004440:	6939      	ldr	r1, [r7, #16]
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	4613      	mov	r3, r2
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	4413      	add	r3, r2
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	440b      	add	r3, r1
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004454:	6939      	ldr	r1, [r7, #16]
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	4613      	mov	r3, r2
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	4413      	add	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	440b      	add	r3, r1
 8004464:	3304      	adds	r3, #4
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800446a:	6939      	ldr	r1, [r7, #16]
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	4613      	mov	r3, r2
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	4413      	add	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	440b      	add	r3, r1
 8004478:	3320      	adds	r3, #32
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800447e:	6939      	ldr	r1, [r7, #16]
 8004480:	69fa      	ldr	r2, [r7, #28]
 8004482:	4613      	mov	r3, r2
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	4413      	add	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	440b      	add	r3, r1
 800448c:	3328      	adds	r3, #40	; 0x28
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004492:	6939      	ldr	r1, [r7, #16]
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	4613      	mov	r3, r2
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	4413      	add	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	440b      	add	r3, r1
 80044a0:	3324      	adds	r3, #36	; 0x24
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80044a6:	6939      	ldr	r1, [r7, #16]
 80044a8:	69fa      	ldr	r2, [r7, #28]
 80044aa:	4613      	mov	r3, r2
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	4413      	add	r3, r2
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	440b      	add	r3, r1
 80044b4:	332c      	adds	r3, #44	; 0x2c
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80044ba:	f3bf 8f5f 	dmb	sy
 80044be:	e002      	b.n	80044c6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80044c0:	f04f 33ff 	mov.w	r3, #4294967295
 80044c4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80044cc:	69fb      	ldr	r3, [r7, #28]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3720      	adds	r7, #32
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	20012e60 	.word	0x20012e60

080044dc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08a      	sub	sp, #40	; 0x28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80044ea:	4b21      	ldr	r3, [pc, #132]	; (8004570 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80044ec:	623b      	str	r3, [r7, #32]
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80044f8:	f7ff fe8c 	bl	8004214 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80044fc:	4b1c      	ldr	r3, [pc, #112]	; (8004570 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80044fe:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d82c      	bhi.n	8004560 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004506:	f3ef 8311 	mrs	r3, BASEPRI
 800450a:	f04f 0120 	mov.w	r1, #32
 800450e:	f381 8811 	msr	BASEPRI, r1
 8004512:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	4613      	mov	r3, r2
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	4413      	add	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	3360      	adds	r3, #96	; 0x60
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	4413      	add	r3, r2
 8004524:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00e      	beq.n	800454a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2200      	movs	r2, #0
 8004542:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2200      	movs	r2, #0
 8004548:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004550:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800455a:	2300      	movs	r3, #0
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
 800455e:	e002      	b.n	8004566 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004560:	f04f 33ff 	mov.w	r3, #4294967295
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004568:	4618      	mov	r0, r3
 800456a:	3728      	adds	r7, #40	; 0x28
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20012e60 	.word	0x20012e60

08004574 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00f      	beq.n	80045aa <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800458a:	e002      	b.n	8004592 <_EncodeStr+0x1e>
      Len++;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	3301      	adds	r3, #1
 8004590:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4413      	add	r3, r2
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f6      	bne.n	800458c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d901      	bls.n	80045aa <_EncodeStr+0x36>
      Len = Limit;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2bfe      	cmp	r3, #254	; 0xfe
 80045ae:	d806      	bhi.n	80045be <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	60fa      	str	r2, [r7, #12]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	e011      	b.n	80045e2 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	60fa      	str	r2, [r7, #12]
 80045c4:	22ff      	movs	r2, #255	; 0xff
 80045c6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	60fa      	str	r2, [r7, #12]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	0a19      	lsrs	r1, r3, #8
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	60fa      	str	r2, [r7, #12]
 80045de:	b2ca      	uxtb	r2, r1
 80045e0:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80045e6:	e00a      	b.n	80045fe <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	1c53      	adds	r3, r2, #1
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1c59      	adds	r1, r3, #1
 80045f2:	60f9      	str	r1, [r7, #12]
 80045f4:	7812      	ldrb	r2, [r2, #0]
 80045f6:	701a      	strb	r2, [r3, #0]
    n++;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	3301      	adds	r3, #1
 80045fc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	429a      	cmp	r2, r3
 8004604:	d3f0      	bcc.n	80045e8 <_EncodeStr+0x74>
  }
  return pPayload;
 8004606:	68fb      	ldr	r3, [r7, #12]
}
 8004608:	4618      	mov	r0, r3
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3307      	adds	r3, #7
}
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004632:	4b35      	ldr	r3, [pc, #212]	; (8004708 <_HandleIncomingPacket+0xdc>)
 8004634:	7e1b      	ldrb	r3, [r3, #24]
 8004636:	4618      	mov	r0, r3
 8004638:	1cfb      	adds	r3, r7, #3
 800463a:	2201      	movs	r2, #1
 800463c:	4619      	mov	r1, r3
 800463e:	f7ff fe43 	bl	80042c8 <SEGGER_RTT_ReadNoLock>
 8004642:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d052      	beq.n	80046f0 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800464a:	78fb      	ldrb	r3, [r7, #3]
 800464c:	2b80      	cmp	r3, #128	; 0x80
 800464e:	d031      	beq.n	80046b4 <_HandleIncomingPacket+0x88>
 8004650:	2b80      	cmp	r3, #128	; 0x80
 8004652:	dc40      	bgt.n	80046d6 <_HandleIncomingPacket+0xaa>
 8004654:	2b07      	cmp	r3, #7
 8004656:	dc15      	bgt.n	8004684 <_HandleIncomingPacket+0x58>
 8004658:	2b00      	cmp	r3, #0
 800465a:	dd3c      	ble.n	80046d6 <_HandleIncomingPacket+0xaa>
 800465c:	3b01      	subs	r3, #1
 800465e:	2b06      	cmp	r3, #6
 8004660:	d839      	bhi.n	80046d6 <_HandleIncomingPacket+0xaa>
 8004662:	a201      	add	r2, pc, #4	; (adr r2, 8004668 <_HandleIncomingPacket+0x3c>)
 8004664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004668:	0800468b 	.word	0x0800468b
 800466c:	08004691 	.word	0x08004691
 8004670:	08004697 	.word	0x08004697
 8004674:	0800469d 	.word	0x0800469d
 8004678:	080046a3 	.word	0x080046a3
 800467c:	080046a9 	.word	0x080046a9
 8004680:	080046af 	.word	0x080046af
 8004684:	2b7f      	cmp	r3, #127	; 0x7f
 8004686:	d035      	beq.n	80046f4 <_HandleIncomingPacket+0xc8>
 8004688:	e025      	b.n	80046d6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800468a:	f000 ff53 	bl	8005534 <SEGGER_SYSVIEW_Start>
      break;
 800468e:	e036      	b.n	80046fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004690:	f001 f80a 	bl	80056a8 <SEGGER_SYSVIEW_Stop>
      break;
 8004694:	e033      	b.n	80046fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004696:	f001 f9e3 	bl	8005a60 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800469a:	e030      	b.n	80046fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800469c:	f001 f9a8 	bl	80059f0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80046a0:	e02d      	b.n	80046fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80046a2:	f001 f827 	bl	80056f4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80046a6:	e02a      	b.n	80046fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80046a8:	f001 fc76 	bl	8005f98 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80046ac:	e027      	b.n	80046fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80046ae:	f001 fc55 	bl	8005f5c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80046b2:	e024      	b.n	80046fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80046b4:	4b14      	ldr	r3, [pc, #80]	; (8004708 <_HandleIncomingPacket+0xdc>)
 80046b6:	7e1b      	ldrb	r3, [r3, #24]
 80046b8:	4618      	mov	r0, r3
 80046ba:	1cfb      	adds	r3, r7, #3
 80046bc:	2201      	movs	r2, #1
 80046be:	4619      	mov	r1, r3
 80046c0:	f7ff fe02 	bl	80042c8 <SEGGER_RTT_ReadNoLock>
 80046c4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d015      	beq.n	80046f8 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 fbc4 	bl	8005e5c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80046d4:	e010      	b.n	80046f8 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80046d6:	78fb      	ldrb	r3, [r7, #3]
 80046d8:	b25b      	sxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	da0e      	bge.n	80046fc <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80046de:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <_HandleIncomingPacket+0xdc>)
 80046e0:	7e1b      	ldrb	r3, [r3, #24]
 80046e2:	4618      	mov	r0, r3
 80046e4:	1cfb      	adds	r3, r7, #3
 80046e6:	2201      	movs	r2, #1
 80046e8:	4619      	mov	r1, r3
 80046ea:	f7ff fded 	bl	80042c8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80046ee:	e005      	b.n	80046fc <_HandleIncomingPacket+0xd0>
    }
  }
 80046f0:	bf00      	nop
 80046f2:	e004      	b.n	80046fe <_HandleIncomingPacket+0xd2>
      break;
 80046f4:	bf00      	nop
 80046f6:	e002      	b.n	80046fe <_HandleIncomingPacket+0xd2>
      break;
 80046f8:	bf00      	nop
 80046fa:	e000      	b.n	80046fe <_HandleIncomingPacket+0xd2>
      break;
 80046fc:	bf00      	nop
}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20014320 	.word	0x20014320

0800470c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800470c:	b580      	push	{r7, lr}
 800470e:	b08c      	sub	sp, #48	; 0x30
 8004710:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004712:	2301      	movs	r3, #1
 8004714:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004716:	1d3b      	adds	r3, r7, #4
 8004718:	3301      	adds	r3, #1
 800471a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004720:	4b31      	ldr	r3, [pc, #196]	; (80047e8 <_TrySendOverflowPacket+0xdc>)
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
 8004726:	e00b      	b.n	8004740 <_TrySendOverflowPacket+0x34>
 8004728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472a:	b2da      	uxtb	r2, r3
 800472c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472e:	1c59      	adds	r1, r3, #1
 8004730:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004732:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	09db      	lsrs	r3, r3, #7
 800473e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	2b7f      	cmp	r3, #127	; 0x7f
 8004744:	d8f0      	bhi.n	8004728 <_TrySendOverflowPacket+0x1c>
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800474c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]
 8004752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004754:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004756:	4b25      	ldr	r3, [pc, #148]	; (80047ec <_TrySendOverflowPacket+0xe0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800475c:	4b22      	ldr	r3, [pc, #136]	; (80047e8 <_TrySendOverflowPacket+0xdc>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	623b      	str	r3, [r7, #32]
 800476e:	e00b      	b.n	8004788 <_TrySendOverflowPacket+0x7c>
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	b2da      	uxtb	r2, r3
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	1c59      	adds	r1, r3, #1
 8004778:	6279      	str	r1, [r7, #36]	; 0x24
 800477a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	09db      	lsrs	r3, r3, #7
 8004786:	623b      	str	r3, [r7, #32]
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	2b7f      	cmp	r3, #127	; 0x7f
 800478c:	d8f0      	bhi.n	8004770 <_TrySendOverflowPacket+0x64>
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	627a      	str	r2, [r7, #36]	; 0x24
 8004794:	6a3a      	ldr	r2, [r7, #32]
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800479e:	4b12      	ldr	r3, [pc, #72]	; (80047e8 <_TrySendOverflowPacket+0xdc>)
 80047a0:	785b      	ldrb	r3, [r3, #1]
 80047a2:	4618      	mov	r0, r3
 80047a4:	1d3b      	adds	r3, r7, #4
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	461a      	mov	r2, r3
 80047ac:	1d3b      	adds	r3, r7, #4
 80047ae:	4619      	mov	r1, r3
 80047b0:	f7fb fd16 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80047b4:	4603      	mov	r3, r0
 80047b6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d009      	beq.n	80047d2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80047be:	4a0a      	ldr	r2, [pc, #40]	; (80047e8 <_TrySendOverflowPacket+0xdc>)
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80047c4:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <_TrySendOverflowPacket+0xdc>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <_TrySendOverflowPacket+0xdc>)
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	e004      	b.n	80047dc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80047d2:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <_TrySendOverflowPacket+0xdc>)
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	3301      	adds	r3, #1
 80047d8:	4a03      	ldr	r2, [pc, #12]	; (80047e8 <_TrySendOverflowPacket+0xdc>)
 80047da:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80047dc:	693b      	ldr	r3, [r7, #16]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3730      	adds	r7, #48	; 0x30
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20014320 	.word	0x20014320
 80047ec:	e0001004 	.word	0xe0001004

080047f0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b08a      	sub	sp, #40	; 0x28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80047fc:	4b98      	ldr	r3, [pc, #608]	; (8004a60 <_SendPacket+0x270>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d010      	beq.n	8004826 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004804:	4b96      	ldr	r3, [pc, #600]	; (8004a60 <_SendPacket+0x270>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 812d 	beq.w	8004a68 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800480e:	4b94      	ldr	r3, [pc, #592]	; (8004a60 <_SendPacket+0x270>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d109      	bne.n	800482a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004816:	f7ff ff79 	bl	800470c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800481a:	4b91      	ldr	r3, [pc, #580]	; (8004a60 <_SendPacket+0x270>)
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2b01      	cmp	r3, #1
 8004820:	f040 8124 	bne.w	8004a6c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004824:	e001      	b.n	800482a <_SendPacket+0x3a>
    goto Send;
 8004826:	bf00      	nop
 8004828:	e000      	b.n	800482c <_SendPacket+0x3c>
Send:
 800482a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b1f      	cmp	r3, #31
 8004830:	d809      	bhi.n	8004846 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004832:	4b8b      	ldr	r3, [pc, #556]	; (8004a60 <_SendPacket+0x270>)
 8004834:	69da      	ldr	r2, [r3, #28]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	f040 8115 	bne.w	8004a70 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b17      	cmp	r3, #23
 800484a:	d807      	bhi.n	800485c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	3b01      	subs	r3, #1
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	b2da      	uxtb	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	e0c4      	b.n	80049e6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	2b7f      	cmp	r3, #127	; 0x7f
 8004868:	d912      	bls.n	8004890 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	09da      	lsrs	r2, r3, #7
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3b01      	subs	r3, #1
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	3a01      	subs	r2, #1
 8004882:	60fa      	str	r2, [r7, #12]
 8004884:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004888:	b2da      	uxtb	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	701a      	strb	r2, [r3, #0]
 800488e:	e006      	b.n	800489e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3b01      	subs	r3, #1
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	b2da      	uxtb	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b7e      	cmp	r3, #126	; 0x7e
 80048a2:	d807      	bhi.n	80048b4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	701a      	strb	r2, [r3, #0]
 80048b2:	e098      	b.n	80049e6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048ba:	d212      	bcs.n	80048e2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	09da      	lsrs	r2, r3, #7
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	3a01      	subs	r2, #1
 80048d4:	60fa      	str	r2, [r7, #12]
 80048d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	701a      	strb	r2, [r3, #0]
 80048e0:	e081      	b.n	80049e6 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048e8:	d21d      	bcs.n	8004926 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	0b9a      	lsrs	r2, r3, #14
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3b01      	subs	r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	09db      	lsrs	r3, r3, #7
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	3a01      	subs	r2, #1
 8004904:	60fa      	str	r2, [r7, #12]
 8004906:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800490a:	b2da      	uxtb	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	3a01      	subs	r2, #1
 8004918:	60fa      	str	r2, [r7, #12]
 800491a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800491e:	b2da      	uxtb	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	701a      	strb	r2, [r3, #0]
 8004924:	e05f      	b.n	80049e6 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800492c:	d228      	bcs.n	8004980 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	0d5a      	lsrs	r2, r3, #21
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3b01      	subs	r3, #1
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	0b9b      	lsrs	r3, r3, #14
 8004942:	b2db      	uxtb	r3, r3
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	3a01      	subs	r2, #1
 8004948:	60fa      	str	r2, [r7, #12]
 800494a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800494e:	b2da      	uxtb	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	09db      	lsrs	r3, r3, #7
 8004958:	b2db      	uxtb	r3, r3
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	3a01      	subs	r2, #1
 800495e:	60fa      	str	r2, [r7, #12]
 8004960:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004964:	b2da      	uxtb	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	b2db      	uxtb	r3, r3
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	3a01      	subs	r2, #1
 8004972:	60fa      	str	r2, [r7, #12]
 8004974:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004978:	b2da      	uxtb	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	e032      	b.n	80049e6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	0f1a      	lsrs	r2, r3, #28
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3b01      	subs	r3, #1
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	0d5b      	lsrs	r3, r3, #21
 8004994:	b2db      	uxtb	r3, r3
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	3a01      	subs	r2, #1
 800499a:	60fa      	str	r2, [r7, #12]
 800499c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	0b9b      	lsrs	r3, r3, #14
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	3a01      	subs	r2, #1
 80049b0:	60fa      	str	r2, [r7, #12]
 80049b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	09db      	lsrs	r3, r3, #7
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	3a01      	subs	r2, #1
 80049c6:	60fa      	str	r2, [r7, #12]
 80049c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	3a01      	subs	r2, #1
 80049da:	60fa      	str	r2, [r7, #12]
 80049dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80049e6:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <_SendPacket+0x274>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80049ec:	4b1c      	ldr	r3, [pc, #112]	; (8004a60 <_SendPacket+0x270>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	623b      	str	r3, [r7, #32]
 80049fe:	e00b      	b.n	8004a18 <_SendPacket+0x228>
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	1c59      	adds	r1, r3, #1
 8004a08:	6279      	str	r1, [r7, #36]	; 0x24
 8004a0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	701a      	strb	r2, [r3, #0]
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	09db      	lsrs	r3, r3, #7
 8004a16:	623b      	str	r3, [r7, #32]
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a1c:	d8f0      	bhi.n	8004a00 <_SendPacket+0x210>
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	627a      	str	r2, [r7, #36]	; 0x24
 8004a24:	6a3a      	ldr	r2, [r7, #32]
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004a2e:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <_SendPacket+0x270>)
 8004a30:	785b      	ldrb	r3, [r3, #1]
 8004a32:	4618      	mov	r0, r3
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	68f9      	ldr	r1, [r7, #12]
 8004a3e:	f7fb fbcf 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004a42:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004a4a:	4a05      	ldr	r2, [pc, #20]	; (8004a60 <_SendPacket+0x270>)
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	60d3      	str	r3, [r2, #12]
 8004a50:	e00f      	b.n	8004a72 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004a52:	4b03      	ldr	r3, [pc, #12]	; (8004a60 <_SendPacket+0x270>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	3301      	adds	r3, #1
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	4b01      	ldr	r3, [pc, #4]	; (8004a60 <_SendPacket+0x270>)
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	e008      	b.n	8004a72 <_SendPacket+0x282>
 8004a60:	20014320 	.word	0x20014320
 8004a64:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004a68:	bf00      	nop
 8004a6a:	e002      	b.n	8004a72 <_SendPacket+0x282>
      goto SendDone;
 8004a6c:	bf00      	nop
 8004a6e:	e000      	b.n	8004a72 <_SendPacket+0x282>
      goto SendDone;
 8004a70:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004a72:	4b14      	ldr	r3, [pc, #80]	; (8004ac4 <_SendPacket+0x2d4>)
 8004a74:	7e1b      	ldrb	r3, [r3, #24]
 8004a76:	4619      	mov	r1, r3
 8004a78:	4a13      	ldr	r2, [pc, #76]	; (8004ac8 <_SendPacket+0x2d8>)
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	440b      	add	r3, r1
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	4413      	add	r3, r2
 8004a84:	336c      	adds	r3, #108	; 0x6c
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	4b0e      	ldr	r3, [pc, #56]	; (8004ac4 <_SendPacket+0x2d4>)
 8004a8a:	7e1b      	ldrb	r3, [r3, #24]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	490e      	ldr	r1, [pc, #56]	; (8004ac8 <_SendPacket+0x2d8>)
 8004a90:	4603      	mov	r3, r0
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	4403      	add	r3, r0
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	440b      	add	r3, r1
 8004a9a:	3370      	adds	r3, #112	; 0x70
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d00b      	beq.n	8004aba <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004aa2:	4b08      	ldr	r3, [pc, #32]	; (8004ac4 <_SendPacket+0x2d4>)
 8004aa4:	789b      	ldrb	r3, [r3, #2]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d107      	bne.n	8004aba <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004aaa:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <_SendPacket+0x2d4>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004ab0:	f7ff fdbc 	bl	800462c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004ab4:	4b03      	ldr	r3, [pc, #12]	; (8004ac4 <_SendPacket+0x2d4>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004aba:	bf00      	nop
 8004abc:	3728      	adds	r7, #40	; 0x28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20014320 	.word	0x20014320
 8004ac8:	20012e60 	.word	0x20012e60

08004acc <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08a      	sub	sp, #40	; 0x28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	2b80      	cmp	r3, #128	; 0x80
 8004ae4:	d80a      	bhi.n	8004afc <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	1c59      	adds	r1, r3, #1
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6051      	str	r1, [r2, #4]
 8004af0:	78fa      	ldrb	r2, [r7, #3]
 8004af2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	2b80      	cmp	r3, #128	; 0x80
 8004b02:	d15a      	bne.n	8004bba <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	623b      	str	r3, [r7, #32]
 8004b24:	e00b      	b.n	8004b3e <_StoreChar+0x72>
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	1c59      	adds	r1, r3, #1
 8004b2e:	6279      	str	r1, [r7, #36]	; 0x24
 8004b30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	701a      	strb	r2, [r3, #0]
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	09db      	lsrs	r3, r3, #7
 8004b3c:	623b      	str	r3, [r7, #32]
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	2b7f      	cmp	r3, #127	; 0x7f
 8004b42:	d8f0      	bhi.n	8004b26 <_StoreChar+0x5a>
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	627a      	str	r2, [r7, #36]	; 0x24
 8004b4a:	6a3a      	ldr	r2, [r7, #32]
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	701a      	strb	r2, [r3, #0]
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	e00b      	b.n	8004b76 <_StoreChar+0xaa>
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	1c59      	adds	r1, r3, #1
 8004b66:	61f9      	str	r1, [r7, #28]
 8004b68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	701a      	strb	r2, [r3, #0]
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	09db      	lsrs	r3, r3, #7
 8004b74:	61bb      	str	r3, [r7, #24]
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b7f      	cmp	r3, #127	; 0x7f
 8004b7a:	d8f0      	bhi.n	8004b5e <_StoreChar+0x92>
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	61fa      	str	r2, [r7, #28]
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	701a      	strb	r2, [r3, #0]
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	221a      	movs	r2, #26
 8004b92:	6939      	ldr	r1, [r7, #16]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff fe2b 	bl	80047f0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff fd38 	bl	8004614 <_PreparePacket>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	611a      	str	r2, [r3, #16]
  }
}
 8004bba:	bf00      	nop
 8004bbc:	3728      	adds	r7, #40	; 0x28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08a      	sub	sp, #40	; 0x28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004bde:	e007      	b.n	8004bf0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004be0:	6a3a      	ldr	r2, [r7, #32]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be8:	623b      	str	r3, [r7, #32]
    Width++;
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	3301      	adds	r3, #1
 8004bee:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004bf0:	6a3a      	ldr	r2, [r7, #32]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d2f3      	bcs.n	8004be0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d901      	bls.n	8004c04 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d11f      	bne.n	8004c4e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d01c      	beq.n	8004c4e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d005      	beq.n	8004c2a <_PrintUnsigned+0x66>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d102      	bne.n	8004c2a <_PrintUnsigned+0x66>
        c = '0';
 8004c24:	2330      	movs	r3, #48	; 0x30
 8004c26:	76fb      	strb	r3, [r7, #27]
 8004c28:	e001      	b.n	8004c2e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004c2a:	2320      	movs	r3, #32
 8004c2c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c2e:	e007      	b.n	8004c40 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	3b01      	subs	r3, #1
 8004c34:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004c36:	7efb      	ldrb	r3, [r7, #27]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f7ff ff46 	bl	8004acc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <_PrintUnsigned+0x8a>
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d3f0      	bcc.n	8004c30 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d903      	bls.n	8004c5c <_PrintUnsigned+0x98>
      NumDigits--;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	603b      	str	r3, [r7, #0]
 8004c5a:	e009      	b.n	8004c70 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c64:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d200      	bcs.n	8004c70 <_PrintUnsigned+0xac>
        break;
 8004c6e:	e005      	b.n	8004c7c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	fb02 f303 	mul.w	r3, r2, r3
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004c7a:	e7e8      	b.n	8004c4e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c84:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8a:	fb02 f303 	mul.w	r3, r2, r3
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004c94:	4a15      	ldr	r2, [pc, #84]	; (8004cec <_PrintUnsigned+0x128>)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	4413      	add	r3, r2
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f7ff ff14 	bl	8004acc <_StoreChar>
    Digit /= Base;
 8004ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1e3      	bne.n	8004c7c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d011      	beq.n	8004ce2 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00e      	beq.n	8004ce2 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004cc4:	e006      	b.n	8004cd4 <_PrintUnsigned+0x110>
        FieldWidth--;
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004ccc:	2120      	movs	r1, #32
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f7ff fefc 	bl	8004acc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <_PrintUnsigned+0x11e>
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d3f1      	bcc.n	8004cc6 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004ce2:	bf00      	nop
 8004ce4:	3728      	adds	r7, #40	; 0x28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	0800635c 	.word	0x0800635c

08004cf0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bfb8      	it	lt
 8004d04:	425b      	neglt	r3, r3
 8004d06:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004d0c:	e007      	b.n	8004d1e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d16:	613b      	str	r3, [r7, #16]
    Width++;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	daf3      	bge.n	8004d0e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d901      	bls.n	8004d32 <_PrintInt+0x42>
    Width = NumDigits;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <_PrintInt+0x5e>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	db04      	blt.n	8004d48 <_PrintInt+0x58>
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <_PrintInt+0x5e>
    FieldWidth--;
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <_PrintInt+0x6e>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d016      	beq.n	8004d8c <_PrintInt+0x9c>
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d111      	bne.n	8004d8c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00e      	beq.n	8004d8c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004d6e:	e006      	b.n	8004d7e <_PrintInt+0x8e>
        FieldWidth--;
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004d76:	2120      	movs	r1, #32
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f7ff fea7 	bl	8004acc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <_PrintInt+0x9c>
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d3f1      	bcc.n	8004d70 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	da07      	bge.n	8004da2 <_PrintInt+0xb2>
    v = -v;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	425b      	negs	r3, r3
 8004d96:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004d98:	212d      	movs	r1, #45	; 0x2d
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff fe96 	bl	8004acc <_StoreChar>
 8004da0:	e008      	b.n	8004db4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004dac:	212b      	movs	r1, #43	; 0x2b
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f7ff fe8c 	bl	8004acc <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d019      	beq.n	8004df2 <_PrintInt+0x102>
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d114      	bne.n	8004df2 <_PrintInt+0x102>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d111      	bne.n	8004df2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00e      	beq.n	8004df2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004dd4:	e006      	b.n	8004de4 <_PrintInt+0xf4>
        FieldWidth--;
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004ddc:	2130      	movs	r1, #48	; 0x30
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f7ff fe74 	bl	8004acc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <_PrintInt+0x102>
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d3f1      	bcc.n	8004dd6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	9301      	str	r3, [sp, #4]
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f7ff fedf 	bl	8004bc4 <_PrintUnsigned>
}
 8004e06:	bf00      	nop
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b098      	sub	sp, #96	; 0x60
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e1c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e20:	f04f 0120 	mov.w	r1, #32
 8004e24:	f381 8811 	msr	BASEPRI, r1
 8004e28:	633b      	str	r3, [r7, #48]	; 0x30
 8004e2a:	48b7      	ldr	r0, [pc, #732]	; (8005108 <_VPrintTarget+0x2f8>)
 8004e2c:	f7ff fbf2 	bl	8004614 <_PreparePacket>
 8004e30:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004e32:	4bb5      	ldr	r3, [pc, #724]	; (8005108 <_VPrintTarget+0x2f8>)
 8004e34:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004e36:	2300      	movs	r3, #0
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	3301      	adds	r3, #1
 8004e42:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3301      	adds	r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004e56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 8183 	beq.w	8005166 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004e60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e64:	2b25      	cmp	r3, #37	; 0x25
 8004e66:	f040 8170 	bne.w	800514a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004e7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e7e:	3b23      	subs	r3, #35	; 0x23
 8004e80:	2b0d      	cmp	r3, #13
 8004e82:	d83f      	bhi.n	8004f04 <_VPrintTarget+0xf4>
 8004e84:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <_VPrintTarget+0x7c>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004ef5 	.word	0x08004ef5
 8004e90:	08004f05 	.word	0x08004f05
 8004e94:	08004f05 	.word	0x08004f05
 8004e98:	08004f05 	.word	0x08004f05
 8004e9c:	08004f05 	.word	0x08004f05
 8004ea0:	08004f05 	.word	0x08004f05
 8004ea4:	08004f05 	.word	0x08004f05
 8004ea8:	08004f05 	.word	0x08004f05
 8004eac:	08004ee5 	.word	0x08004ee5
 8004eb0:	08004f05 	.word	0x08004f05
 8004eb4:	08004ec5 	.word	0x08004ec5
 8004eb8:	08004f05 	.word	0x08004f05
 8004ebc:	08004f05 	.word	0x08004f05
 8004ec0:	08004ed5 	.word	0x08004ed5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	e01a      	b.n	8004f0a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ed6:	f043 0302 	orr.w	r3, r3, #2
 8004eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	e012      	b.n	8004f0a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004ee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee6:	f043 0304 	orr.w	r3, r3, #4
 8004eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	e00a      	b.n	8004f0a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef6:	f043 0308 	orr.w	r3, r3, #8
 8004efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3301      	adds	r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	e002      	b.n	8004f0a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004f04:	2300      	movs	r3, #0
 8004f06:	653b      	str	r3, [r7, #80]	; 0x50
 8004f08:	bf00      	nop
        }
      } while (v);
 8004f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1b0      	bne.n	8004e72 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004f10:	2300      	movs	r3, #0
 8004f12:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004f1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f20:	2b2f      	cmp	r3, #47	; 0x2f
 8004f22:	d912      	bls.n	8004f4a <_VPrintTarget+0x13a>
 8004f24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f28:	2b39      	cmp	r3, #57	; 0x39
 8004f2a:	d80e      	bhi.n	8004f4a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004f32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f42:	4413      	add	r3, r2
 8004f44:	3b30      	subs	r3, #48	; 0x30
 8004f46:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004f48:	e7e4      	b.n	8004f14 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004f56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f5c:	d11d      	bne.n	8004f9a <_VPrintTarget+0x18a>
        sFormat++;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3301      	adds	r3, #1
 8004f62:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004f6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f70:	2b2f      	cmp	r3, #47	; 0x2f
 8004f72:	d912      	bls.n	8004f9a <_VPrintTarget+0x18a>
 8004f74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f78:	2b39      	cmp	r3, #57	; 0x39
 8004f7a:	d80e      	bhi.n	8004f9a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004f82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f92:	4413      	add	r3, r2
 8004f94:	3b30      	subs	r3, #48	; 0x30
 8004f96:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004f98:	e7e4      	b.n	8004f64 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004fa2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fa6:	2b6c      	cmp	r3, #108	; 0x6c
 8004fa8:	d003      	beq.n	8004fb2 <_VPrintTarget+0x1a2>
 8004faa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fae:	2b68      	cmp	r3, #104	; 0x68
 8004fb0:	d107      	bne.n	8004fc2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004fc0:	e7ef      	b.n	8004fa2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004fc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fc6:	2b25      	cmp	r3, #37	; 0x25
 8004fc8:	f000 80b3 	beq.w	8005132 <_VPrintTarget+0x322>
 8004fcc:	2b25      	cmp	r3, #37	; 0x25
 8004fce:	f2c0 80b7 	blt.w	8005140 <_VPrintTarget+0x330>
 8004fd2:	2b78      	cmp	r3, #120	; 0x78
 8004fd4:	f300 80b4 	bgt.w	8005140 <_VPrintTarget+0x330>
 8004fd8:	2b58      	cmp	r3, #88	; 0x58
 8004fda:	f2c0 80b1 	blt.w	8005140 <_VPrintTarget+0x330>
 8004fde:	3b58      	subs	r3, #88	; 0x58
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	f200 80ad 	bhi.w	8005140 <_VPrintTarget+0x330>
 8004fe6:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <_VPrintTarget+0x1dc>)
 8004fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fec:	080050e3 	.word	0x080050e3
 8004ff0:	08005141 	.word	0x08005141
 8004ff4:	08005141 	.word	0x08005141
 8004ff8:	08005141 	.word	0x08005141
 8004ffc:	08005141 	.word	0x08005141
 8005000:	08005141 	.word	0x08005141
 8005004:	08005141 	.word	0x08005141
 8005008:	08005141 	.word	0x08005141
 800500c:	08005141 	.word	0x08005141
 8005010:	08005141 	.word	0x08005141
 8005014:	08005141 	.word	0x08005141
 8005018:	08005071 	.word	0x08005071
 800501c:	08005097 	.word	0x08005097
 8005020:	08005141 	.word	0x08005141
 8005024:	08005141 	.word	0x08005141
 8005028:	08005141 	.word	0x08005141
 800502c:	08005141 	.word	0x08005141
 8005030:	08005141 	.word	0x08005141
 8005034:	08005141 	.word	0x08005141
 8005038:	08005141 	.word	0x08005141
 800503c:	08005141 	.word	0x08005141
 8005040:	08005141 	.word	0x08005141
 8005044:	08005141 	.word	0x08005141
 8005048:	08005141 	.word	0x08005141
 800504c:	0800510d 	.word	0x0800510d
 8005050:	08005141 	.word	0x08005141
 8005054:	08005141 	.word	0x08005141
 8005058:	08005141 	.word	0x08005141
 800505c:	08005141 	.word	0x08005141
 8005060:	080050bd 	.word	0x080050bd
 8005064:	08005141 	.word	0x08005141
 8005068:	08005141 	.word	0x08005141
 800506c:	080050e3 	.word	0x080050e3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	1d19      	adds	r1, r3, #4
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6011      	str	r1, [r2, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800507e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005084:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005088:	f107 0314 	add.w	r3, r7, #20
 800508c:	4611      	mov	r1, r2
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff fd1c 	bl	8004acc <_StoreChar>
        break;
 8005094:	e055      	b.n	8005142 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	1d19      	adds	r1, r3, #4
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6011      	str	r1, [r2, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80050a4:	f107 0014 	add.w	r0, r7, #20
 80050a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b2:	220a      	movs	r2, #10
 80050b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050b6:	f7ff fe1b 	bl	8004cf0 <_PrintInt>
        break;
 80050ba:	e042      	b.n	8005142 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	1d19      	adds	r1, r3, #4
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6011      	str	r1, [r2, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80050ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050cc:	f107 0014 	add.w	r0, r7, #20
 80050d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d2:	9301      	str	r3, [sp, #4]
 80050d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050da:	220a      	movs	r2, #10
 80050dc:	f7ff fd72 	bl	8004bc4 <_PrintUnsigned>
        break;
 80050e0:	e02f      	b.n	8005142 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	1d19      	adds	r1, r3, #4
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6011      	str	r1, [r2, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80050f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050f2:	f107 0014 	add.w	r0, r7, #20
 80050f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005100:	2210      	movs	r2, #16
 8005102:	f7ff fd5f 	bl	8004bc4 <_PrintUnsigned>
        break;
 8005106:	e01c      	b.n	8005142 <_VPrintTarget+0x332>
 8005108:	20014350 	.word	0x20014350
      case 'p':
        v = va_arg(*pParamList, int);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	1d19      	adds	r1, r3, #4
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6011      	str	r1, [r2, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800511a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800511c:	f107 0014 	add.w	r0, r7, #20
 8005120:	2300      	movs	r3, #0
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	2308      	movs	r3, #8
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	2308      	movs	r3, #8
 800512a:	2210      	movs	r2, #16
 800512c:	f7ff fd4a 	bl	8004bc4 <_PrintUnsigned>
        break;
 8005130:	e007      	b.n	8005142 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005132:	f107 0314 	add.w	r3, r7, #20
 8005136:	2125      	movs	r1, #37	; 0x25
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff fcc7 	bl	8004acc <_StoreChar>
        break;
 800513e:	e000      	b.n	8005142 <_VPrintTarget+0x332>
      default:
        break;
 8005140:	bf00      	nop
      }
      sFormat++;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3301      	adds	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	e007      	b.n	800515a <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800514a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800514e:	f107 0314 	add.w	r3, r7, #20
 8005152:	4611      	mov	r1, r2
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff fcb9 	bl	8004acc <_StoreChar>
    }
  } while (*sFormat);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	f47f ae72 	bne.w	8004e48 <_VPrintTarget+0x38>
 8005164:	e000      	b.n	8005168 <_VPrintTarget+0x358>
      break;
 8005166:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	2b00      	cmp	r3, #0
 800516c:	d041      	beq.n	80051f2 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 800516e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	643b      	str	r3, [r7, #64]	; 0x40
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800517e:	e00b      	b.n	8005198 <_VPrintTarget+0x388>
 8005180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005182:	b2da      	uxtb	r2, r3
 8005184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005186:	1c59      	adds	r1, r3, #1
 8005188:	6439      	str	r1, [r7, #64]	; 0x40
 800518a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]
 8005192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005194:	09db      	lsrs	r3, r3, #7
 8005196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800519a:	2b7f      	cmp	r3, #127	; 0x7f
 800519c:	d8f0      	bhi.n	8005180 <_VPrintTarget+0x370>
 800519e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	643a      	str	r2, [r7, #64]	; 0x40
 80051a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ac:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80051b2:	2300      	movs	r3, #0
 80051b4:	637b      	str	r3, [r7, #52]	; 0x34
 80051b6:	e00b      	b.n	80051d0 <_VPrintTarget+0x3c0>
 80051b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051be:	1c59      	adds	r1, r3, #1
 80051c0:	63b9      	str	r1, [r7, #56]	; 0x38
 80051c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051cc:	09db      	lsrs	r3, r3, #7
 80051ce:	637b      	str	r3, [r7, #52]	; 0x34
 80051d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d2:	2b7f      	cmp	r3, #127	; 0x7f
 80051d4:	d8f0      	bhi.n	80051b8 <_VPrintTarget+0x3a8>
 80051d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	63ba      	str	r2, [r7, #56]	; 0x38
 80051dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e4:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	69b9      	ldr	r1, [r7, #24]
 80051ea:	221a      	movs	r2, #26
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff faff 	bl	80047f0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80051f8:	bf00      	nop
 80051fa:	3758      	adds	r7, #88	; 0x58
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af02      	add	r7, sp, #8
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800520e:	2300      	movs	r3, #0
 8005210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005214:	4917      	ldr	r1, [pc, #92]	; (8005274 <SEGGER_SYSVIEW_Init+0x74>)
 8005216:	4818      	ldr	r0, [pc, #96]	; (8005278 <SEGGER_SYSVIEW_Init+0x78>)
 8005218:	f7ff f8dc 	bl	80043d4 <SEGGER_RTT_AllocUpBuffer>
 800521c:	4603      	mov	r3, r0
 800521e:	b2da      	uxtb	r2, r3
 8005220:	4b16      	ldr	r3, [pc, #88]	; (800527c <SEGGER_SYSVIEW_Init+0x7c>)
 8005222:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005224:	4b15      	ldr	r3, [pc, #84]	; (800527c <SEGGER_SYSVIEW_Init+0x7c>)
 8005226:	785a      	ldrb	r2, [r3, #1]
 8005228:	4b14      	ldr	r3, [pc, #80]	; (800527c <SEGGER_SYSVIEW_Init+0x7c>)
 800522a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800522c:	4b13      	ldr	r3, [pc, #76]	; (800527c <SEGGER_SYSVIEW_Init+0x7c>)
 800522e:	7e1b      	ldrb	r3, [r3, #24]
 8005230:	4618      	mov	r0, r3
 8005232:	2300      	movs	r3, #0
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	2308      	movs	r3, #8
 8005238:	4a11      	ldr	r2, [pc, #68]	; (8005280 <SEGGER_SYSVIEW_Init+0x80>)
 800523a:	490f      	ldr	r1, [pc, #60]	; (8005278 <SEGGER_SYSVIEW_Init+0x78>)
 800523c:	f7ff f94e 	bl	80044dc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005240:	4b0e      	ldr	r3, [pc, #56]	; (800527c <SEGGER_SYSVIEW_Init+0x7c>)
 8005242:	2200      	movs	r2, #0
 8005244:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005246:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <SEGGER_SYSVIEW_Init+0x84>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a0c      	ldr	r2, [pc, #48]	; (800527c <SEGGER_SYSVIEW_Init+0x7c>)
 800524c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800524e:	4a0b      	ldr	r2, [pc, #44]	; (800527c <SEGGER_SYSVIEW_Init+0x7c>)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005254:	4a09      	ldr	r2, [pc, #36]	; (800527c <SEGGER_SYSVIEW_Init+0x7c>)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800525a:	4a08      	ldr	r2, [pc, #32]	; (800527c <SEGGER_SYSVIEW_Init+0x7c>)
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005260:	4a06      	ldr	r2, [pc, #24]	; (800527c <SEGGER_SYSVIEW_Init+0x7c>)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005266:	4b05      	ldr	r3, [pc, #20]	; (800527c <SEGGER_SYSVIEW_Init+0x7c>)
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20013318 	.word	0x20013318
 8005278:	08006314 	.word	0x08006314
 800527c:	20014320 	.word	0x20014320
 8005280:	20014318 	.word	0x20014318
 8005284:	e0001004 	.word	0xe0001004

08005288 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005290:	4a04      	ldr	r2, [pc, #16]	; (80052a4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6113      	str	r3, [r2, #16]
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	20014320 	.word	0x20014320

080052a8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80052b0:	f3ef 8311 	mrs	r3, BASEPRI
 80052b4:	f04f 0120 	mov.w	r1, #32
 80052b8:	f381 8811 	msr	BASEPRI, r1
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	4808      	ldr	r0, [pc, #32]	; (80052e0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80052c0:	f7ff f9a8 	bl	8004614 <_PreparePacket>
 80052c4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	68b8      	ldr	r0, [r7, #8]
 80052cc:	f7ff fa90 	bl	80047f0 <_SendPacket>
  RECORD_END();
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f383 8811 	msr	BASEPRI, r3
}
 80052d6:	bf00      	nop
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20014350 	.word	0x20014350

080052e4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80052ee:	f3ef 8311 	mrs	r3, BASEPRI
 80052f2:	f04f 0120 	mov.w	r1, #32
 80052f6:	f381 8811 	msr	BASEPRI, r1
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	4816      	ldr	r0, [pc, #88]	; (8005358 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80052fe:	f7ff f989 	bl	8004614 <_PreparePacket>
 8005302:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	61fb      	str	r3, [r7, #28]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	61bb      	str	r3, [r7, #24]
 8005310:	e00b      	b.n	800532a <SEGGER_SYSVIEW_RecordU32+0x46>
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	b2da      	uxtb	r2, r3
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	1c59      	adds	r1, r3, #1
 800531a:	61f9      	str	r1, [r7, #28]
 800531c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	701a      	strb	r2, [r3, #0]
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	09db      	lsrs	r3, r3, #7
 8005328:	61bb      	str	r3, [r7, #24]
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2b7f      	cmp	r3, #127	; 0x7f
 800532e:	d8f0      	bhi.n	8005312 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	61fa      	str	r2, [r7, #28]
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	701a      	strb	r2, [r3, #0]
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	68f9      	ldr	r1, [r7, #12]
 8005344:	6938      	ldr	r0, [r7, #16]
 8005346:	f7ff fa53 	bl	80047f0 <_SendPacket>
  RECORD_END();
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f383 8811 	msr	BASEPRI, r3
}
 8005350:	bf00      	nop
 8005352:	3720      	adds	r7, #32
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	20014350 	.word	0x20014350

0800535c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800535c:	b580      	push	{r7, lr}
 800535e:	b08c      	sub	sp, #48	; 0x30
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005368:	f3ef 8311 	mrs	r3, BASEPRI
 800536c:	f04f 0120 	mov.w	r1, #32
 8005370:	f381 8811 	msr	BASEPRI, r1
 8005374:	61fb      	str	r3, [r7, #28]
 8005376:	4825      	ldr	r0, [pc, #148]	; (800540c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005378:	f7ff f94c 	bl	8004614 <_PreparePacket>
 800537c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	62bb      	str	r3, [r7, #40]	; 0x28
 800538a:	e00b      	b.n	80053a4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538e:	b2da      	uxtb	r2, r3
 8005390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005392:	1c59      	adds	r1, r3, #1
 8005394:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	09db      	lsrs	r3, r3, #7
 80053a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80053a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a6:	2b7f      	cmp	r3, #127	; 0x7f
 80053a8:	d8f0      	bhi.n	800538c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80053aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	701a      	strb	r2, [r3, #0]
 80053b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	623b      	str	r3, [r7, #32]
 80053c2:	e00b      	b.n	80053dc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	1c59      	adds	r1, r3, #1
 80053cc:	6279      	str	r1, [r7, #36]	; 0x24
 80053ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053d2:	b2d2      	uxtb	r2, r2
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	09db      	lsrs	r3, r3, #7
 80053da:	623b      	str	r3, [r7, #32]
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	2b7f      	cmp	r3, #127	; 0x7f
 80053e0:	d8f0      	bhi.n	80053c4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	627a      	str	r2, [r7, #36]	; 0x24
 80053e8:	6a3a      	ldr	r2, [r7, #32]
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	6979      	ldr	r1, [r7, #20]
 80053f6:	69b8      	ldr	r0, [r7, #24]
 80053f8:	f7ff f9fa 	bl	80047f0 <_SendPacket>
  RECORD_END();
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f383 8811 	msr	BASEPRI, r3
}
 8005402:	bf00      	nop
 8005404:	3730      	adds	r7, #48	; 0x30
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20014350 	.word	0x20014350

08005410 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005410:	b580      	push	{r7, lr}
 8005412:	b090      	sub	sp, #64	; 0x40
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800541e:	f3ef 8311 	mrs	r3, BASEPRI
 8005422:	f04f 0120 	mov.w	r1, #32
 8005426:	f381 8811 	msr	BASEPRI, r1
 800542a:	61fb      	str	r3, [r7, #28]
 800542c:	4840      	ldr	r0, [pc, #256]	; (8005530 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800542e:	f7ff f8f1 	bl	8004614 <_PreparePacket>
 8005432:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005440:	e00b      	b.n	800545a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	b2da      	uxtb	r2, r3
 8005446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005448:	1c59      	adds	r1, r3, #1
 800544a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800544c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	701a      	strb	r2, [r3, #0]
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	09db      	lsrs	r3, r3, #7
 8005458:	63bb      	str	r3, [r7, #56]	; 0x38
 800545a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545c:	2b7f      	cmp	r3, #127	; 0x7f
 800545e:	d8f0      	bhi.n	8005442 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800546e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	633b      	str	r3, [r7, #48]	; 0x30
 8005478:	e00b      	b.n	8005492 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	b2da      	uxtb	r2, r3
 800547e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005480:	1c59      	adds	r1, r3, #1
 8005482:	6379      	str	r1, [r7, #52]	; 0x34
 8005484:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	701a      	strb	r2, [r3, #0]
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	09db      	lsrs	r3, r3, #7
 8005490:	633b      	str	r3, [r7, #48]	; 0x30
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	2b7f      	cmp	r3, #127	; 0x7f
 8005496:	d8f0      	bhi.n	800547a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	637a      	str	r2, [r7, #52]	; 0x34
 800549e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054a0:	b2d2      	uxtb	r2, r2
 80054a2:	701a      	strb	r2, [r3, #0]
 80054a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b0:	e00b      	b.n	80054ca <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	1c59      	adds	r1, r3, #1
 80054ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	701a      	strb	r2, [r3, #0]
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	09db      	lsrs	r3, r3, #7
 80054c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	2b7f      	cmp	r3, #127	; 0x7f
 80054ce:	d8f0      	bhi.n	80054b2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80054d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	701a      	strb	r2, [r3, #0]
 80054dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24
 80054e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e6:	623b      	str	r3, [r7, #32]
 80054e8:	e00b      	b.n	8005502 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	1c59      	adds	r1, r3, #1
 80054f2:	6279      	str	r1, [r7, #36]	; 0x24
 80054f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054f8:	b2d2      	uxtb	r2, r2
 80054fa:	701a      	strb	r2, [r3, #0]
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	09db      	lsrs	r3, r3, #7
 8005500:	623b      	str	r3, [r7, #32]
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	2b7f      	cmp	r3, #127	; 0x7f
 8005506:	d8f0      	bhi.n	80054ea <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	627a      	str	r2, [r7, #36]	; 0x24
 800550e:	6a3a      	ldr	r2, [r7, #32]
 8005510:	b2d2      	uxtb	r2, r2
 8005512:	701a      	strb	r2, [r3, #0]
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	6979      	ldr	r1, [r7, #20]
 800551c:	69b8      	ldr	r0, [r7, #24]
 800551e:	f7ff f967 	bl	80047f0 <_SendPacket>
  RECORD_END();
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	f383 8811 	msr	BASEPRI, r3
}
 8005528:	bf00      	nop
 800552a:	3740      	adds	r7, #64	; 0x40
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20014350 	.word	0x20014350

08005534 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b08c      	sub	sp, #48	; 0x30
 8005538:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800553a:	4b58      	ldr	r3, [pc, #352]	; (800569c <SEGGER_SYSVIEW_Start+0x168>)
 800553c:	2201      	movs	r2, #1
 800553e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005540:	f3ef 8311 	mrs	r3, BASEPRI
 8005544:	f04f 0120 	mov.w	r1, #32
 8005548:	f381 8811 	msr	BASEPRI, r1
 800554c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800554e:	4b53      	ldr	r3, [pc, #332]	; (800569c <SEGGER_SYSVIEW_Start+0x168>)
 8005550:	785b      	ldrb	r3, [r3, #1]
 8005552:	220a      	movs	r2, #10
 8005554:	4952      	ldr	r1, [pc, #328]	; (80056a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005556:	4618      	mov	r0, r3
 8005558:	f7fa fe42 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005562:	200a      	movs	r0, #10
 8005564:	f7ff fea0 	bl	80052a8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005568:	f3ef 8311 	mrs	r3, BASEPRI
 800556c:	f04f 0120 	mov.w	r1, #32
 8005570:	f381 8811 	msr	BASEPRI, r1
 8005574:	60bb      	str	r3, [r7, #8]
 8005576:	484b      	ldr	r0, [pc, #300]	; (80056a4 <SEGGER_SYSVIEW_Start+0x170>)
 8005578:	f7ff f84c 	bl	8004614 <_PreparePacket>
 800557c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005586:	4b45      	ldr	r3, [pc, #276]	; (800569c <SEGGER_SYSVIEW_Start+0x168>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	62bb      	str	r3, [r7, #40]	; 0x28
 800558c:	e00b      	b.n	80055a6 <SEGGER_SYSVIEW_Start+0x72>
 800558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005590:	b2da      	uxtb	r2, r3
 8005592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005594:	1c59      	adds	r1, r3, #1
 8005596:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005598:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	701a      	strb	r2, [r3, #0]
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	09db      	lsrs	r3, r3, #7
 80055a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a8:	2b7f      	cmp	r3, #127	; 0x7f
 80055aa:	d8f0      	bhi.n	800558e <SEGGER_SYSVIEW_Start+0x5a>
 80055ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	701a      	strb	r2, [r3, #0]
 80055b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	627b      	str	r3, [r7, #36]	; 0x24
 80055c0:	4b36      	ldr	r3, [pc, #216]	; (800569c <SEGGER_SYSVIEW_Start+0x168>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	623b      	str	r3, [r7, #32]
 80055c6:	e00b      	b.n	80055e0 <SEGGER_SYSVIEW_Start+0xac>
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	1c59      	adds	r1, r3, #1
 80055d0:	6279      	str	r1, [r7, #36]	; 0x24
 80055d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	09db      	lsrs	r3, r3, #7
 80055de:	623b      	str	r3, [r7, #32]
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	2b7f      	cmp	r3, #127	; 0x7f
 80055e4:	d8f0      	bhi.n	80055c8 <SEGGER_SYSVIEW_Start+0x94>
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	627a      	str	r2, [r7, #36]	; 0x24
 80055ec:	6a3a      	ldr	r2, [r7, #32]
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	61fb      	str	r3, [r7, #28]
 80055fa:	4b28      	ldr	r3, [pc, #160]	; (800569c <SEGGER_SYSVIEW_Start+0x168>)
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	61bb      	str	r3, [r7, #24]
 8005600:	e00b      	b.n	800561a <SEGGER_SYSVIEW_Start+0xe6>
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	b2da      	uxtb	r2, r3
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	1c59      	adds	r1, r3, #1
 800560a:	61f9      	str	r1, [r7, #28]
 800560c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	701a      	strb	r2, [r3, #0]
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	09db      	lsrs	r3, r3, #7
 8005618:	61bb      	str	r3, [r7, #24]
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	2b7f      	cmp	r3, #127	; 0x7f
 800561e:	d8f0      	bhi.n	8005602 <SEGGER_SYSVIEW_Start+0xce>
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	61fa      	str	r2, [r7, #28]
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	701a      	strb	r2, [r3, #0]
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	e00b      	b.n	8005652 <SEGGER_SYSVIEW_Start+0x11e>
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	b2da      	uxtb	r2, r3
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	1c59      	adds	r1, r3, #1
 8005642:	6179      	str	r1, [r7, #20]
 8005644:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	09db      	lsrs	r3, r3, #7
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	2b7f      	cmp	r3, #127	; 0x7f
 8005656:	d8f0      	bhi.n	800563a <SEGGER_SYSVIEW_Start+0x106>
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	617a      	str	r2, [r7, #20]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005668:	2218      	movs	r2, #24
 800566a:	6839      	ldr	r1, [r7, #0]
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff f8bf 	bl	80047f0 <_SendPacket>
      RECORD_END();
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005678:	4b08      	ldr	r3, [pc, #32]	; (800569c <SEGGER_SYSVIEW_Start+0x168>)
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005680:	4b06      	ldr	r3, [pc, #24]	; (800569c <SEGGER_SYSVIEW_Start+0x168>)
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005686:	f000 f9eb 	bl	8005a60 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800568a:	f000 f9b1 	bl	80059f0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800568e:	f000 fc83 	bl	8005f98 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005692:	bf00      	nop
 8005694:	3730      	adds	r7, #48	; 0x30
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	20014320 	.word	0x20014320
 80056a0:	08006350 	.word	0x08006350
 80056a4:	20014350 	.word	0x20014350

080056a8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80056ae:	f3ef 8311 	mrs	r3, BASEPRI
 80056b2:	f04f 0120 	mov.w	r1, #32
 80056b6:	f381 8811 	msr	BASEPRI, r1
 80056ba:	607b      	str	r3, [r7, #4]
 80056bc:	480b      	ldr	r0, [pc, #44]	; (80056ec <SEGGER_SYSVIEW_Stop+0x44>)
 80056be:	f7fe ffa9 	bl	8004614 <_PreparePacket>
 80056c2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80056c4:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d007      	beq.n	80056dc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80056cc:	220b      	movs	r2, #11
 80056ce:	6839      	ldr	r1, [r7, #0]
 80056d0:	6838      	ldr	r0, [r7, #0]
 80056d2:	f7ff f88d 	bl	80047f0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80056d6:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80056d8:	2200      	movs	r2, #0
 80056da:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f383 8811 	msr	BASEPRI, r3
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20014350 	.word	0x20014350
 80056f0:	20014320 	.word	0x20014320

080056f4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b08c      	sub	sp, #48	; 0x30
 80056f8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80056fa:	f3ef 8311 	mrs	r3, BASEPRI
 80056fe:	f04f 0120 	mov.w	r1, #32
 8005702:	f381 8811 	msr	BASEPRI, r1
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	4845      	ldr	r0, [pc, #276]	; (8005820 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800570a:	f7fe ff83 	bl	8004614 <_PreparePacket>
 800570e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005718:	4b42      	ldr	r3, [pc, #264]	; (8005824 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	62bb      	str	r3, [r7, #40]	; 0x28
 800571e:	e00b      	b.n	8005738 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005722:	b2da      	uxtb	r2, r3
 8005724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005726:	1c59      	adds	r1, r3, #1
 8005728:	62f9      	str	r1, [r7, #44]	; 0x2c
 800572a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	09db      	lsrs	r3, r3, #7
 8005736:	62bb      	str	r3, [r7, #40]	; 0x28
 8005738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573a:	2b7f      	cmp	r3, #127	; 0x7f
 800573c:	d8f0      	bhi.n	8005720 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	627b      	str	r3, [r7, #36]	; 0x24
 8005752:	4b34      	ldr	r3, [pc, #208]	; (8005824 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	623b      	str	r3, [r7, #32]
 8005758:	e00b      	b.n	8005772 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	b2da      	uxtb	r2, r3
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	1c59      	adds	r1, r3, #1
 8005762:	6279      	str	r1, [r7, #36]	; 0x24
 8005764:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	09db      	lsrs	r3, r3, #7
 8005770:	623b      	str	r3, [r7, #32]
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	2b7f      	cmp	r3, #127	; 0x7f
 8005776:	d8f0      	bhi.n	800575a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	627a      	str	r2, [r7, #36]	; 0x24
 800577e:	6a3a      	ldr	r2, [r7, #32]
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	61fb      	str	r3, [r7, #28]
 800578c:	4b25      	ldr	r3, [pc, #148]	; (8005824 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	61bb      	str	r3, [r7, #24]
 8005792:	e00b      	b.n	80057ac <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	b2da      	uxtb	r2, r3
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	1c59      	adds	r1, r3, #1
 800579c:	61f9      	str	r1, [r7, #28]
 800579e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	09db      	lsrs	r3, r3, #7
 80057aa:	61bb      	str	r3, [r7, #24]
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	2b7f      	cmp	r3, #127	; 0x7f
 80057b0:	d8f0      	bhi.n	8005794 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	61fa      	str	r2, [r7, #28]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	2300      	movs	r3, #0
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	e00b      	b.n	80057e4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	1c59      	adds	r1, r3, #1
 80057d4:	6179      	str	r1, [r7, #20]
 80057d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	09db      	lsrs	r3, r3, #7
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	2b7f      	cmp	r3, #127	; 0x7f
 80057e8:	d8f0      	bhi.n	80057cc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	617a      	str	r2, [r7, #20]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80057fa:	2218      	movs	r2, #24
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	68b8      	ldr	r0, [r7, #8]
 8005800:	f7fe fff6 	bl	80047f0 <_SendPacket>
  RECORD_END();
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800580a:	4b06      	ldr	r3, [pc, #24]	; (8005824 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005812:	4b04      	ldr	r3, [pc, #16]	; (8005824 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	4798      	blx	r3
  }
}
 8005818:	bf00      	nop
 800581a:	3730      	adds	r7, #48	; 0x30
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20014350 	.word	0x20014350
 8005824:	20014320 	.word	0x20014320

08005828 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005828:	b580      	push	{r7, lr}
 800582a:	b092      	sub	sp, #72	; 0x48
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005830:	f3ef 8311 	mrs	r3, BASEPRI
 8005834:	f04f 0120 	mov.w	r1, #32
 8005838:	f381 8811 	msr	BASEPRI, r1
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	486a      	ldr	r0, [pc, #424]	; (80059e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005840:	f7fe fee8 	bl	8004614 <_PreparePacket>
 8005844:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	647b      	str	r3, [r7, #68]	; 0x44
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	4b66      	ldr	r3, [pc, #408]	; (80059ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	643b      	str	r3, [r7, #64]	; 0x40
 800585a:	e00b      	b.n	8005874 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800585c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800585e:	b2da      	uxtb	r2, r3
 8005860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005862:	1c59      	adds	r1, r3, #1
 8005864:	6479      	str	r1, [r7, #68]	; 0x44
 8005866:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005870:	09db      	lsrs	r3, r3, #7
 8005872:	643b      	str	r3, [r7, #64]	; 0x40
 8005874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005876:	2b7f      	cmp	r3, #127	; 0x7f
 8005878:	d8f0      	bhi.n	800585c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800587a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	647a      	str	r2, [r7, #68]	; 0x44
 8005880:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005888:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	63bb      	str	r3, [r7, #56]	; 0x38
 8005894:	e00b      	b.n	80058ae <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005898:	b2da      	uxtb	r2, r3
 800589a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800589c:	1c59      	adds	r1, r3, #1
 800589e:	63f9      	str	r1, [r7, #60]	; 0x3c
 80058a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058aa:	09db      	lsrs	r3, r3, #7
 80058ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80058ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b0:	2b7f      	cmp	r3, #127	; 0x7f
 80058b2:	d8f0      	bhi.n	8005896 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80058b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80058ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	2220      	movs	r2, #32
 80058ca:	4619      	mov	r1, r3
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f7fe fe51 	bl	8004574 <_EncodeStr>
 80058d2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80058d4:	2209      	movs	r2, #9
 80058d6:	68f9      	ldr	r1, [r7, #12]
 80058d8:	6938      	ldr	r0, [r7, #16]
 80058da:	f7fe ff89 	bl	80047f0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	637b      	str	r3, [r7, #52]	; 0x34
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	4b40      	ldr	r3, [pc, #256]	; (80059ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	633b      	str	r3, [r7, #48]	; 0x30
 80058f2:	e00b      	b.n	800590c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fa:	1c59      	adds	r1, r3, #1
 80058fc:	6379      	str	r1, [r7, #52]	; 0x34
 80058fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]
 8005906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005908:	09db      	lsrs	r3, r3, #7
 800590a:	633b      	str	r3, [r7, #48]	; 0x30
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590e:	2b7f      	cmp	r3, #127	; 0x7f
 8005910:	d8f0      	bhi.n	80058f4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	637a      	str	r2, [r7, #52]	; 0x34
 8005918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005920:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	62bb      	str	r3, [r7, #40]	; 0x28
 800592c:	e00b      	b.n	8005946 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	b2da      	uxtb	r2, r3
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005934:	1c59      	adds	r1, r3, #1
 8005936:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005938:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	701a      	strb	r2, [r3, #0]
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	09db      	lsrs	r3, r3, #7
 8005944:	62bb      	str	r3, [r7, #40]	; 0x28
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	2b7f      	cmp	r3, #127	; 0x7f
 800594a:	d8f0      	bhi.n	800592e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	701a      	strb	r2, [r3, #0]
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	623b      	str	r3, [r7, #32]
 8005966:	e00b      	b.n	8005980 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	b2da      	uxtb	r2, r3
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	1c59      	adds	r1, r3, #1
 8005970:	6279      	str	r1, [r7, #36]	; 0x24
 8005972:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	701a      	strb	r2, [r3, #0]
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	09db      	lsrs	r3, r3, #7
 800597e:	623b      	str	r3, [r7, #32]
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	2b7f      	cmp	r3, #127	; 0x7f
 8005984:	d8f0      	bhi.n	8005968 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	627a      	str	r2, [r7, #36]	; 0x24
 800598c:	6a3a      	ldr	r2, [r7, #32]
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	61fb      	str	r3, [r7, #28]
 800599a:	2300      	movs	r3, #0
 800599c:	61bb      	str	r3, [r7, #24]
 800599e:	e00b      	b.n	80059b8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	1c59      	adds	r1, r3, #1
 80059a8:	61f9      	str	r1, [r7, #28]
 80059aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	09db      	lsrs	r3, r3, #7
 80059b6:	61bb      	str	r3, [r7, #24]
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	2b7f      	cmp	r3, #127	; 0x7f
 80059bc:	d8f0      	bhi.n	80059a0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	61fa      	str	r2, [r7, #28]
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80059ce:	2215      	movs	r2, #21
 80059d0:	68f9      	ldr	r1, [r7, #12]
 80059d2:	6938      	ldr	r0, [r7, #16]
 80059d4:	f7fe ff0c 	bl	80047f0 <_SendPacket>
  RECORD_END();
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f383 8811 	msr	BASEPRI, r3
}
 80059de:	bf00      	nop
 80059e0:	3748      	adds	r7, #72	; 0x48
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20014350 	.word	0x20014350
 80059ec:	20014320 	.word	0x20014320

080059f0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80059f4:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d008      	beq.n	8005a0e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80059fc:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005a06:	4b03      	ldr	r3, [pc, #12]	; (8005a14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	4798      	blx	r3
  }
}
 8005a0e:	bf00      	nop
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20014320 	.word	0x20014320

08005a18 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a20:	f3ef 8311 	mrs	r3, BASEPRI
 8005a24:	f04f 0120 	mov.w	r1, #32
 8005a28:	f381 8811 	msr	BASEPRI, r1
 8005a2c:	617b      	str	r3, [r7, #20]
 8005a2e:	480b      	ldr	r0, [pc, #44]	; (8005a5c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005a30:	f7fe fdf0 	bl	8004614 <_PreparePacket>
 8005a34:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a36:	2280      	movs	r2, #128	; 0x80
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	6938      	ldr	r0, [r7, #16]
 8005a3c:	f7fe fd9a 	bl	8004574 <_EncodeStr>
 8005a40:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005a42:	220e      	movs	r2, #14
 8005a44:	68f9      	ldr	r1, [r7, #12]
 8005a46:	6938      	ldr	r0, [r7, #16]
 8005a48:	f7fe fed2 	bl	80047f0 <_SendPacket>
  RECORD_END();
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f383 8811 	msr	BASEPRI, r3
}
 8005a52:	bf00      	nop
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20014350 	.word	0x20014350

08005a60 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005a60:	b590      	push	{r4, r7, lr}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005a66:	4b15      	ldr	r3, [pc, #84]	; (8005abc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d01a      	beq.n	8005aa4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005a6e:	4b13      	ldr	r3, [pc, #76]	; (8005abc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d015      	beq.n	8005aa4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005a78:	4b10      	ldr	r3, [pc, #64]	; (8005abc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4798      	blx	r3
 8005a80:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005a84:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005a86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	000a      	movs	r2, r1
 8005a94:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005a96:	4613      	mov	r3, r2
 8005a98:	461a      	mov	r2, r3
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	200d      	movs	r0, #13
 8005a9e:	f7ff fc5d 	bl	800535c <SEGGER_SYSVIEW_RecordU32x2>
 8005aa2:	e006      	b.n	8005ab2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005aa4:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	200c      	movs	r0, #12
 8005aac:	f7ff fc1a 	bl	80052e4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005ab0:	bf00      	nop
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd90      	pop	{r4, r7, pc}
 8005aba:	bf00      	nop
 8005abc:	20014320 	.word	0x20014320
 8005ac0:	e0001004 	.word	0xe0001004

08005ac4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005aca:	f3ef 8311 	mrs	r3, BASEPRI
 8005ace:	f04f 0120 	mov.w	r1, #32
 8005ad2:	f381 8811 	msr	BASEPRI, r1
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	4819      	ldr	r0, [pc, #100]	; (8005b40 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005ada:	f7fe fd9b 	bl	8004614 <_PreparePacket>
 8005ade:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005ae4:	4b17      	ldr	r3, [pc, #92]	; (8005b44 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aec:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	e00b      	b.n	8005b10 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	1c59      	adds	r1, r3, #1
 8005b00:	6179      	str	r1, [r7, #20]
 8005b02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	09db      	lsrs	r3, r3, #7
 8005b0e:	613b      	str	r3, [r7, #16]
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	2b7f      	cmp	r3, #127	; 0x7f
 8005b14:	d8f0      	bhi.n	8005af8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	617a      	str	r2, [r7, #20]
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005b26:	2202      	movs	r2, #2
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	68b8      	ldr	r0, [r7, #8]
 8005b2c:	f7fe fe60 	bl	80047f0 <_SendPacket>
  RECORD_END();
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f383 8811 	msr	BASEPRI, r3
}
 8005b36:	bf00      	nop
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20014350 	.word	0x20014350
 8005b44:	e000ed04 	.word	0xe000ed04

08005b48 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b4e:	f3ef 8311 	mrs	r3, BASEPRI
 8005b52:	f04f 0120 	mov.w	r1, #32
 8005b56:	f381 8811 	msr	BASEPRI, r1
 8005b5a:	607b      	str	r3, [r7, #4]
 8005b5c:	4807      	ldr	r0, [pc, #28]	; (8005b7c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005b5e:	f7fe fd59 	bl	8004614 <_PreparePacket>
 8005b62:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005b64:	2203      	movs	r2, #3
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	6838      	ldr	r0, [r7, #0]
 8005b6a:	f7fe fe41 	bl	80047f0 <_SendPacket>
  RECORD_END();
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f383 8811 	msr	BASEPRI, r3
}
 8005b74:	bf00      	nop
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	20014350 	.word	0x20014350

08005b80 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b86:	f3ef 8311 	mrs	r3, BASEPRI
 8005b8a:	f04f 0120 	mov.w	r1, #32
 8005b8e:	f381 8811 	msr	BASEPRI, r1
 8005b92:	607b      	str	r3, [r7, #4]
 8005b94:	4807      	ldr	r0, [pc, #28]	; (8005bb4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005b96:	f7fe fd3d 	bl	8004614 <_PreparePacket>
 8005b9a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005b9c:	2212      	movs	r2, #18
 8005b9e:	6839      	ldr	r1, [r7, #0]
 8005ba0:	6838      	ldr	r0, [r7, #0]
 8005ba2:	f7fe fe25 	bl	80047f0 <_SendPacket>
  RECORD_END();
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f383 8811 	msr	BASEPRI, r3
}
 8005bac:	bf00      	nop
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	20014350 	.word	0x20014350

08005bb8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005bbe:	f3ef 8311 	mrs	r3, BASEPRI
 8005bc2:	f04f 0120 	mov.w	r1, #32
 8005bc6:	f381 8811 	msr	BASEPRI, r1
 8005bca:	607b      	str	r3, [r7, #4]
 8005bcc:	4807      	ldr	r0, [pc, #28]	; (8005bec <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005bce:	f7fe fd21 	bl	8004614 <_PreparePacket>
 8005bd2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005bd4:	2211      	movs	r2, #17
 8005bd6:	6839      	ldr	r1, [r7, #0]
 8005bd8:	6838      	ldr	r0, [r7, #0]
 8005bda:	f7fe fe09 	bl	80047f0 <_SendPacket>
  RECORD_END();
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f383 8811 	msr	BASEPRI, r3
}
 8005be4:	bf00      	nop
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20014350 	.word	0x20014350

08005bf0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005bf8:	f3ef 8311 	mrs	r3, BASEPRI
 8005bfc:	f04f 0120 	mov.w	r1, #32
 8005c00:	f381 8811 	msr	BASEPRI, r1
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	4819      	ldr	r0, [pc, #100]	; (8005c6c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005c08:	f7fe fd04 	bl	8004614 <_PreparePacket>
 8005c0c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005c12:	4b17      	ldr	r3, [pc, #92]	; (8005c70 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	61fb      	str	r3, [r7, #28]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	61bb      	str	r3, [r7, #24]
 8005c24:	e00b      	b.n	8005c3e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	1c59      	adds	r1, r3, #1
 8005c2e:	61f9      	str	r1, [r7, #28]
 8005c30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	701a      	strb	r2, [r3, #0]
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	09db      	lsrs	r3, r3, #7
 8005c3c:	61bb      	str	r3, [r7, #24]
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	2b7f      	cmp	r3, #127	; 0x7f
 8005c42:	d8f0      	bhi.n	8005c26 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	61fa      	str	r2, [r7, #28]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	701a      	strb	r2, [r3, #0]
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005c54:	2208      	movs	r2, #8
 8005c56:	68f9      	ldr	r1, [r7, #12]
 8005c58:	6938      	ldr	r0, [r7, #16]
 8005c5a:	f7fe fdc9 	bl	80047f0 <_SendPacket>
  RECORD_END();
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f383 8811 	msr	BASEPRI, r3
}
 8005c64:	bf00      	nop
 8005c66:	3720      	adds	r7, #32
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	20014350 	.word	0x20014350
 8005c70:	20014320 	.word	0x20014320

08005c74 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c7c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c80:	f04f 0120 	mov.w	r1, #32
 8005c84:	f381 8811 	msr	BASEPRI, r1
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	4819      	ldr	r0, [pc, #100]	; (8005cf0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005c8c:	f7fe fcc2 	bl	8004614 <_PreparePacket>
 8005c90:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005c96:	4b17      	ldr	r3, [pc, #92]	; (8005cf4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	61fb      	str	r3, [r7, #28]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	61bb      	str	r3, [r7, #24]
 8005ca8:	e00b      	b.n	8005cc2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	1c59      	adds	r1, r3, #1
 8005cb2:	61f9      	str	r1, [r7, #28]
 8005cb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	701a      	strb	r2, [r3, #0]
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	09db      	lsrs	r3, r3, #7
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc6:	d8f0      	bhi.n	8005caa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	61fa      	str	r2, [r7, #28]
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	701a      	strb	r2, [r3, #0]
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005cd8:	2204      	movs	r2, #4
 8005cda:	68f9      	ldr	r1, [r7, #12]
 8005cdc:	6938      	ldr	r0, [r7, #16]
 8005cde:	f7fe fd87 	bl	80047f0 <_SendPacket>
  RECORD_END();
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f383 8811 	msr	BASEPRI, r3
}
 8005ce8:	bf00      	nop
 8005cea:	3720      	adds	r7, #32
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	20014350 	.word	0x20014350
 8005cf4:	20014320 	.word	0x20014320

08005cf8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d00:	f3ef 8311 	mrs	r3, BASEPRI
 8005d04:	f04f 0120 	mov.w	r1, #32
 8005d08:	f381 8811 	msr	BASEPRI, r1
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	4819      	ldr	r0, [pc, #100]	; (8005d74 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005d10:	f7fe fc80 	bl	8004614 <_PreparePacket>
 8005d14:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005d1a:	4b17      	ldr	r3, [pc, #92]	; (8005d78 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	61fb      	str	r3, [r7, #28]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	61bb      	str	r3, [r7, #24]
 8005d2c:	e00b      	b.n	8005d46 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	1c59      	adds	r1, r3, #1
 8005d36:	61f9      	str	r1, [r7, #28]
 8005d38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	09db      	lsrs	r3, r3, #7
 8005d44:	61bb      	str	r3, [r7, #24]
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	2b7f      	cmp	r3, #127	; 0x7f
 8005d4a:	d8f0      	bhi.n	8005d2e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	61fa      	str	r2, [r7, #28]
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	b2d2      	uxtb	r2, r2
 8005d56:	701a      	strb	r2, [r3, #0]
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005d5c:	2206      	movs	r2, #6
 8005d5e:	68f9      	ldr	r1, [r7, #12]
 8005d60:	6938      	ldr	r0, [r7, #16]
 8005d62:	f7fe fd45 	bl	80047f0 <_SendPacket>
  RECORD_END();
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f383 8811 	msr	BASEPRI, r3
}
 8005d6c:	bf00      	nop
 8005d6e:	3720      	adds	r7, #32
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20014350 	.word	0x20014350
 8005d78:	20014320 	.word	0x20014320

08005d7c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08a      	sub	sp, #40	; 0x28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d86:	f3ef 8311 	mrs	r3, BASEPRI
 8005d8a:	f04f 0120 	mov.w	r1, #32
 8005d8e:	f381 8811 	msr	BASEPRI, r1
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	4827      	ldr	r0, [pc, #156]	; (8005e34 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005d96:	f7fe fc3d 	bl	8004614 <_PreparePacket>
 8005d9a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005da0:	4b25      	ldr	r3, [pc, #148]	; (8005e38 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	623b      	str	r3, [r7, #32]
 8005db2:	e00b      	b.n	8005dcc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	1c59      	adds	r1, r3, #1
 8005dbc:	6279      	str	r1, [r7, #36]	; 0x24
 8005dbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	09db      	lsrs	r3, r3, #7
 8005dca:	623b      	str	r3, [r7, #32]
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	2b7f      	cmp	r3, #127	; 0x7f
 8005dd0:	d8f0      	bhi.n	8005db4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	627a      	str	r2, [r7, #36]	; 0x24
 8005dd8:	6a3a      	ldr	r2, [r7, #32]
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	61fb      	str	r3, [r7, #28]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	e00b      	b.n	8005e04 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	1c59      	adds	r1, r3, #1
 8005df4:	61f9      	str	r1, [r7, #28]
 8005df6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	701a      	strb	r2, [r3, #0]
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	09db      	lsrs	r3, r3, #7
 8005e02:	61bb      	str	r3, [r7, #24]
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	2b7f      	cmp	r3, #127	; 0x7f
 8005e08:	d8f0      	bhi.n	8005dec <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	61fa      	str	r2, [r7, #28]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	701a      	strb	r2, [r3, #0]
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005e1a:	2207      	movs	r2, #7
 8005e1c:	68f9      	ldr	r1, [r7, #12]
 8005e1e:	6938      	ldr	r0, [r7, #16]
 8005e20:	f7fe fce6 	bl	80047f0 <_SendPacket>
  RECORD_END();
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f383 8811 	msr	BASEPRI, r3
}
 8005e2a:	bf00      	nop
 8005e2c:	3728      	adds	r7, #40	; 0x28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20014350 	.word	0x20014350
 8005e38:	20014320 	.word	0x20014320

08005e3c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005e44:	4b04      	ldr	r3, [pc, #16]	; (8005e58 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	1ad3      	subs	r3, r2, r3
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	20014320 	.word	0x20014320

08005e5c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08c      	sub	sp, #48	; 0x30
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	4603      	mov	r3, r0
 8005e64:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005e66:	4b3b      	ldr	r3, [pc, #236]	; (8005f54 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d06d      	beq.n	8005f4a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005e6e:	4b39      	ldr	r3, [pc, #228]	; (8005f54 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005e74:	2300      	movs	r3, #0
 8005e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e78:	e008      	b.n	8005e8c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d007      	beq.n	8005e96 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e88:	3301      	adds	r3, #1
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e8c:	79fb      	ldrb	r3, [r7, #7]
 8005e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d3f2      	bcc.n	8005e7a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005e94:	e000      	b.n	8005e98 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005e96:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d055      	beq.n	8005f4a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e9e:	f3ef 8311 	mrs	r3, BASEPRI
 8005ea2:	f04f 0120 	mov.w	r1, #32
 8005ea6:	f381 8811 	msr	BASEPRI, r1
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	482a      	ldr	r0, [pc, #168]	; (8005f58 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005eae:	f7fe fbb1 	bl	8004614 <_PreparePacket>
 8005eb2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	623b      	str	r3, [r7, #32]
 8005ec0:	e00b      	b.n	8005eda <SEGGER_SYSVIEW_SendModule+0x7e>
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	1c59      	adds	r1, r3, #1
 8005eca:	6279      	str	r1, [r7, #36]	; 0x24
 8005ecc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	701a      	strb	r2, [r3, #0]
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	09db      	lsrs	r3, r3, #7
 8005ed8:	623b      	str	r3, [r7, #32]
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	2b7f      	cmp	r3, #127	; 0x7f
 8005ede:	d8f0      	bhi.n	8005ec2 <SEGGER_SYSVIEW_SendModule+0x66>
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	627a      	str	r2, [r7, #36]	; 0x24
 8005ee6:	6a3a      	ldr	r2, [r7, #32]
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	61fb      	str	r3, [r7, #28]
 8005ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	61bb      	str	r3, [r7, #24]
 8005efa:	e00b      	b.n	8005f14 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	1c59      	adds	r1, r3, #1
 8005f04:	61f9      	str	r1, [r7, #28]
 8005f06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	09db      	lsrs	r3, r3, #7
 8005f12:	61bb      	str	r3, [r7, #24]
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	2b7f      	cmp	r3, #127	; 0x7f
 8005f18:	d8f0      	bhi.n	8005efc <SEGGER_SYSVIEW_SendModule+0xa0>
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	61fa      	str	r2, [r7, #28]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2280      	movs	r2, #128	; 0x80
 8005f30:	4619      	mov	r1, r3
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f7fe fb1e 	bl	8004574 <_EncodeStr>
 8005f38:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005f3a:	2216      	movs	r2, #22
 8005f3c:	68f9      	ldr	r1, [r7, #12]
 8005f3e:	6938      	ldr	r0, [r7, #16]
 8005f40:	f7fe fc56 	bl	80047f0 <_SendPacket>
      RECORD_END();
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005f4a:	bf00      	nop
 8005f4c:	3730      	adds	r7, #48	; 0x30
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20014348 	.word	0x20014348
 8005f58:	20014350 	.word	0x20014350

08005f5c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005f62:	4b0c      	ldr	r3, [pc, #48]	; (8005f94 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00f      	beq.n	8005f8a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005f6a:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1f2      	bne.n	8005f70 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005f8a:	bf00      	nop
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	20014348 	.word	0x20014348

08005f98 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005f9e:	f3ef 8311 	mrs	r3, BASEPRI
 8005fa2:	f04f 0120 	mov.w	r1, #32
 8005fa6:	f381 8811 	msr	BASEPRI, r1
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	4817      	ldr	r0, [pc, #92]	; (800600c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005fae:	f7fe fb31 	bl	8004614 <_PreparePacket>
 8005fb2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	4b14      	ldr	r3, [pc, #80]	; (8006010 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	613b      	str	r3, [r7, #16]
 8005fc2:	e00b      	b.n	8005fdc <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	1c59      	adds	r1, r3, #1
 8005fcc:	6179      	str	r1, [r7, #20]
 8005fce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fd2:	b2d2      	uxtb	r2, r2
 8005fd4:	701a      	strb	r2, [r3, #0]
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	09db      	lsrs	r3, r3, #7
 8005fda:	613b      	str	r3, [r7, #16]
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	2b7f      	cmp	r3, #127	; 0x7f
 8005fe0:	d8f0      	bhi.n	8005fc4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	1c5a      	adds	r2, r3, #1
 8005fe6:	617a      	str	r2, [r7, #20]
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	b2d2      	uxtb	r2, r2
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005ff2:	221b      	movs	r2, #27
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	68b8      	ldr	r0, [r7, #8]
 8005ff8:	f7fe fbfa 	bl	80047f0 <_SendPacket>
  RECORD_END();
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f383 8811 	msr	BASEPRI, r3
}
 8006002:	bf00      	nop
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20014350 	.word	0x20014350
 8006010:	2001434c 	.word	0x2001434c

08006014 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006014:	b40f      	push	{r0, r1, r2, r3}
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800601c:	f107 0314 	add.w	r3, r7, #20
 8006020:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006022:	1d3b      	adds	r3, r7, #4
 8006024:	461a      	mov	r2, r3
 8006026:	2100      	movs	r1, #0
 8006028:	6938      	ldr	r0, [r7, #16]
 800602a:	f7fe fef1 	bl	8004e10 <_VPrintTarget>
  va_end(ParamList);
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006038:	b004      	add	sp, #16
 800603a:	4770      	bx	lr

0800603c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800603c:	b580      	push	{r7, lr}
 800603e:	b08a      	sub	sp, #40	; 0x28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006044:	f3ef 8311 	mrs	r3, BASEPRI
 8006048:	f04f 0120 	mov.w	r1, #32
 800604c:	f381 8811 	msr	BASEPRI, r1
 8006050:	617b      	str	r3, [r7, #20]
 8006052:	4827      	ldr	r0, [pc, #156]	; (80060f0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006054:	f7fe fade 	bl	8004614 <_PreparePacket>
 8006058:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800605a:	2280      	movs	r2, #128	; 0x80
 800605c:	6879      	ldr	r1, [r7, #4]
 800605e:	6938      	ldr	r0, [r7, #16]
 8006060:	f7fe fa88 	bl	8004574 <_EncodeStr>
 8006064:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
 800606a:	2301      	movs	r3, #1
 800606c:	623b      	str	r3, [r7, #32]
 800606e:	e00b      	b.n	8006088 <SEGGER_SYSVIEW_Warn+0x4c>
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	b2da      	uxtb	r2, r3
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	1c59      	adds	r1, r3, #1
 8006078:	6279      	str	r1, [r7, #36]	; 0x24
 800607a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	701a      	strb	r2, [r3, #0]
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	09db      	lsrs	r3, r3, #7
 8006086:	623b      	str	r3, [r7, #32]
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	2b7f      	cmp	r3, #127	; 0x7f
 800608c:	d8f0      	bhi.n	8006070 <SEGGER_SYSVIEW_Warn+0x34>
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	627a      	str	r2, [r7, #36]	; 0x24
 8006094:	6a3a      	ldr	r2, [r7, #32]
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	2300      	movs	r3, #0
 80060a4:	61bb      	str	r3, [r7, #24]
 80060a6:	e00b      	b.n	80060c0 <SEGGER_SYSVIEW_Warn+0x84>
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	1c59      	adds	r1, r3, #1
 80060b0:	61f9      	str	r1, [r7, #28]
 80060b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060b6:	b2d2      	uxtb	r2, r2
 80060b8:	701a      	strb	r2, [r3, #0]
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	09db      	lsrs	r3, r3, #7
 80060be:	61bb      	str	r3, [r7, #24]
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	2b7f      	cmp	r3, #127	; 0x7f
 80060c4:	d8f0      	bhi.n	80060a8 <SEGGER_SYSVIEW_Warn+0x6c>
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	61fa      	str	r2, [r7, #28]
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	b2d2      	uxtb	r2, r2
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80060d6:	221a      	movs	r2, #26
 80060d8:	68f9      	ldr	r1, [r7, #12]
 80060da:	6938      	ldr	r0, [r7, #16]
 80060dc:	f7fe fb88 	bl	80047f0 <_SendPacket>
  RECORD_END();
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f383 8811 	msr	BASEPRI, r3
}
 80060e6:	bf00      	nop
 80060e8:	3728      	adds	r7, #40	; 0x28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	20014350 	.word	0x20014350

080060f4 <__libc_init_array>:
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	4d0d      	ldr	r5, [pc, #52]	; (800612c <__libc_init_array+0x38>)
 80060f8:	4c0d      	ldr	r4, [pc, #52]	; (8006130 <__libc_init_array+0x3c>)
 80060fa:	1b64      	subs	r4, r4, r5
 80060fc:	10a4      	asrs	r4, r4, #2
 80060fe:	2600      	movs	r6, #0
 8006100:	42a6      	cmp	r6, r4
 8006102:	d109      	bne.n	8006118 <__libc_init_array+0x24>
 8006104:	4d0b      	ldr	r5, [pc, #44]	; (8006134 <__libc_init_array+0x40>)
 8006106:	4c0c      	ldr	r4, [pc, #48]	; (8006138 <__libc_init_array+0x44>)
 8006108:	f000 f83e 	bl	8006188 <_init>
 800610c:	1b64      	subs	r4, r4, r5
 800610e:	10a4      	asrs	r4, r4, #2
 8006110:	2600      	movs	r6, #0
 8006112:	42a6      	cmp	r6, r4
 8006114:	d105      	bne.n	8006122 <__libc_init_array+0x2e>
 8006116:	bd70      	pop	{r4, r5, r6, pc}
 8006118:	f855 3b04 	ldr.w	r3, [r5], #4
 800611c:	4798      	blx	r3
 800611e:	3601      	adds	r6, #1
 8006120:	e7ee      	b.n	8006100 <__libc_init_array+0xc>
 8006122:	f855 3b04 	ldr.w	r3, [r5], #4
 8006126:	4798      	blx	r3
 8006128:	3601      	adds	r6, #1
 800612a:	e7f2      	b.n	8006112 <__libc_init_array+0x1e>
 800612c:	08006374 	.word	0x08006374
 8006130:	08006374 	.word	0x08006374
 8006134:	08006374 	.word	0x08006374
 8006138:	08006378 	.word	0x08006378

0800613c <memcmp>:
 800613c:	b510      	push	{r4, lr}
 800613e:	3901      	subs	r1, #1
 8006140:	4402      	add	r2, r0
 8006142:	4290      	cmp	r0, r2
 8006144:	d101      	bne.n	800614a <memcmp+0xe>
 8006146:	2000      	movs	r0, #0
 8006148:	e005      	b.n	8006156 <memcmp+0x1a>
 800614a:	7803      	ldrb	r3, [r0, #0]
 800614c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006150:	42a3      	cmp	r3, r4
 8006152:	d001      	beq.n	8006158 <memcmp+0x1c>
 8006154:	1b18      	subs	r0, r3, r4
 8006156:	bd10      	pop	{r4, pc}
 8006158:	3001      	adds	r0, #1
 800615a:	e7f2      	b.n	8006142 <memcmp+0x6>

0800615c <memcpy>:
 800615c:	440a      	add	r2, r1
 800615e:	4291      	cmp	r1, r2
 8006160:	f100 33ff 	add.w	r3, r0, #4294967295
 8006164:	d100      	bne.n	8006168 <memcpy+0xc>
 8006166:	4770      	bx	lr
 8006168:	b510      	push	{r4, lr}
 800616a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800616e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006172:	4291      	cmp	r1, r2
 8006174:	d1f9      	bne.n	800616a <memcpy+0xe>
 8006176:	bd10      	pop	{r4, pc}

08006178 <memset>:
 8006178:	4402      	add	r2, r0
 800617a:	4603      	mov	r3, r0
 800617c:	4293      	cmp	r3, r2
 800617e:	d100      	bne.n	8006182 <memset+0xa>
 8006180:	4770      	bx	lr
 8006182:	f803 1b01 	strb.w	r1, [r3], #1
 8006186:	e7f9      	b.n	800617c <memset+0x4>

08006188 <_init>:
 8006188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618a:	bf00      	nop
 800618c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800618e:	bc08      	pop	{r3}
 8006190:	469e      	mov	lr, r3
 8006192:	4770      	bx	lr

08006194 <_fini>:
 8006194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006196:	bf00      	nop
 8006198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800619a:	bc08      	pop	{r3}
 800619c:	469e      	mov	lr, r3
 800619e:	4770      	bx	lr
